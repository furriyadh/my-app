#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
๐ข Business Data Models - ููุงุฐุฌ ุจูุงูุงุช ุงูุฃุนูุงู
============================================

ููุงุฐุฌ ุดุงููุฉ ูุจูุงูุงุช ุงูุฃุนูุงู ูุงูุดุฑูุงุช:
- ูุนูููุงุช ุงูุดุฑูุฉ ุงูุฃุณุงุณูุฉ
- ุจูุงูุงุช ุงูุงุชุตุงู ูุงููููุน
- ููุงููุณ ุงูุฃุฏุงุก ูุงูููู
- ุชุญููู ุงูุณูู ูุงูููุงูุณูู
- ุจูุงูุงุช ุงูุตูุงุนุฉ ูุงููุทุงุน
- ูููุงุช ุชุนุฑูู ุงูููุงูุณูู

ุงููุทูุฑ: Google Ads AI Platform Team
ุงูุชุงุฑูุฎ: 2025-07-07
ุงูุฅุตุฏุงุฑ: 1.0.0
"""

import logging
from typing import Dict, Any, List, Optional, Union
from datetime import datetime, date
from enum import Enum
from dataclasses import dataclass, field

# ุงุณุชูุฑุงุฏ Pydantic ุฅุฐุง ูุงู ูุชุงุญุงู
try:
    from pydantic import BaseModel, Field, validator, root_validator
    PYDANTIC_AVAILABLE = True
except ImportError:
    # ุงุณุชุฎุฏุงู dataclasses ูุจุฏูู
    from dataclasses import dataclass as BaseModel
    def Field(*args, **kwargs):
        return field()
    def validator(*args, **kwargs):
        def decorator(func):
            return func
        return decorator
    def root_validator(*args, **kwargs):
        def decorator(func):
            return func
        return decorator
    PYDANTIC_AVAILABLE = False

logger = logging.getLogger(__name__)

# ==================== Enums ====================

class BusinessType(str, Enum):
    """ุฃููุงุน ุงูุฃุนูุงู"""
    ECOMMERCE = "ecommerce"                    # ุงูุชุฌุงุฑุฉ ุงูุฅููุชุฑูููุฉ
    RETAIL = "retail"                          # ุงูุชุฌุงุฑุฉ ุงูุชูููุฏูุฉ
    SERVICES = "services"                      # ุงูุฎุฏูุงุช
    MANUFACTURING = "manufacturing"            # ุงูุชุตููุน
    TECHNOLOGY = "technology"                  # ุงูุชูููููุฌูุง
    HEALTHCARE = "healthcare"                  # ุงูุฑุนุงูุฉ ุงูุตุญูุฉ
    EDUCATION = "education"                    # ุงูุชุนููู
    FINANCE = "finance"                        # ุงููุงููุฉ
    REAL_ESTATE = "real_estate"               # ุงูุนูุงุฑุงุช
    FOOD_BEVERAGE = "food_beverage"           # ุงูุฃุบุฐูุฉ ูุงููุดุฑูุจุงุช
    TRAVEL_TOURISM = "travel_tourism"         # ุงูุณูุฑ ูุงูุณูุงุญุฉ
    AUTOMOTIVE = "automotive"                  # ุงูุณูุงุฑุงุช
    FASHION = "fashion"                        # ุงูุฃุฒูุงุก
    ENTERTAINMENT = "entertainment"            # ุงูุชุฑููู
    NON_PROFIT = "non_profit"                 # ุบูุฑ ุฑุจุญู
    OTHER = "other"                           # ุฃุฎุฑู

class BusinessSize(str, Enum):
    """ุฃุญุฌุงู ุงูุฃุนูุงู"""
    STARTUP = "startup"                        # ูุงุดุฆุฉ (1-10 ููุธููู)
    SMALL = "small"                           # ุตุบูุฑุฉ (11-50 ููุธู)
    MEDIUM = "medium"                         # ูุชูุณุทุฉ (51-250 ููุธู)
    LARGE = "large"                           # ูุจูุฑุฉ (251-1000 ููุธู)
    ENTERPRISE = "enterprise"                 # ูุคุณุณูุฉ (1000+ ููุธู)

class MarketPosition(str, Enum):
    """ุงููุฑูุฒ ูู ุงูุณูู"""
    LEADER = "leader"                         # ุฑุงุฆุฏ ุงูุณูู
    CHALLENGER = "challenger"                 # ููุงูุณ ููู
    FOLLOWER = "follower"                     # ุชุงุจุน
    NICHE = "niche"                          # ูุชุฎุตุต ูู ูุฌุงู ุถูู
    NEW_ENTRANT = "new_entrant"              # ุฏุงุฎู ุฌุฏูุฏ

class GrowthStage(str, Enum):
    """ูุฑุญูุฉ ุงูููู"""
    STARTUP = "startup"                       # ุจุฏุงูุฉ
    GROWTH = "growth"                         # ููู
    MATURITY = "maturity"                     # ูุถุฌ
    DECLINE = "decline"                       # ุชุฑุงุฌุน
    TRANSFORMATION = "transformation"         # ุชุญูู

# ==================== ููุงุฐุฌ ุงูุจูุงูุงุช ุงูุฃุณุงุณูุฉ ====================

class ContactInfo(BaseModel):
    """
    ๐ ูุนูููุงุช ุงูุงุชุตุงู
    """
    email: Optional[str] = Field(None, description="ุงูุจุฑูุฏ ุงูุฅููุชุฑููู")
    phone: Optional[str] = Field(None, description="ุฑูู ุงููุงุชู")
    mobile: Optional[str] = Field(None, description="ุฑูู ุงูุฌูุงู")
    fax: Optional[str] = Field(None, description="ุฑูู ุงููุงูุณ")
    website: Optional[str] = Field(None, description="ุงููููุน ุงูุฅููุชุฑููู")
    
    # ูุณุงุฆู ุงูุชูุงุตู ุงูุงุฌุชูุงุนู
    facebook: Optional[str] = Field(None, description="ุตูุญุฉ ููุณุจูู")
    twitter: Optional[str] = Field(None, description="ุญุณุงุจ ุชููุชุฑ")
    linkedin: Optional[str] = Field(None, description="ุตูุญุฉ ููููุฏ ุฅู")
    instagram: Optional[str] = Field(None, description="ุญุณุงุจ ุฅูุณุชุบุฑุงู")
    youtube: Optional[str] = Field(None, description="ููุงุฉ ููุชููุจ")
    
    # ุนููุงู ุงูุดุฑูุฉ
    address_line1: Optional[str] = Field(None, description="ุงูุนููุงู ุงูุฃูู")
    address_line2: Optional[str] = Field(None, description="ุงูุนููุงู ุงูุซุงูู")
    city: Optional[str] = Field(None, description="ุงููุฏููุฉ")
    state: Optional[str] = Field(None, description="ุงูููุทูุฉ/ุงูููุงูุฉ")
    postal_code: Optional[str] = Field(None, description="ุงูุฑูุฒ ุงูุจุฑูุฏู")
    country: Optional[str] = Field(None, description="ุงูุฏููุฉ")
    
    # ุฅุญุฏุงุซูุงุช ุฌุบุฑุงููุฉ
    latitude: Optional[float] = Field(None, description="ุฎุท ุงูุนุฑุถ")
    longitude: Optional[float] = Field(None, description="ุฎุท ุงูุทูู")
    
    if PYDANTIC_AVAILABLE:
        @validator('email')
        def validate_email(cls, v):
            if v and '@' not in v:
                raise ValueError('ุจุฑูุฏ ุฅููุชุฑููู ุบูุฑ ุตุญูุญ')
            return v
        
        @validator('website')
        def validate_website(cls, v):
            if v and not v.startswith(('http://', 'https://')):
                return f'https://{v}'
            return v

class BusinessProfile(BaseModel):
    """
    ๐ข ููู ุชุนุฑูู ุงูุดุฑูุฉ
    """
    # ูุนูููุงุช ุฃุณุงุณูุฉ
    business_name: str = Field(..., description="ุงุณู ุงูุดุฑูุฉ")
    legal_name: Optional[str] = Field(None, description="ุงูุงุณู ุงููุงูููู")
    brand_name: Optional[str] = Field(None, description="ุงุณู ุงูุนูุงูุฉ ุงูุชุฌุงุฑูุฉ")
    business_type: BusinessType = Field(BusinessType.OTHER, description="ููุน ุงููุดุงุท")
    business_size: BusinessSize = Field(BusinessSize.SMALL, description="ุญุฌู ุงูุดุฑูุฉ")
    
    # ุชูุงุฑูุฎ ูููุฉ
    founded_date: Optional[date] = Field(None, description="ุชุงุฑูุฎ ุงูุชุฃุณูุณ")
    registration_date: Optional[date] = Field(None, description="ุชุงุฑูุฎ ุงูุชุณุฌูู")
    
    # ุฃุฑูุงู ุชุณุฌูู
    registration_number: Optional[str] = Field(None, description="ุฑูู ุงูุณุฌู ุงูุชุฌุงุฑู")
    tax_id: Optional[str] = Field(None, description="ุงูุฑูู ุงูุถุฑูุจู")
    vat_number: Optional[str] = Field(None, description="ุฑูู ุถุฑูุจุฉ ุงููููุฉ ุงููุถุงูุฉ")
    
    # ูุตู ุงูุดุฑูุฉ
    description: Optional[str] = Field(None, description="ูุตู ุงูุดุฑูุฉ")
    mission: Optional[str] = Field(None, description="ุฑุณุงูุฉ ุงูุดุฑูุฉ")
    vision: Optional[str] = Field(None, description="ุฑุคูุฉ ุงูุดุฑูุฉ")
    values: List[str] = Field(default_factory=list, description="ููู ุงูุดุฑูุฉ")
    
    # ูุนูููุงุช ุงูุตูุงุนุฉ
    industry: Optional[str] = Field(None, description="ุงูุตูุงุนุฉ")
    sub_industry: Optional[str] = Field(None, description="ุงูุตูุงุนุฉ ุงููุฑุนูุฉ")
    industry_codes: List[str] = Field(default_factory=list, description="ุฑููุฒ ุงูุตูุงุนุฉ")
    
    # ูุนูููุงุช ุงูููุธููู
    employee_count: Optional[int] = Field(None, description="ุนุฏุฏ ุงูููุธููู")
    employee_count_range: Optional[str] = Field(None, description="ูุทุงู ุนุฏุฏ ุงูููุธููู")
    
    # ูุนูููุงุช ูุงููุฉ
    annual_revenue: Optional[float] = Field(None, description="ุงูุฅูุฑุงุฏุงุช ุงูุณูููุฉ")
    revenue_currency: str = Field("SAR", description="ุนููุฉ ุงูุฅูุฑุงุฏุงุช")
    
    # ูุนูููุงุช ุงูุงุชุตุงู
    contact_info: ContactInfo = Field(default_factory=ContactInfo, description="ูุนูููุงุช ุงูุงุชุตุงู")
    
    # ูุนูููุงุช ุฅุถุงููุฉ
    languages: List[str] = Field(default_factory=list, description="ุงููุบุงุช ุงููุฏุนููุฉ")
    certifications: List[str] = Field(default_factory=list, description="ุงูุดูุงุฏุงุช ูุงูุงุนุชูุงุฏุงุช")
    awards: List[str] = Field(default_factory=list, description="ุงูุฌูุงุฆุฒ")
    
    # ุญุงูุฉ ุงููุดุงุท
    is_active: bool = Field(True, description="ูุดุท")
    status: str = Field("active", description="ุญุงูุฉ ุงูุดุฑูุฉ")
    
    if PYDANTIC_AVAILABLE:
        @validator('business_name')
        def validate_business_name(cls, v):
            if not v or len(v.strip()) < 2:
                raise ValueError('ุงุณู ุงูุดุฑูุฉ ูุฌุจ ุฃู ูููู ุนูู ุงูุฃูู ุญุฑููู')
            return v.strip()
        
        @validator('employee_count')
        def validate_employee_count(cls, v):
            if v is not None and v < 0:
                raise ValueError('ุนุฏุฏ ุงูููุธููู ูุง ูููู ุฃู ูููู ุณุงูุจุงู')
            return v

class BusinessMetrics(BaseModel):
    """
    ๐ ููุงููุณ ุงูุฃุฏุงุก ุงูุชุฌุงุฑู
    """
    # ููุงููุณ ูุงููุฉ
    revenue: Optional[float] = Field(None, description="ุงูุฅูุฑุงุฏุงุช")
    profit: Optional[float] = Field(None, description="ุงูุฑุจุญ")
    profit_margin: Optional[float] = Field(None, description="ูุงูุด ุงูุฑุจุญ")
    gross_margin: Optional[float] = Field(None, description="ุงููุงูุด ุงูุฅุฌูุงูู")
    
    # ููุงููุณ ุงูููู
    revenue_growth: Optional[float] = Field(None, description="ููู ุงูุฅูุฑุงุฏุงุช")
    customer_growth: Optional[float] = Field(None, description="ููู ุงูุนููุงุก")
    market_share: Optional[float] = Field(None, description="ุญุตุฉ ุงูุณูู")
    
    # ููุงููุณ ุงูุนููุงุก
    total_customers: Optional[int] = Field(None, description="ุฅุฌูุงูู ุงูุนููุงุก")
    active_customers: Optional[int] = Field(None, description="ุงูุนููุงุก ุงููุดุทูู")
    new_customers: Optional[int] = Field(None, description="ุงูุนููุงุก ุงูุฌุฏุฏ")
    customer_retention_rate: Optional[float] = Field(None, description="ูุนุฏู ุงูุงุญุชูุงุธ ุจุงูุนููุงุก")
    customer_lifetime_value: Optional[float] = Field(None, description="ุงููููุฉ ุงูุฏุงุฆูุฉ ููุนููู")
    customer_acquisition_cost: Optional[float] = Field(None, description="ุชูููุฉ ุงูุชุณุงุจ ุงูุนููู")
    
    # ููุงููุณ ุงูุชุดุบูู
    conversion_rate: Optional[float] = Field(None, description="ูุนุฏู ุงูุชุญููู")
    average_order_value: Optional[float] = Field(None, description="ูุชูุณุท ูููุฉ ุงูุทูุจ")
    order_frequency: Optional[float] = Field(None, description="ุชูุฑุงุฑ ุงูุทูุจุงุช")
    
    # ููุงููุณ ุงููููุน ุงูุฅููุชุฑููู
    website_traffic: Optional[int] = Field(None, description="ุฒูุงุฑ ุงููููุน")
    bounce_rate: Optional[float] = Field(None, description="ูุนุฏู ุงูุงุฑุชุฏุงุฏ")
    session_duration: Optional[float] = Field(None, description="ูุฏุฉ ุงูุฌูุณุฉ")
    page_views: Optional[int] = Field(None, description="ูุดุงูุฏุงุช ุงูุตูุญุฉ")
    
    # ููุงููุณ ูุณุงุฆู ุงูุชูุงุตู ุงูุงุฌุชูุงุนู
    social_followers: Optional[int] = Field(None, description="ูุชุงุจุนูู ูุณุงุฆู ุงูุชูุงุตู")
    social_engagement: Optional[float] = Field(None, description="ูุนุฏู ุงูุชูุงุนู")
    
    # ููุงููุณ ุงูููุธููู
    employee_satisfaction: Optional[float] = Field(None, description="ุฑุถุง ุงูููุธููู")
    employee_turnover: Optional[float] = Field(None, description="ูุนุฏู ุฏูุฑุงู ุงูููุธููู")
    
    # ูุชุฑุฉ ุงูููุงุณ
    measurement_period: Optional[str] = Field(None, description="ูุชุฑุฉ ุงูููุงุณ")
    measurement_date: Optional[datetime] = Field(None, description="ุชุงุฑูุฎ ุงูููุงุณ")
    
    if PYDANTIC_AVAILABLE:
        @validator('profit_margin', 'gross_margin', 'customer_retention_rate', 'conversion_rate', 'bounce_rate')
        def validate_percentage(cls, v):
            if v is not None and (v < 0 or v > 100):
                raise ValueError('ุงููุณุจุฉ ุงููุฆููุฉ ูุฌุจ ุฃู ุชููู ุจูู 0 ู 100')
            return v

class MarketAnalysis(BaseModel):
    """
    ๐ ุชุญููู ุงูุณูู
    """
    # ูุนูููุงุช ุงูุณูู ุงูุนุงูุฉ
    market_name: str = Field(..., description="ุงุณู ุงูุณูู")
    market_size: Optional[float] = Field(None, description="ุญุฌู ุงูุณูู")
    market_size_currency: str = Field("SAR", description="ุนููุฉ ุญุฌู ุงูุณูู")
    market_growth_rate: Optional[float] = Field(None, description="ูุนุฏู ููู ุงูุณูู")
    
    # ุชุญููู ุงูููุงูุณุฉ
    competition_level: str = Field("medium", description="ูุณุชูู ุงูููุงูุณุฉ")
    number_of_competitors: Optional[int] = Field(None, description="ุนุฏุฏ ุงูููุงูุณูู")
    market_concentration: Optional[str] = Field(None, description="ุชุฑูุฒ ุงูุณูู")
    
    # ุงุชุฌุงูุงุช ุงูุณูู
    market_trends: List[str] = Field(default_factory=list, description="ุงุชุฌุงูุงุช ุงูุณูู")
    growth_drivers: List[str] = Field(default_factory=list, description="ูุญุฑูุงุช ุงูููู")
    market_challenges: List[str] = Field(default_factory=list, description="ุชุญุฏูุงุช ุงูุณูู")
    
    # ุงููุฑุต ูุงูุชูุฏูุฏุงุช
    opportunities: List[str] = Field(default_factory=list, description="ุงููุฑุต")
    threats: List[str] = Field(default_factory=list, description="ุงูุชูุฏูุฏุงุช")
    
    # ุงูุนูุงูู ุงูุฎุงุฑุฌูุฉ
    economic_factors: List[str] = Field(default_factory=list, description="ุงูุนูุงูู ุงูุงูุชุตุงุฏูุฉ")
    regulatory_factors: List[str] = Field(default_factory=list, description="ุงูุนูุงูู ุงูุชูุธูููุฉ")
    technological_factors: List[str] = Field(default_factory=list, description="ุงูุนูุงูู ุงูุชูููููุฌูุฉ")
    
    # ุงูุฌูููุฑ ุงููุณุชูุฏู
    target_demographics: Dict[str, Any] = Field(default_factory=dict, description="ุงูุฏูููุบุฑุงููุง ุงููุณุชูุฏูุฉ")
    customer_segments: List[str] = Field(default_factory=list, description="ุดุฑุงุฆุญ ุงูุนููุงุก")
    
    # ุชุญููู ุงูุฃุณุนุงุฑ
    average_price_point: Optional[float] = Field(None, description="ูุชูุณุท ููุทุฉ ุงูุณุนุฑ")
    price_sensitivity: Optional[str] = Field(None, description="ุญุณุงุณูุฉ ุงูุณุนุฑ")
    pricing_strategies: List[str] = Field(default_factory=list, description="ุงุณุชุฑุงุชูุฌูุงุช ุงูุชุณุนูุฑ")
    
    # ูุนูููุงุช ุฅุถุงููุฉ
    analysis_date: Optional[datetime] = Field(None, description="ุชุงุฑูุฎ ุงูุชุญููู")
    data_sources: List[str] = Field(default_factory=list, description="ูุตุงุฏุฑ ุงูุจูุงูุงุช")
    confidence_level: Optional[float] = Field(None, description="ูุณุชูู ุงูุซูุฉ")

class CompetitorProfile(BaseModel):
    """
    ๐ ููู ุชุนุฑูู ุงูููุงูุณ
    """
    # ูุนูููุงุช ุฃุณุงุณูุฉ
    competitor_name: str = Field(..., description="ุงุณู ุงูููุงูุณ")
    website: Optional[str] = Field(None, description="ูููุน ุงูููุงูุณ")
    business_type: Optional[BusinessType] = Field(None, description="ููุน ุงููุดุงุท")
    business_size: Optional[BusinessSize] = Field(None, description="ุญุฌู ุงูุดุฑูุฉ")
    
    # ุงููุฑูุฒ ูู ุงูุณูู
    market_position: MarketPosition = Field(MarketPosition.FOLLOWER, description="ุงููุฑูุฒ ูู ุงูุณูู")
    market_share: Optional[float] = Field(None, description="ุญุตุฉ ุงูุณูู")
    
    # ูุนูููุงุช ูุงููุฉ
    estimated_revenue: Optional[float] = Field(None, description="ุงูุฅูุฑุงุฏุงุช ุงูููุฏุฑุฉ")
    funding_raised: Optional[float] = Field(None, description="ุงูุชูููู ุงููุญุตู ุนููู")
    valuation: Optional[float] = Field(None, description="ุงูุชูููู")
    
    # ุงูููุชุฌุงุช ูุงูุฎุฏูุงุช
    products_services: List[str] = Field(default_factory=list, description="ุงูููุชุฌุงุช ูุงูุฎุฏูุงุช")
    key_features: List[str] = Field(default_factory=list, description="ุงููููุฒุงุช ุงูุฑุฆูุณูุฉ")
    unique_selling_points: List[str] = Field(default_factory=list, description="ููุงุท ุงูุจูุน ุงููุฑูุฏุฉ")
    
    # ุงุณุชุฑุงุชูุฌูุฉ ุงูุชุณููู
    marketing_channels: List[str] = Field(default_factory=list, description="ูููุงุช ุงูุชุณููู")
    advertising_spend: Optional[float] = Field(None, description="ุฅููุงู ุงูุฅุนูุงู")
    brand_awareness: Optional[float] = Field(None, description="ุงููุนู ุจุงูุนูุงูุฉ ุงูุชุฌุงุฑูุฉ")
    
    # ููุงุท ุงูููุฉ ูุงูุถุนู
    strengths: List[str] = Field(default_factory=list, description="ููุงุท ุงูููุฉ")
    weaknesses: List[str] = Field(default_factory=list, description="ููุงุท ุงูุถุนู")
    
    # ุงูุฃุฏุงุก ุงูุฑููู
    website_traffic: Optional[int] = Field(None, description="ุฒูุงุฑ ุงููููุน")
    social_media_followers: Optional[int] = Field(None, description="ูุชุงุจุนูู ูุณุงุฆู ุงูุชูุงุตู")
    online_reviews_rating: Optional[float] = Field(None, description="ุชูููู ุงููุฑุงุฌุนุงุช")
    
    # ูุนูููุงุช ุฅุถุงููุฉ
    founded_year: Optional[int] = Field(None, description="ุณูุฉ ุงูุชุฃุณูุณ")
    headquarters: Optional[str] = Field(None, description="ุงูููุฑ ุงูุฑุฆูุณู")
    key_executives: List[str] = Field(default_factory=list, description="ุงููุฏูุฑูู ุงูุชูููุฐููู")
    
    # ุชุญููู ุงูุชูุงูุณ
    threat_level: str = Field("medium", description="ูุณุชูู ุงูุชูุฏูุฏ")
    competitive_advantage: List[str] = Field(default_factory=list, description="ุงูููุฒุฉ ุงูุชูุงูุณูุฉ")
    
    # ุชุงุฑูุฎ ุงูุชุญููู
    analysis_date: Optional[datetime] = Field(None, description="ุชุงุฑูุฎ ุงูุชุญููู")
    last_updated: Optional[datetime] = Field(None, description="ุขุฎุฑ ุชุญุฏูุซ")

class IndustryData(BaseModel):
    """
    ๐ญ ุจูุงูุงุช ุงูุตูุงุนุฉ
    """
    # ูุนูููุงุช ุงูุตูุงุนุฉ
    industry_name: str = Field(..., description="ุงุณู ุงูุตูุงุนุฉ")
    industry_code: Optional[str] = Field(None, description="ุฑูุฒ ุงูุตูุงุนุฉ")
    sub_industries: List[str] = Field(default_factory=list, description="ุงูุตูุงุนุงุช ุงููุฑุนูุฉ")
    
    # ุฅุญุตุงุฆูุงุช ุงูุตูุงุนุฉ
    total_market_size: Optional[float] = Field(None, description="ุญุฌู ุงูุณูู ุงูุฅุฌูุงูู")
    annual_growth_rate: Optional[float] = Field(None, description="ูุนุฏู ุงูููู ุงูุณููู")
    number_of_companies: Optional[int] = Field(None, description="ุนุฏุฏ ุงูุดุฑูุงุช")
    total_employment: Optional[int] = Field(None, description="ุฅุฌูุงูู ุงูุชูุธูู")
    
    # ุงูุดุฑูุงุช ุงูุฑุงุฆุฏุฉ
    market_leaders: List[str] = Field(default_factory=list, description="ุงูุดุฑูุงุช ุงูุฑุงุฆุฏุฉ")
    top_companies_market_share: Dict[str, float] = Field(default_factory=dict, description="ุญุตุฉ ุงูุดุฑูุงุช ุงููุจุฑู")
    
    # ุงุชุฌุงูุงุช ุงูุตูุงุนุฉ
    industry_trends: List[str] = Field(default_factory=list, description="ุงุชุฌุงูุงุช ุงูุตูุงุนุฉ")
    emerging_technologies: List[str] = Field(default_factory=list, description="ุงูุชูููุงุช ุงููุงุดุฆุฉ")
    disruption_factors: List[str] = Field(default_factory=list, description="ุนูุงูู ุงูุชุบููุฑ")
    
    # ุงูุชุญุฏูุงุช ูุงููุฑุต
    key_challenges: List[str] = Field(default_factory=list, description="ุงูุชุญุฏูุงุช ุงูุฑุฆูุณูุฉ")
    growth_opportunities: List[str] = Field(default_factory=list, description="ูุฑุต ุงูููู")
    
    # ุงูุนูุงูู ุงูุชูุธูููุฉ
    regulatory_environment: str = Field("moderate", description="ุงูุจูุฆุฉ ุงูุชูุธูููุฉ")
    key_regulations: List[str] = Field(default_factory=list, description="ุงูููุงุฆุญ ุงูุฑุฆูุณูุฉ")
    compliance_requirements: List[str] = Field(default_factory=list, description="ูุชุทูุจุงุช ุงูุงูุชุซุงู")
    
    # ููุงููุณ ุงูุฃุฏุงุก
    average_profit_margin: Optional[float] = Field(None, description="ูุชูุณุท ูุงูุด ุงูุฑุจุญ")
    average_revenue_per_employee: Optional[float] = Field(None, description="ูุชูุณุท ุงูุฅูุฑุงุฏุงุช ููู ููุธู")
    customer_acquisition_cost: Optional[float] = Field(None, description="ุชูููุฉ ุงูุชุณุงุจ ุงูุนููู")
    
    # ูุนูููุงุช ุฌุบุฑุงููุฉ
    geographic_concentration: List[str] = Field(default_factory=list, description="ุงูุชุฑูุฒ ุงูุฌุบุฑุงูู")
    international_presence: bool = Field(False, description="ูุฌูุฏ ุฏููู")
    
    # ุชุงุฑูุฎ ุงูุจูุงูุงุช
    data_year: Optional[int] = Field(None, description="ุณูุฉ ุงูุจูุงูุงุช")
    last_updated: Optional[datetime] = Field(None, description="ุขุฎุฑ ุชุญุฏูุซ")
    data_sources: List[str] = Field(default_factory=list, description="ูุตุงุฏุฑ ุงูุจูุงูุงุช")

class BusinessData(BaseModel):
    """
    ๐ข ุจูุงูุงุช ุงูุฃุนูุงู ุงูุดุงููุฉ
    
    ูููุฐุฌ ุดุงูู ูุฌูุน ุฌููุน ุจูุงูุงุช ุงูุฃุนูุงู ูู ููุงู ูุงุญุฏ
    """
    # ุงููุนุฑู ุงููุฑูุฏ
    business_id: str = Field(..., description="ูุนุฑู ุงูุดุฑูุฉ ุงููุฑูุฏ")
    
    # ุงูููู ุงูุชุนุฑููู
    profile: BusinessProfile = Field(..., description="ููู ุชุนุฑูู ุงูุดุฑูุฉ")
    
    # ููุงููุณ ุงูุฃุฏุงุก
    metrics: Optional[BusinessMetrics] = Field(None, description="ููุงููุณ ุงูุฃุฏุงุก")
    
    # ุชุญููู ุงูุณูู
    market_analysis: Optional[MarketAnalysis] = Field(None, description="ุชุญููู ุงูุณูู")
    
    # ุงูููุงูุณูู
    competitors: List[CompetitorProfile] = Field(default_factory=list, description="ุงูููุงูุณูู")
    
    # ุจูุงูุงุช ุงูุตูุงุนุฉ
    industry_data: Optional[IndustryData] = Field(None, description="ุจูุงูุงุช ุงูุตูุงุนุฉ")
    
    # ูุฑุญูุฉ ุงูููู
    growth_stage: GrowthStage = Field(GrowthStage.GROWTH, description="ูุฑุญูุฉ ุงูููู")
    
    # ุงูุฃูุฏุงู ุงูุชุฌุงุฑูุฉ
    business_goals: List[str] = Field(default_factory=list, description="ุงูุฃูุฏุงู ุงูุชุฌุงุฑูุฉ")
    target_markets: List[str] = Field(default_factory=list, description="ุงูุฃุณูุงู ุงููุณุชูุฏูุฉ")
    
    # ูุนูููุงุช ุฅุถุงููุฉ
    swot_analysis: Dict[str, List[str]] = Field(default_factory=dict, description="ุชุญููู SWOT")
    key_success_factors: List[str] = Field(default_factory=list, description="ุนูุงูู ุงููุฌุงุญ ุงูุฑุฆูุณูุฉ")
    
    # ุชูุงุฑูุฎ ูููุฉ
    created_at: datetime = Field(default_factory=datetime.now, description="ุชุงุฑูุฎ ุงูุฅูุดุงุก")
    updated_at: Optional[datetime] = Field(None, description="ุชุงุฑูุฎ ุขุฎุฑ ุชุญุฏูุซ")
    
    # ุญุงูุฉ ุงูุจูุงูุงุช
    data_completeness: Optional[float] = Field(None, description="ุงูุชูุงู ุงูุจูุงูุงุช")
    data_quality_score: Optional[float] = Field(None, description="ููุงุท ุฌูุฏุฉ ุงูุจูุงูุงุช")
    
    if PYDANTIC_AVAILABLE:
        @root_validator
        def validate_business_data(cls, values):
            # ุงูุชุญูู ูู ุงูุชูุงู ุงูุจูุงูุงุช ุงูุฃุณุงุณูุฉ
            profile = values.get('profile')
            if profile and not profile.business_name:
                raise ValueError('ุงุณู ุงูุดุฑูุฉ ูุทููุจ')
            
            # ุญุณุงุจ ุงูุชูุงู ุงูุจูุงูุงุช
            completeness_score = 0
            total_fields = 6
            
            if profile:
                completeness_score += 1
            if values.get('metrics'):
                completeness_score += 1
            if values.get('market_analysis'):
                completeness_score += 1
            if values.get('competitors'):
                completeness_score += 1
            if values.get('industry_data'):
                completeness_score += 1
            if values.get('business_goals'):
                completeness_score += 1
            
            values['data_completeness'] = (completeness_score / total_fields) * 100
            
            return values
    
    def get_summary(self) -> Dict[str, Any]:
        """ุงูุญุตูู ุนูู ููุฎุต ุจูุงูุงุช ุงูุดุฑูุฉ"""
        return {
            "business_id": self.business_id,
            "business_name": self.profile.business_name,
            "business_type": self.profile.business_type,
            "business_size": self.profile.business_size,
            "growth_stage": self.growth_stage,
            "industry": self.profile.industry,
            "employee_count": self.profile.employee_count,
            "annual_revenue": self.profile.annual_revenue,
            "competitors_count": len(self.competitors),
            "data_completeness": self.data_completeness,
            "last_updated": self.updated_at
        }
    
    def get_competitive_analysis(self) -> Dict[str, Any]:
        """ุงูุญุตูู ุนูู ุชุญููู ุชูุงูุณู"""
        if not self.competitors:
            return {"message": "ูุง ุชูุฌุฏ ุจูุงูุงุช ููุงูุณูู"}
        
        threat_levels = [comp.threat_level for comp in self.competitors]
        market_positions = [comp.market_position for comp in self.competitors]
        
        return {
            "total_competitors": len(self.competitors),
            "high_threat_competitors": threat_levels.count("high"),
            "market_leaders": market_positions.count(MarketPosition.LEADER),
            "main_competitors": [comp.competitor_name for comp in self.competitors[:5]],
            "competitive_advantages": self.key_success_factors
        }

# ุฏูุงู ูุณุงุนุฏุฉ
def create_business_profile(
    business_name: str,
    business_type: BusinessType,
    **kwargs
) -> BusinessProfile:
    """
    ุฅูุดุงุก ููู ุชุนุฑูู ุดุฑูุฉ ุฌุฏูุฏ
    
    Args:
        business_name: ุงุณู ุงูุดุฑูุฉ
        business_type: ููุน ุงููุดุงุท
        **kwargs: ูุนูููุงุช ุฅุถุงููุฉ
        
    Returns:
        BusinessProfile: ููู ุชุนุฑูู ุงูุดุฑูุฉ
    """
    return BusinessProfile(
        business_name=business_name,
        business_type=business_type,
        **kwargs
    )

def analyze_business_data(business_data: BusinessData) -> Dict[str, Any]:
    """
    ุชุญููู ุจูุงูุงุช ุงูุดุฑูุฉ ูุฅูุชุงุฌ ุชูุฑูุฑ ุดุงูู
    
    Args:
        business_data: ุจูุงูุงุช ุงูุดุฑูุฉ
        
    Returns:
        Dict[str, Any]: ุชูุฑูุฑ ุงูุชุญููู
    """
    analysis = {
        "business_overview": business_data.get_summary(),
        "competitive_analysis": business_data.get_competitive_analysis(),
        "recommendations": [],
        "insights": []
    }
    
    # ุฅุถุงูุฉ ุชูุตูุงุช ุจูุงุกู ุนูู ุงูุจูุงูุงุช
    if business_data.data_completeness and business_data.data_completeness < 70:
        analysis["recommendations"].append("ุชุญุณูู ุงูุชูุงู ุงูุจูุงูุงุช ูุชุญููู ุฃูุถู")
    
    if len(business_data.competitors) < 3:
        analysis["recommendations"].append("ุฅุถุงูุฉ ุงููุฒูุฏ ูู ุจูุงูุงุช ุงูููุงูุณูู")
    
    if business_data.profile.business_size == BusinessSize.STARTUP:
        analysis["insights"].append("ุงูุดุฑูุฉ ูู ูุฑุญูุฉ ุงูููู ุงููุจูุฑ")
    
    return analysis

# ุชุตุฏูุฑ ุงูููุงุฐุฌ
__all__ = [
    # Enums
    "BusinessType",
    "BusinessSize", 
    "MarketPosition",
    "GrowthStage",
    
    # Models
    "ContactInfo",
    "BusinessProfile",
    "BusinessMetrics",
    "MarketAnalysis",
    "CompetitorProfile",
    "IndustryData",
    "BusinessData",
    
    # Helper functions
    "create_business_profile",
    "analyze_business_data"
]

