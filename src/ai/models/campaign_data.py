#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
๐ฏ Campaign Data Models - ููุงุฐุฌ ุจูุงูุงุช ุงูุญููุงุช
===========================================

ููุงุฐุฌ ุดุงููุฉ ูุจูุงูุงุช ุงูุญููุงุช ุงูุฅุนูุงููุฉ:
- ุจูุงูุงุช ุงูุญููุงุช ูุงููุฌููุนุงุช ุงูุฅุนูุงููุฉ
- ุงูุฅุนูุงูุงุช ูุงููููุงุช ุงูููุชุงุญูุฉ
- ุฅุนุฏุงุฏุงุช ุงูุงุณุชูุฏุงู ูุงูููุฒุงููุฉ
- ููุงููุณ ุงูุฃุฏุงุก ูุงูุฅุญุตุงุฆูุงุช
- ุชุญุณูู ุงูุญููุงุช ูุงูุชูุตูุงุช

ุงููุทูุฑ: Google Ads AI Platform Team
ุงูุชุงุฑูุฎ: 2025-07-07
ุงูุฅุตุฏุงุฑ: 1.0.0
"""

import logging
from typing import Dict, Any, List, Optional, Union
from datetime import datetime, date
from enum import Enum
from dataclasses import dataclass, field
from decimal import Decimal

# ุงุณุชูุฑุงุฏ Pydantic ุฅุฐุง ูุงู ูุชุงุญุงู
try:
    from pydantic import BaseModel, Field, validator, root_validator
    PYDANTIC_AVAILABLE = True
except ImportError:
    from dataclasses import dataclass as BaseModel
    def Field(*args, **kwargs):
        return field()
    def validator(*args, **kwargs):
        def decorator(func):
            return func
        return decorator
    def root_validator(*args, **kwargs):
        def decorator(func):
            return func
        return decorator
    PYDANTIC_AVAILABLE = False

logger = logging.getLogger(__name__)

# ==================== Enums ====================

class CampaignType(str, Enum):
    """ุฃููุงุน ุงูุญููุงุช"""
    SEARCH = "search"                         # ุญููุฉ ุจุญุซ
    DISPLAY = "display"                       # ุญููุฉ ุนุฑุถ
    VIDEO = "video"                          # ุญููุฉ ููุฏูู
    SHOPPING = "shopping"                     # ุญููุฉ ุชุณูู
    APP = "app"                              # ุญููุฉ ุชุทุจูู
    SMART = "smart"                          # ุญููุฉ ุฐููุฉ
    PERFORMANCE_MAX = "performance_max"       # ุงูุฃุฏุงุก ุงูุฃูุตู
    LOCAL = "local"                          # ุญููุฉ ูุญููุฉ
    DISCOVERY = "discovery"                   # ุญููุฉ ุงูุชุดุงู

class CampaignStatus(str, Enum):
    """ุญุงูุฉ ุงูุญููุฉ"""
    ENABLED = "enabled"                       # ูููุนูุฉ
    PAUSED = "paused"                        # ูุชูููุฉ
    REMOVED = "removed"                      # ูุญุฐููุฉ
    DRAFT = "draft"                          # ูุณูุฏุฉ
    PENDING = "pending"                      # ูู ุงูุงูุชุธุงุฑ
    ENDED = "ended"                          # ููุชููุฉ

class CampaignObjective(str, Enum):
    """ุฃูุฏุงู ุงูุญููุฉ"""
    SALES = "sales"                          # ุงููุจูุนุงุช
    LEADS = "leads"                          # ุงูุนููุงุก ุงููุญุชูููู
    WEBSITE_TRAFFIC = "website_traffic"       # ุฒูุงุฑ ุงููููุน
    BRAND_AWARENESS = "brand_awareness"       # ุงููุนู ุจุงูุนูุงูุฉ ุงูุชุฌุงุฑูุฉ
    APP_PROMOTION = "app_promotion"          # ุชุฑููุฌ ุงูุชุทุจูู
    LOCAL_STORE_VISITS = "local_store_visits" # ุฒูุงุฑุงุช ุงููุชุฌุฑ ุงููุญูู

class BiddingStrategy(str, Enum):
    """ุงุณุชุฑุงุชูุฌูุงุช ุงููุฒุงูุฏุฉ"""
    MANUAL_CPC = "manual_cpc"                # ุชูููุฉ ุงูููุฑุฉ ุงููุฏููุฉ
    ENHANCED_CPC = "enhanced_cpc"            # ุชูููุฉ ุงูููุฑุฉ ุงููุญุณูุฉ
    TARGET_CPA = "target_cpa"                # ุชูููุฉ ุงูุฅุฌุฑุงุก ุงููุณุชูุฏูุฉ
    TARGET_ROAS = "target_roas"              # ุนุงุฆุฏ ุงูุฅููุงู ุงููุณุชูุฏู
    MAXIMIZE_CLICKS = "maximize_clicks"       # ุชุนุธูู ุงูููุฑุงุช
    MAXIMIZE_CONVERSIONS = "maximize_conversions"  # ุชุนุธูู ุงูุชุญูููุงุช
    MAXIMIZE_CONVERSION_VALUE = "maximize_conversion_value"  # ุชุนุธูู ูููุฉ ุงูุชุญููู

class AdGroupType(str, Enum):
    """ุฃููุงุน ุงููุฌููุนุงุช ุงูุฅุนูุงููุฉ"""
    SEARCH_STANDARD = "search_standard"       # ุจุญุซ ุนุงุฏู
    DISPLAY_STANDARD = "display_standard"     # ุนุฑุถ ุนุงุฏู
    SHOPPING_PRODUCT_ADS = "shopping_product_ads"  # ุฅุนูุงูุงุช ุงูููุชุฌุงุช
    VIDEO_BUMPER = "video_bumper"            # ููุฏูู ูุตูุฑ
    VIDEO_TRUE_VIEW = "video_true_view"      # ููุฏูู TrueView

class KeywordMatchType(str, Enum):
    """ุฃููุงุน ูุทุงุจูุฉ ุงููููุงุช ุงูููุชุงุญูุฉ"""
    EXACT = "exact"                          # ูุทุงุจูุฉ ุชุงูุฉ
    PHRASE = "phrase"                        # ูุทุงุจูุฉ ุนุจุงุฑุฉ
    BROAD = "broad"                          # ูุทุงุจูุฉ ูุงุณุนุฉ
    BROAD_MATCH_MODIFIER = "broad_match_modifier"  # ูุนุฏู ุงููุทุงุจูุฉ ุงููุงุณุนุฉ

class AdType(str, Enum):
    """ุฃููุงุน ุงูุฅุนูุงูุงุช"""
    TEXT_AD = "text_ad"                      # ุฅุนูุงู ูุตู
    EXPANDED_TEXT_AD = "expanded_text_ad"     # ุฅุนูุงู ูุตู ููุณุน
    RESPONSIVE_SEARCH_AD = "responsive_search_ad"  # ุฅุนูุงู ุจุญุซ ูุชุฌุงูุจ
    DISPLAY_AD = "display_ad"                # ุฅุนูุงู ุนุฑุถ
    VIDEO_AD = "video_ad"                    # ุฅุนูุงู ููุฏูู
    SHOPPING_AD = "shopping_ad"              # ุฅุนูุงู ุชุณูู
    APP_AD = "app_ad"                        # ุฅุนูุงู ุชุทุจูู

# ==================== ููุงุฐุฌ ุงูุฅุนุฏุงุฏุงุช ====================

class BudgetSettings(BaseModel):
    """
    ๐ฐ ุฅุนุฏุงุฏุงุช ุงูููุฒุงููุฉ
    """
    # ุงูููุฒุงููุฉ ุงูููููุฉ
    daily_budget: Decimal = Field(..., description="ุงูููุฒุงููุฉ ุงูููููุฉ")
    currency: str = Field("SAR", description="ุงูุนููุฉ")
    
    # ููุน ุงูููุฒุงููุฉ
    budget_type: str = Field("daily", description="ููุน ุงูููุฒุงููุฉ")
    delivery_method: str = Field("standard", description="ุทุฑููุฉ ุงูุชุณููู")
    
    # ุญุฏูุฏ ุงูุฅููุงู
    total_budget: Optional[Decimal] = Field(None, description="ุงูููุฒุงููุฉ ุงูุฅุฌูุงููุฉ")
    budget_period: Optional[str] = Field(None, description="ูุชุฑุฉ ุงูููุฒุงููุฉ")
    
    # ุฅุนุฏุงุฏุงุช ูุชูุฏูุฉ
    shared_budget_id: Optional[str] = Field(None, description="ูุนุฑู ุงูููุฒุงููุฉ ุงููุดุชุฑูุฉ")
    budget_optimization: bool = Field(True, description="ุชุญุณูู ุงูููุฒุงููุฉ")
    
    # ุชุชุจุน ุงูุฅููุงู
    amount_spent: Decimal = Field(Decimal('0'), description="ุงููุจูุบ ุงูููููู")
    remaining_budget: Optional[Decimal] = Field(None, description="ุงูููุฒุงููุฉ ุงููุชุจููุฉ")
    
    if PYDANTIC_AVAILABLE:
        @validator('daily_budget', 'total_budget')
        def validate_budget_amounts(cls, v):
            if v is not None and v <= 0:
                raise ValueError('ุงูููุฒุงููุฉ ูุฌุจ ุฃู ุชููู ุฃูุจุฑ ูู ุตูุฑ')
            return v
        
        @root_validator
        def calculate_remaining_budget(cls, values):
            total = values.get('total_budget')
            spent = values.get('amount_spent', Decimal('0'))
            
            if total:
                values['remaining_budget'] = total - spent
            
            return values

class TargetingSettings(BaseModel):
    """
    ๐ฏ ุฅุนุฏุงุฏุงุช ุงูุงุณุชูุฏุงู
    """
    # ุงูุงุณุชูุฏุงู ุงูุฌุบุฑุงูู
    locations: List[str] = Field(default_factory=list, description="ุงูููุงูุน ุงููุณุชูุฏูุฉ")
    excluded_locations: List[str] = Field(default_factory=list, description="ุงูููุงูุน ุงููุณุชุจุนุฏุฉ")
    location_radius: Optional[int] = Field(None, description="ูุทุงู ุงููููุน (ูู)")
    
    # ุงูุงุณุชูุฏุงู ุงูุฏูููุบุฑุงูู
    age_ranges: List[str] = Field(default_factory=list, description="ุงููุฆุงุช ุงูุนูุฑูุฉ")
    genders: List[str] = Field(default_factory=list, description="ุงูุฌูุณ")
    parental_status: List[str] = Field(default_factory=list, description="ุญุงูุฉ ุงููุงูุฏูุฉ")
    household_income: List[str] = Field(default_factory=list, description="ุฏุฎู ุงูุฃุณุฑุฉ")
    
    # ุงูุงุณุชูุฏุงู ุงูุณูููู
    interests: List[str] = Field(default_factory=list, description="ุงูุงูุชูุงูุงุช")
    behaviors: List[str] = Field(default_factory=list, description="ุงูุณููููุงุช")
    life_events: List[str] = Field(default_factory=list, description="ุฃุญุฏุงุซ ุงูุญูุงุฉ")
    
    # ุงูุงุณุชูุฏุงู ุงูุชููู
    devices: List[str] = Field(default_factory=list, description="ุงูุฃุฌูุฒุฉ")
    operating_systems: List[str] = Field(default_factory=list, description="ุฃูุธูุฉ ุงูุชุดุบูู")
    browsers: List[str] = Field(default_factory=list, description="ุงููุชุตูุญุงุช")
    
    # ุงูุงุณุชูุฏุงู ุงูุฒููู
    ad_schedule: Dict[str, List[str]] = Field(default_factory=dict, description="ุฌุฏููุฉ ุงูุฅุนูุงูุงุช")
    time_zones: List[str] = Field(default_factory=list, description="ุงูููุงุทู ุงูุฒูููุฉ")
    
    # ุงูุงุณุชูุฏุงู ุงููุชูุฏู
    custom_audiences: List[str] = Field(default_factory=list, description="ุงูุฌูุงููุฑ ุงููุฎุตุตุฉ")
    lookalike_audiences: List[str] = Field(default_factory=list, description="ุงูุฌูุงููุฑ ุงููุดุงุจูุฉ")
    remarketing_lists: List[str] = Field(default_factory=list, description="ููุงุฆู ุฅุนุงุฏุฉ ุงูุชุณููู")
    
    # ุฅุนุฏุงุฏุงุช ุงูุงุณุชุจุนุงุฏ
    negative_keywords: List[str] = Field(default_factory=list, description="ุงููููุงุช ุงูุณูุจูุฉ")
    excluded_placements: List[str] = Field(default_factory=list, description="ุงูููุงุถุน ุงููุณุชุจุนุฏุฉ")
    
    def get_targeting_summary(self) -> Dict[str, int]:
        """ุงูุญุตูู ุนูู ููุฎุต ุงูุงุณุชูุฏุงู"""
        return {
            "locations": len(self.locations),
            "demographics": len(self.age_ranges) + len(self.genders),
            "interests": len(self.interests),
            "devices": len(self.devices),
            "custom_audiences": len(self.custom_audiences),
            "exclusions": len(self.negative_keywords) + len(self.excluded_locations)
        }

class CampaignSettings(BaseModel):
    """
    โ๏ธ ุฅุนุฏุงุฏุงุช ุงูุญููุฉ
    """
    # ุฅุนุฏุงุฏุงุช ุฃุณุงุณูุฉ
    campaign_type: CampaignType = Field(..., description="ููุน ุงูุญููุฉ")
    objective: CampaignObjective = Field(..., description="ูุฏู ุงูุญููุฉ")
    bidding_strategy: BiddingStrategy = Field(..., description="ุงุณุชุฑุงุชูุฌูุฉ ุงููุฒุงูุฏุฉ")
    
    # ุฅุนุฏุงุฏุงุช ุงููุฒุงูุฏุฉ
    target_cpa: Optional[Decimal] = Field(None, description="ุชูููุฉ ุงูุฅุฌุฑุงุก ุงููุณุชูุฏูุฉ")
    target_roas: Optional[Decimal] = Field(None, description="ุนุงุฆุฏ ุงูุฅููุงู ุงููุณุชูุฏู")
    max_cpc: Optional[Decimal] = Field(None, description="ุฃูุตู ุชูููุฉ ููุฑุฉ")
    
    # ุฅุนุฏุงุฏุงุช ุงูุดุจูุฉ
    search_network: bool = Field(True, description="ุดุจูุฉ ุงูุจุญุซ")
    display_network: bool = Field(False, description="ุดุจูุฉ ุงูุนุฑุถ")
    search_partners: bool = Field(False, description="ุดุฑูุงุก ุงูุจุญุซ")
    
    # ุฅุนุฏุงุฏุงุช ูุชูุฏูุฉ
    ad_rotation: str = Field("optimize", description="ุชุฏููุฑ ุงูุฅุนูุงูุงุช")
    frequency_cap: Optional[int] = Field(None, description="ุญุฏ ุงูุชูุฑุงุฑ")
    conversion_tracking: bool = Field(True, description="ุชุชุจุน ุงูุชุญูููุงุช")
    
    # ุฅุนุฏุงุฏุงุช ุงูุชุญุณูู
    auto_optimization: bool = Field(True, description="ุงูุชุญุณูู ุงูุชููุงุฆู")
    smart_bidding: bool = Field(False, description="ุงููุฒุงูุฏุฉ ุงูุฐููุฉ")
    dynamic_search_ads: bool = Field(False, description="ุฅุนูุงูุงุช ุงูุจุญุซ ุงูุฏููุงููููุฉ")
    
    # ุฅุนุฏุงุฏุงุช ุงูุชุฌุฑูุจ
    experiment_enabled: bool = Field(False, description="ุงูุชุฌุฑูุจ ูููุนู")
    split_test_percentage: Optional[int] = Field(None, description="ูุณุจุฉ ุงุฎุชุจุงุฑ ุงูุชูุณูู")

# ==================== ููุงุฐุฌ ุงูุจูุงูุงุช ุงูุฃุณุงุณูุฉ ====================

class Keyword(BaseModel):
    """
    ๐ ุงููููุฉ ุงูููุชุงุญูุฉ
    """
    # ูุนูููุงุช ุฃุณุงุณูุฉ
    keyword_id: Optional[str] = Field(None, description="ูุนุฑู ุงููููุฉ ุงูููุชุงุญูุฉ")
    text: str = Field(..., description="ูุต ุงููููุฉ ุงูููุชุงุญูุฉ")
    match_type: KeywordMatchType = Field(..., description="ููุน ุงููุทุงุจูุฉ")
    
    # ุฅุนุฏุงุฏุงุช ุงููุฒุงูุฏุฉ
    max_cpc: Optional[Decimal] = Field(None, description="ุฃูุตู ุชูููุฉ ููุฑุฉ")
    quality_score: Optional[int] = Field(None, description="ููุงุท ุงูุฌูุฏุฉ")
    
    # ุญุงูุฉ ุงููููุฉ ุงูููุชุงุญูุฉ
    status: str = Field("enabled", description="ุญุงูุฉ ุงููููุฉ ุงูููุชุงุญูุฉ")
    approval_status: Optional[str] = Field(None, description="ุญุงูุฉ ุงูููุงููุฉ")
    
    # ุฅุญุตุงุฆูุงุช ุงูุฃุฏุงุก
    impressions: int = Field(0, description="ูุฑุงุช ุงูุธููุฑ")
    clicks: int = Field(0, description="ุงูููุฑุงุช")
    conversions: int = Field(0, description="ุงูุชุญูููุงุช")
    cost: Decimal = Field(Decimal('0'), description="ุงูุชูููุฉ")
    
    # ููุงููุณ ูุญุณูุจุฉ
    ctr: Optional[float] = Field(None, description="ูุนุฏู ุงูููุฑ")
    cpc: Optional[Decimal] = Field(None, description="ุชูููุฉ ุงูููุฑุฉ")
    conversion_rate: Optional[float] = Field(None, description="ูุนุฏู ุงูุชุญููู")
    
    # ูุนูููุงุช ุฅุถุงููุฉ
    search_volume: Optional[int] = Field(None, description="ุญุฌู ุงูุจุญุซ")
    competition: Optional[str] = Field(None, description="ูุณุชูู ุงูููุงูุณุฉ")
    suggested_bid: Optional[Decimal] = Field(None, description="ุงููุฒุงูุฏุฉ ุงูููุชุฑุญุฉ")
    
    # ุชูุงุฑูุฎ
    created_at: datetime = Field(default_factory=datetime.now, description="ุชุงุฑูุฎ ุงูุฅูุดุงุก")
    last_updated: Optional[datetime] = Field(None, description="ุขุฎุฑ ุชุญุฏูุซ")
    
    if PYDANTIC_AVAILABLE:
        @root_validator
        def calculate_metrics(cls, values):
            impressions = values.get('impressions', 0)
            clicks = values.get('clicks', 0)
            conversions = values.get('conversions', 0)
            cost = values.get('cost', Decimal('0'))
            
            # ุญุณุงุจ ูุนุฏู ุงูููุฑ
            if impressions > 0:
                values['ctr'] = (clicks / impressions) * 100
            
            # ุญุณุงุจ ุชูููุฉ ุงูููุฑุฉ
            if clicks > 0:
                values['cpc'] = cost / clicks
            
            # ุญุณุงุจ ูุนุฏู ุงูุชุญููู
            if clicks > 0:
                values['conversion_rate'] = (conversions / clicks) * 100
            
            return values

class Advertisement(BaseModel):
    """
    ๐ข ุงูุฅุนูุงู
    """
    # ูุนูููุงุช ุฃุณุงุณูุฉ
    ad_id: Optional[str] = Field(None, description="ูุนุฑู ุงูุฅุนูุงู")
    ad_type: AdType = Field(..., description="ููุน ุงูุฅุนูุงู")
    status: str = Field("enabled", description="ุญุงูุฉ ุงูุฅุนูุงู")
    
    # ูุญุชูู ุงูุฅุนูุงู
    headlines: List[str] = Field(default_factory=list, description="ุงูุนูุงููู")
    descriptions: List[str] = Field(default_factory=list, description="ุงูุฃูุตุงู")
    display_url: Optional[str] = Field(None, description="ุฑุงุจุท ุงูุนุฑุถ")
    final_url: str = Field(..., description="ุงูุฑุงุจุท ุงูููุงุฆู")
    
    # ุงูุฃุตูู ุงููุฑุฆูุฉ
    images: List[str] = Field(default_factory=list, description="ุงูุตูุฑ")
    videos: List[str] = Field(default_factory=list, description="ุงูููุฏูููุงุช")
    logos: List[str] = Field(default_factory=list, description="ุงูุดุนุงุฑุงุช")
    
    # ุฅุนุฏุงุฏุงุช ุงูุฅุนูุงู
    call_to_action: Optional[str] = Field(None, description="ุฏุนูุฉ ุงูุนูู")
    business_name: Optional[str] = Field(None, description="ุงุณู ุงููุดุงุท")
    
    # ุฅุญุตุงุฆูุงุช ุงูุฃุฏุงุก
    impressions: int = Field(0, description="ูุฑุงุช ุงูุธููุฑ")
    clicks: int = Field(0, description="ุงูููุฑุงุช")
    conversions: int = Field(0, description="ุงูุชุญูููุงุช")
    cost: Decimal = Field(Decimal('0'), description="ุงูุชูููุฉ")
    
    # ููุงููุณ ูุญุณูุจุฉ
    ctr: Optional[float] = Field(None, description="ูุนุฏู ุงูููุฑ")
    cpc: Optional[Decimal] = Field(None, description="ุชูููุฉ ุงูููุฑุฉ")
    conversion_rate: Optional[float] = Field(None, description="ูุนุฏู ุงูุชุญููู")
    
    # ูุนูููุงุช ุงูููุงููุฉ
    approval_status: Optional[str] = Field(None, description="ุญุงูุฉ ุงูููุงููุฉ")
    policy_summary: Optional[str] = Field(None, description="ููุฎุต ุงูุณูุงุณุฉ")
    
    # ุชูุงุฑูุฎ
    created_at: datetime = Field(default_factory=datetime.now, description="ุชุงุฑูุฎ ุงูุฅูุดุงุก")
    last_updated: Optional[datetime] = Field(None, description="ุขุฎุฑ ุชุญุฏูุซ")
    
    if PYDANTIC_AVAILABLE:
        @validator('final_url')
        def validate_final_url(cls, v):
            if not v.startswith(('http://', 'https://')):
                raise ValueError('ุงูุฑุงุจุท ุงูููุงุฆู ูุฌุจ ุฃู ูุจุฏุฃ ุจู http:// ุฃู https://')
            return v
        
        @root_validator
        def calculate_ad_metrics(cls, values):
            impressions = values.get('impressions', 0)
            clicks = values.get('clicks', 0)
            conversions = values.get('conversions', 0)
            cost = values.get('cost', Decimal('0'))
            
            # ุญุณุงุจ ูุนุฏู ุงูููุฑ
            if impressions > 0:
                values['ctr'] = (clicks / impressions) * 100
            
            # ุญุณุงุจ ุชูููุฉ ุงูููุฑุฉ
            if clicks > 0:
                values['cpc'] = cost / clicks
            
            # ุญุณุงุจ ูุนุฏู ุงูุชุญููู
            if clicks > 0:
                values['conversion_rate'] = (conversions / clicks) * 100
            
            return values

class AdGroup(BaseModel):
    """
    ๐ ุงููุฌููุนุฉ ุงูุฅุนูุงููุฉ
    """
    # ูุนูููุงุช ุฃุณุงุณูุฉ
    ad_group_id: Optional[str] = Field(None, description="ูุนุฑู ุงููุฌููุนุฉ ุงูุฅุนูุงููุฉ")
    name: str = Field(..., description="ุงุณู ุงููุฌููุนุฉ ุงูุฅุนูุงููุฉ")
    ad_group_type: AdGroupType = Field(..., description="ููุน ุงููุฌููุนุฉ ุงูุฅุนูุงููุฉ")
    status: CampaignStatus = Field(CampaignStatus.ENABLED, description="ุญุงูุฉ ุงููุฌููุนุฉ")
    
    # ุฅุนุฏุงุฏุงุช ุงููุฒุงูุฏุฉ
    default_max_cpc: Optional[Decimal] = Field(None, description="ุฃูุตู ุชูููุฉ ููุฑุฉ ุงูุชุฑุงุถูุฉ")
    target_cpa: Optional[Decimal] = Field(None, description="ุชูููุฉ ุงูุฅุฌุฑุงุก ุงููุณุชูุฏูุฉ")
    
    # ุงููุญุชูู
    keywords: List[Keyword] = Field(default_factory=list, description="ุงููููุงุช ุงูููุชุงุญูุฉ")
    ads: List[Advertisement] = Field(default_factory=list, description="ุงูุฅุนูุงูุงุช")
    
    # ุงูุงุณุชูุฏุงู
    targeting_settings: Optional[TargetingSettings] = Field(None, description="ุฅุนุฏุงุฏุงุช ุงูุงุณุชูุฏุงู")
    
    # ุฅุญุตุงุฆูุงุช ุงูุฃุฏุงุก
    impressions: int = Field(0, description="ูุฑุงุช ุงูุธููุฑ")
    clicks: int = Field(0, description="ุงูููุฑุงุช")
    conversions: int = Field(0, description="ุงูุชุญูููุงุช")
    cost: Decimal = Field(Decimal('0'), description="ุงูุชูููุฉ")
    
    # ููุงููุณ ูุญุณูุจุฉ
    ctr: Optional[float] = Field(None, description="ูุนุฏู ุงูููุฑ")
    cpc: Optional[Decimal] = Field(None, description="ุชูููุฉ ุงูููุฑุฉ")
    conversion_rate: Optional[float] = Field(None, description="ูุนุฏู ุงูุชุญููู")
    quality_score: Optional[float] = Field(None, description="ููุงุท ุงูุฌูุฏุฉ")
    
    # ุชูุงุฑูุฎ
    created_at: datetime = Field(default_factory=datetime.now, description="ุชุงุฑูุฎ ุงูุฅูุดุงุก")
    last_updated: Optional[datetime] = Field(None, description="ุขุฎุฑ ุชุญุฏูุซ")
    
    def get_active_keywords_count(self) -> int:
        """ุนุฏุฏ ุงููููุงุช ุงูููุชุงุญูุฉ ุงููุดุทุฉ"""
        return len([k for k in self.keywords if k.status == "enabled"])
    
    def get_active_ads_count(self) -> int:
        """ุนุฏุฏ ุงูุฅุนูุงูุงุช ุงููุดุทุฉ"""
        return len([a for a in self.ads if a.status == "enabled"])
    
    def get_top_performing_keywords(self, limit: int = 5) -> List[Keyword]:
        """ุฃูุถู ุงููููุงุช ุงูููุชุงุญูุฉ ุฃุฏุงุกู"""
        return sorted(
            self.keywords,
            key=lambda k: k.conversions,
            reverse=True
        )[:limit]

class CampaignPerformance(BaseModel):
    """
    ๐ ุฃุฏุงุก ุงูุญููุฉ
    """
    # ูุชุฑุฉ ุงูุชูุฑูุฑ
    date_range: Dict[str, date] = Field(..., description="ูุทุงู ุงูุชุงุฑูุฎ")
    
    # ููุงููุณ ุงูุฃุฏุงุก ุงูุฃุณุงุณูุฉ
    impressions: int = Field(0, description="ูุฑุงุช ุงูุธููุฑ")
    clicks: int = Field(0, description="ุงูููุฑุงุช")
    conversions: int = Field(0, description="ุงูุชุญูููุงุช")
    conversion_value: Decimal = Field(Decimal('0'), description="ูููุฉ ุงูุชุญูููุงุช")
    cost: Decimal = Field(Decimal('0'), description="ุงูุชูููุฉ")
    
    # ููุงููุณ ูุญุณูุจุฉ
    ctr: Optional[float] = Field(None, description="ูุนุฏู ุงูููุฑ")
    cpc: Optional[Decimal] = Field(None, description="ุชูููุฉ ุงูููุฑุฉ")
    cpa: Optional[Decimal] = Field(None, description="ุชูููุฉ ุงูุฅุฌุฑุงุก")
    roas: Optional[float] = Field(None, description="ุนุงุฆุฏ ุงูุฅููุงู ุงูุฅุนูุงูู")
    conversion_rate: Optional[float] = Field(None, description="ูุนุฏู ุงูุชุญููู")
    
    # ููุงููุณ ุงูุฌูุฏุฉ
    quality_score: Optional[float] = Field(None, description="ููุงุท ุงูุฌูุฏุฉ")
    search_impression_share: Optional[float] = Field(None, description="ุญุตุฉ ุธููุฑ ุงูุจุญุซ")
    
    # ููุงููุณ ูุชูุฏูุฉ
    view_through_conversions: int = Field(0, description="ุชุญูููุงุช ุงููุดุงูุฏุฉ")
    cross_device_conversions: int = Field(0, description="ุชุญูููุงุช ูุชุนุฏุฏุฉ ุงูุฃุฌูุฒุฉ")
    
    # ุชุญููู ุงูุงุชุฌุงูุงุช
    trend_data: Dict[str, List[float]] = Field(default_factory=dict, description="ุจูุงูุงุช ุงูุงุชุฌุงูุงุช")
    
    # ููุงุฑูุงุช
    previous_period_comparison: Dict[str, float] = Field(default_factory=dict, description="ููุงุฑูุฉ ุงููุชุฑุฉ ุงูุณุงุจูุฉ")
    benchmark_comparison: Dict[str, float] = Field(default_factory=dict, description="ููุงุฑูุฉ ุงููุนุงููุฑ")
    
    if PYDANTIC_AVAILABLE:
        @root_validator
        def calculate_performance_metrics(cls, values):
            impressions = values.get('impressions', 0)
            clicks = values.get('clicks', 0)
            conversions = values.get('conversions', 0)
            conversion_value = values.get('conversion_value', Decimal('0'))
            cost = values.get('cost', Decimal('0'))
            
            # ุญุณุงุจ ูุนุฏู ุงูููุฑ
            if impressions > 0:
                values['ctr'] = (clicks / impressions) * 100
            
            # ุญุณุงุจ ุชูููุฉ ุงูููุฑุฉ
            if clicks > 0:
                values['cpc'] = cost / clicks
            
            # ุญุณุงุจ ุชูููุฉ ุงูุฅุฌุฑุงุก
            if conversions > 0:
                values['cpa'] = cost / conversions
            
            # ุญุณุงุจ ุนุงุฆุฏ ุงูุฅููุงู ุงูุฅุนูุงูู
            if cost > 0:
                values['roas'] = float(conversion_value / cost)
            
            # ุญุณุงุจ ูุนุฏู ุงูุชุญููู
            if clicks > 0:
                values['conversion_rate'] = (conversions / clicks) * 100
            
            return values

class CampaignData(BaseModel):
    """
    ๐ฏ ุจูุงูุงุช ุงูุญููุฉ ุงูุดุงููุฉ
    
    ูููุฐุฌ ุดุงูู ูุฌูุน ุฌููุน ุจูุงูุงุช ุงูุญููุฉ ุงูุฅุนูุงููุฉ
    """
    # ูุนูููุงุช ุฃุณุงุณูุฉ
    campaign_id: Optional[str] = Field(None, description="ูุนุฑู ุงูุญููุฉ")
    name: str = Field(..., description="ุงุณู ุงูุญููุฉ")
    status: CampaignStatus = Field(CampaignStatus.ENABLED, description="ุญุงูุฉ ุงูุญููุฉ")
    
    # ุฅุนุฏุงุฏุงุช ุงูุญููุฉ
    settings: CampaignSettings = Field(..., description="ุฅุนุฏุงุฏุงุช ุงูุญููุฉ")
    budget_settings: BudgetSettings = Field(..., description="ุฅุนุฏุงุฏุงุช ุงูููุฒุงููุฉ")
    targeting_settings: TargetingSettings = Field(default_factory=TargetingSettings, description="ุฅุนุฏุงุฏุงุช ุงูุงุณุชูุฏุงู")
    
    # ุงููุฌููุนุงุช ุงูุฅุนูุงููุฉ
    ad_groups: List[AdGroup] = Field(default_factory=list, description="ุงููุฌููุนุงุช ุงูุฅุนูุงููุฉ")
    
    # ุฃุฏุงุก ุงูุญููุฉ
    performance: Optional[CampaignPerformance] = Field(None, description="ุฃุฏุงุก ุงูุญููุฉ")
    
    # ุชูุงุฑูุฎ ูููุฉ
    start_date: Optional[date] = Field(None, description="ุชุงุฑูุฎ ุงูุจุฏุงูุฉ")
    end_date: Optional[date] = Field(None, description="ุชุงุฑูุฎ ุงูููุงูุฉ")
    created_at: datetime = Field(default_factory=datetime.now, description="ุชุงุฑูุฎ ุงูุฅูุดุงุก")
    last_updated: Optional[datetime] = Field(None, description="ุขุฎุฑ ุชุญุฏูุซ")
    
    # ูุนูููุงุช ุฅุถุงููุฉ
    labels: List[str] = Field(default_factory=list, description="ุงูุชุตูููุงุช")
    notes: Optional[str] = Field(None, description="ููุงุญุธุงุช")
    
    # ูุนูููุงุช ุงูุญุณุงุจ
    customer_id: Optional[str] = Field(None, description="ูุนุฑู ุงูุนููู")
    account_name: Optional[str] = Field(None, description="ุงุณู ุงูุญุณุงุจ")
    
    if PYDANTIC_AVAILABLE:
        @validator('name')
        def validate_campaign_name(cls, v):
            if len(v.strip()) < 3:
                raise ValueError('ุงุณู ุงูุญููุฉ ูุฌุจ ุฃู ูููู ุนูู ุงูุฃูู 3 ุฃุญุฑู')
            return v.strip()
        
        @root_validator
        def validate_campaign_dates(cls, values):
            start_date = values.get('start_date')
            end_date = values.get('end_date')
            
            if start_date and end_date and start_date > end_date:
                raise ValueError('ุชุงุฑูุฎ ุงูุจุฏุงูุฉ ูุฌุจ ุฃู ูููู ูุจู ุชุงุฑูุฎ ุงูููุงูุฉ')
            
            return values
    
    def get_campaign_summary(self) -> Dict[str, Any]:
        """ุงูุญุตูู ุนูู ููุฎุต ุงูุญููุฉ"""
        total_ad_groups = len(self.ad_groups)
        total_keywords = sum(len(ag.keywords) for ag in self.ad_groups)
        total_ads = sum(len(ag.ads) for ag in self.ad_groups)
        
        return {
            "campaign_id": self.campaign_id,
            "name": self.name,
            "status": self.status,
            "type": self.settings.campaign_type,
            "objective": self.settings.objective,
            "daily_budget": self.budget_settings.daily_budget,
            "total_ad_groups": total_ad_groups,
            "total_keywords": total_keywords,
            "total_ads": total_ads,
            "created_at": self.created_at,
            "last_updated": self.last_updated
        }
    
    def get_performance_summary(self) -> Dict[str, Any]:
        """ุงูุญุตูู ุนูู ููุฎุต ุงูุฃุฏุงุก"""
        if not self.performance:
            return {"message": "ูุง ุชูุฌุฏ ุจูุงูุงุช ุฃุฏุงุก"}
        
        return {
            "impressions": self.performance.impressions,
            "clicks": self.performance.clicks,
            "conversions": self.performance.conversions,
            "cost": float(self.performance.cost),
            "ctr": self.performance.ctr,
            "cpc": float(self.performance.cpc) if self.performance.cpc else None,
            "conversion_rate": self.performance.conversion_rate,
            "roas": self.performance.roas
        }
    
    def get_top_performing_ad_groups(self, limit: int = 5) -> List[AdGroup]:
        """ุฃูุถู ุงููุฌููุนุงุช ุงูุฅุนูุงููุฉ ุฃุฏุงุกู"""
        return sorted(
            self.ad_groups,
            key=lambda ag: ag.conversions,
            reverse=True
        )[:limit]
    
    def calculate_total_budget_utilization(self) -> float:
        """ุญุณุงุจ ูุนุฏู ุงุณุชุฎุฏุงู ุงูููุฒุงููุฉ"""
        if self.budget_settings.total_budget:
            return float(
                (self.budget_settings.amount_spent / self.budget_settings.total_budget) * 100
            )
        return 0.0

# ุฏูุงู ูุณุงุนุฏุฉ
def create_campaign(
    name: str,
    campaign_type: CampaignType,
    objective: CampaignObjective,
    daily_budget: Decimal,
    **kwargs
) -> CampaignData:
    """ุฅูุดุงุก ุญููุฉ ุฌุฏูุฏุฉ"""
    settings = CampaignSettings(
        campaign_type=campaign_type,
        objective=objective,
        bidding_strategy=kwargs.get('bidding_strategy', BiddingStrategy.MANUAL_CPC)
    )
    
    budget_settings = BudgetSettings(
        daily_budget=daily_budget,
        currency=kwargs.get('currency', 'SAR')
    )
    
    return CampaignData(
        name=name,
        settings=settings,
        budget_settings=budget_settings,
        **kwargs
    )

def create_ad_group(
    name: str,
    ad_group_type: AdGroupType,
    **kwargs
) -> AdGroup:
    """ุฅูุดุงุก ูุฌููุนุฉ ุฅุนูุงููุฉ ุฌุฏูุฏุฉ"""
    return AdGroup(
        name=name,
        ad_group_type=ad_group_type,
        **kwargs
    )

def create_keyword(
    text: str,
    match_type: KeywordMatchType,
    **kwargs
) -> Keyword:
    """ุฅูุดุงุก ูููุฉ ููุชุงุญูุฉ ุฌุฏูุฏุฉ"""
    return Keyword(
        text=text,
        match_type=match_type,
        **kwargs
    )

def create_advertisement(
    ad_type: AdType,
    final_url: str,
    headlines: List[str],
    descriptions: List[str],
    **kwargs
) -> Advertisement:
    """ุฅูุดุงุก ุฅุนูุงู ุฌุฏูุฏ"""
    return Advertisement(
        ad_type=ad_type,
        final_url=final_url,
        headlines=headlines,
        descriptions=descriptions,
        **kwargs
    )

# ุชุตุฏูุฑ ุงูููุงุฐุฌ
__all__ = [
    # Enums
    "CampaignType",
    "CampaignStatus",
    "CampaignObjective",
    "BiddingStrategy",
    "AdGroupType",
    "KeywordMatchType",
    "AdType",
    
    # Settings Models
    "BudgetSettings",
    "TargetingSettings",
    "CampaignSettings",
    
    # Data Models
    "Keyword",
    "Advertisement",
    "AdGroup",
    "CampaignPerformance",
    "CampaignData",
    
    # Helper functions
    "create_campaign",
    "create_ad_group",
    "create_keyword",
    "create_advertisement"
]

