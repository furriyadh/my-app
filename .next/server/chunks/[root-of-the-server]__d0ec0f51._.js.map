{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/DELL/my-site/src/app/api/oauth/callback/route.ts"],"sourcesContent":["// src/app/api/oauth/callback/route.ts\r\n// OAuth callback handler لمعالجة استجابة Google OAuth\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\n\r\nexport async function GET(req: NextRequest) {\r\n  // تعريف baseUrl في بداية الدالة ليكون متاحاً في جميع أنحاء الدالة\r\n  const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000';\r\n  \r\n  try {\r\n    const { searchParams } = new URL(req.url);\r\n    const code = searchParams.get('code');\r\n    const state = searchParams.get('state');\r\n    const error = searchParams.get('error');\r\n\r\n    console.log('OAuth Callback received:', { code: !!code, state, error });\r\n\r\n    // التحقق من وجود خطأ في OAuth\r\n    if (error) {\r\n      console.error('OAuth Error:', error);\r\n      const errorMessage = encodeURIComponent('حدث خطأ أثناء ربط حساب Google Ads: ' + error);\r\n      const redirectUrl = new URL('/dashboard', baseUrl);\r\n      redirectUrl.searchParams.set('error', errorMessage);\r\n      return NextResponse.redirect(redirectUrl.toString());\r\n    }\r\n\r\n    // التحقق من وجود authorization code\r\n    if (!code) {\r\n      console.error('No authorization code received');\r\n      const errorMessage = encodeURIComponent('لم يتم الحصول على رمز التفويض من Google');\r\n      const redirectUrl = new URL('/dashboard', baseUrl);\r\n      redirectUrl.searchParams.set('error', errorMessage);\r\n      return NextResponse.redirect(redirectUrl.toString());\r\n    }\r\n\r\n    // تحديد redirectUri بناءً على البيئة\r\n    const currentRedirectUri = process.env.NODE_ENV === 'production'\r\n      ? 'https://furriyadh.com/api/oauth/callback'\r\n      : 'http://localhost:3000/api/oauth/callback';\r\n\r\n    console.log('DEBUG: currentRedirectUri:', currentRedirectUri);\r\n\r\n    const tokenResponse = await exchangeCodeForToken(code, currentRedirectUri);\r\n\r\n    if (tokenResponse.success) {\r\n      console.log('✅ Token exchange successful, redirecting to dashboard...');\r\n      // هنا يمكنك حفظ الـ access_token والـ refresh_token في قاعدة البيانات أو في جلسة المستخدم\r\n      // ثم إعادة توجيه المستخدم إلى لوحة التحكم\r\n      const redirectUrl = new URL('/dashboard', baseUrl);\r\n      redirectUrl.searchParams.set('success', 'true');\r\n      redirectUrl.searchParams.set('access_token', tokenResponse.access_token);\r\n      if (tokenResponse.refresh_token) {\r\n        redirectUrl.searchParams.set('refresh_token', tokenResponse.refresh_token);\r\n      }\r\n      return NextResponse.redirect(redirectUrl.toString());\r\n    } else {\r\n      console.error('❌ Token exchange failed:', tokenResponse.error);\r\n      const errorMessage = encodeURIComponent('فشل في الحصول على رمز الوصول من Google: ' + tokenResponse.error);\r\n      const redirectUrl = new URL('/dashboard', baseUrl);\r\n      redirectUrl.searchParams.set('error', errorMessage);\r\n      return NextResponse.redirect(redirectUrl.toString());\r\n    }\r\n\r\n  } catch (error: any) {\r\n    console.error('❌ Error in OAuth callback:', error);\r\n    const errorMessage = encodeURIComponent('حدث خطأ غير متوقع أثناء عملية OAuth: ' + error.message);\r\n    const redirectUrl = new URL('/dashboard', baseUrl);\r\n    redirectUrl.searchParams.set('error', errorMessage);\r\n    return NextResponse.redirect(redirectUrl.toString());\r\n  }\r\n}\r\n\r\nasync function exchangeCodeForToken(code: string, redirectUri: string) {\r\n  try {\r\n    const clientId = process.env.GOOGLE_CLIENT_ID;\r\n    const clientSecret = process.env.GOOGLE_CLIENT_SECRET;\r\n\r\n    // DEBUGGING LOGS\r\n    console.log(\"DEBUG: Loaded GOOGLE_CLIENT_ID:\", clientId);\r\n    console.log(\"DEBUG: Loaded GOOGLE_CLIENT_SECRET:\", clientSecret ? clientSecret.substring(0, 5) + '...' : 'Not loaded');\r\n\r\n    if (!clientId || !clientSecret) {\r\n      console.error('Missing GOOGLE_CLIENT_ID or GOOGLE_CLIENT_SECRET environment variables.');\r\n      return { success: false, error: 'Missing client credentials' };\r\n    }\r\n\r\n    const tokenEndpoint = 'https://oauth2.googleapis.com/token';\r\n\r\n    const params = new URLSearchParams({\r\n      client_id: clientId,\r\n      client_secret: clientSecret,\r\n      code: code,\r\n      grant_type: 'authorization_code',\r\n      redirect_uri: redirectUri, // استخدام الـ redirectUri المحدد\r\n    });\r\n\r\n    console.log('📤 Sending token exchange request to:', tokenEndpoint);\r\n    console.log('📤 Request params:', {\r\n      client_id: clientId,\r\n      grant_type: 'authorization_code',\r\n      redirect_uri: redirectUri,\r\n      code: code ? code.substring(0, 10) + '...' : 'Not set'\r\n    });\r\n\r\n    const response = await fetch(tokenEndpoint, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/x-www-form-urlencoded',\r\n      },\r\n      body: params.toString(),\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    console.log('📥 Token exchange response status:', response.status);\r\n    console.log('📥 Token exchange response:', {\r\n      success: response.ok,\r\n      error: data.error,\r\n      error_description: data.error_description,\r\n      hasAccessToken: !!data.access_token\r\n    });\r\n\r\n    if (!response.ok) {\r\n      console.error('❌ Token exchange failed:', data);\r\n      return {\r\n        success: false,\r\n        error: data.error_description || data.error || 'Token exchange failed'\r\n      };\r\n    }\r\n\r\n    console.log('✅ Token exchange successful');\r\n    return {\r\n      success: true,\r\n      access_token: data.access_token,\r\n      refresh_token: data.refresh_token,\r\n      expires_in: data.expires_in,\r\n      token_type: data.token_type,\r\n      scope: data.scope\r\n    };\r\n\r\n  } catch (error: any) {\r\n    console.error('❌ Error in token exchange:', error);\r\n    return {\r\n      success: false,\r\n      error: error.message || 'Unknown error during token exchange'\r\n    };\r\n  }\r\n}\r\n\r\n"],"names":[],"mappings":"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","debugId":null}}]
}