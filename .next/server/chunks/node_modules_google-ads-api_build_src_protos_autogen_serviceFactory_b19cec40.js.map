{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/DELL/my-site/node_modules/google-ads-api/build/src/protos/autogen/serviceFactory.js"],"sourcesContent":["\"use strict\";\n/* Autogenerated File! Do Not Edit */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst service_1 = require(\"../../service\");\nconst index_1 = require(\"../index\");\nclass ServiceFactory extends service_1.Service {\n    constructor(clientOptions, customerOptions, hooks) {\n        super(clientOptions, customerOptions, hooks ?? {});\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/AccountBudgetProposalService\n     */\n    get accountBudgetProposals() {\n        const service = this.loadService(\"AccountBudgetProposalServiceClient\");\n        return {\n            /**\n             * @description create resources of type resources.IAccountBudgetProposal\n             * @returns services.MutateAccountBudgetProposalResponse\n             */\n            create: async (accountBudgetProposals, options) => {\n                const ops = this.buildOperations(\"create\", accountBudgetProposals);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"AccountBudgetProposalService.mutateAccountBudgetProposal\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateAccountBudgetProposal(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description remove resources of type string\n             * @returns services.MutateAccountBudgetProposalResponse\n             */\n            remove: async (accountBudgetProposals, options) => {\n                const ops = this.buildOperations(\"remove\", accountBudgetProposals);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"AccountBudgetProposalService.mutateAccountBudgetProposal\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateAccountBudgetProposal(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/AccountLinkService\n     */\n    get accountLinks() {\n        const service = this.loadService(\"AccountLinkServiceClient\");\n        return {\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/AccountLinkService#createaccountlink\n             */\n            createAccountLink: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"AccountLinkService.CreateAccountLink\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.createAccountLink(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description update resources of type resources.IAccountLink\n             * @returns services.MutateAccountLinkResponse\n             */\n            update: async (accountLinks, options) => {\n                const ops = this.buildOperations(\"update\", accountLinks, \n                // @ts-expect-error Static class type here is fine\n                index_1.resources.AccountLink);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"AccountLinkService.mutateAccountLink\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateAccountLink(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description remove resources of type string\n             * @returns services.MutateAccountLinkResponse\n             */\n            remove: async (accountLinks, options) => {\n                const ops = this.buildOperations(\"remove\", accountLinks);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"AccountLinkService.mutateAccountLink\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateAccountLink(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/AdGroupAdLabelService\n     */\n    get adGroupAdLabels() {\n        const service = this.loadService(\"AdGroupAdLabelServiceClient\");\n        return {\n            /**\n             * @description create resources of type resources.IAdGroupAdLabel\n             * @returns services.MutateAdGroupAdLabelsResponse\n             */\n            create: async (adGroupAdLabels, options) => {\n                const ops = this.buildOperations(\"create\", adGroupAdLabels);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"AdGroupAdLabelService.mutateAdGroupAdLabels\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateAdGroupAdLabels(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description remove resources of type string\n             * @returns services.MutateAdGroupAdLabelsResponse\n             */\n            remove: async (adGroupAdLabels, options) => {\n                const ops = this.buildOperations(\"remove\", adGroupAdLabels);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"AdGroupAdLabelService.mutateAdGroupAdLabels\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateAdGroupAdLabels(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/AdGroupAdService\n     */\n    get adGroupAds() {\n        const service = this.loadService(\"AdGroupAdServiceClient\");\n        return {\n            /**\n             * @description create resources of type resources.IAdGroupAd\n             * @returns services.MutateAdGroupAdsResponse\n             */\n            create: async (adGroupAds, options) => {\n                const ops = this.buildOperations(\"create\", adGroupAds);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"AdGroupAdService.mutateAdGroupAds\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateAdGroupAds(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description update resources of type resources.IAdGroupAd\n             * @returns services.MutateAdGroupAdsResponse\n             */\n            update: async (adGroupAds, options) => {\n                const ops = this.buildOperations(\"update\", adGroupAds, \n                // @ts-expect-error Static class type here is fine\n                index_1.resources.AdGroupAd);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"AdGroupAdService.mutateAdGroupAds\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateAdGroupAds(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description remove resources of type string\n             * @returns services.MutateAdGroupAdsResponse\n             */\n            remove: async (adGroupAds, options) => {\n                const ops = this.buildOperations(\"remove\", adGroupAds);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"AdGroupAdService.mutateAdGroupAds\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateAdGroupAds(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/AdGroupAdService#removeautomaticallycreatedassets\n             */\n            removeAutomaticallyCreatedAssets: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"AdGroupAdService.RemoveAutomaticallyCreatedAssets\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.removeAutomaticallyCreatedAssets(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/AdGroupAssetService\n     */\n    get adGroupAssets() {\n        const service = this.loadService(\"AdGroupAssetServiceClient\");\n        return {\n            /**\n             * @description create resources of type resources.IAdGroupAsset\n             * @returns services.MutateAdGroupAssetsResponse\n             */\n            create: async (adGroupAssets, options) => {\n                const ops = this.buildOperations(\"create\", adGroupAssets);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"AdGroupAssetService.mutateAdGroupAssets\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateAdGroupAssets(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description update resources of type resources.IAdGroupAsset\n             * @returns services.MutateAdGroupAssetsResponse\n             */\n            update: async (adGroupAssets, options) => {\n                const ops = this.buildOperations(\"update\", adGroupAssets, \n                // @ts-expect-error Static class type here is fine\n                index_1.resources.AdGroupAsset);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"AdGroupAssetService.mutateAdGroupAssets\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateAdGroupAssets(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description remove resources of type string\n             * @returns services.MutateAdGroupAssetsResponse\n             */\n            remove: async (adGroupAssets, options) => {\n                const ops = this.buildOperations(\"remove\", adGroupAssets);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"AdGroupAssetService.mutateAdGroupAssets\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateAdGroupAssets(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/AdGroupAssetSetService\n     */\n    get adGroupAssetSets() {\n        const service = this.loadService(\"AdGroupAssetSetServiceClient\");\n        return {\n            /**\n             * @description create resources of type resources.IAdGroupAssetSet\n             * @returns services.MutateAdGroupAssetSetsResponse\n             */\n            create: async (adGroupAssetSets, options) => {\n                const ops = this.buildOperations(\"create\", adGroupAssetSets);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"AdGroupAssetSetService.mutateAdGroupAssetSets\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateAdGroupAssetSets(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description remove resources of type string\n             * @returns services.MutateAdGroupAssetSetsResponse\n             */\n            remove: async (adGroupAssetSets, options) => {\n                const ops = this.buildOperations(\"remove\", adGroupAssetSets);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"AdGroupAssetSetService.mutateAdGroupAssetSets\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateAdGroupAssetSets(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/AdGroupBidModifierService\n     */\n    get adGroupBidModifiers() {\n        const service = this.loadService(\"AdGroupBidModifierServiceClient\");\n        return {\n            /**\n             * @description create resources of type resources.IAdGroupBidModifier\n             * @returns services.MutateAdGroupBidModifiersResponse\n             */\n            create: async (adGroupBidModifiers, options) => {\n                const ops = this.buildOperations(\"create\", adGroupBidModifiers);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"AdGroupBidModifierService.mutateAdGroupBidModifiers\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateAdGroupBidModifiers(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description update resources of type resources.IAdGroupBidModifier\n             * @returns services.MutateAdGroupBidModifiersResponse\n             */\n            update: async (adGroupBidModifiers, options) => {\n                const ops = this.buildOperations(\"update\", adGroupBidModifiers, \n                // @ts-expect-error Static class type here is fine\n                index_1.resources.AdGroupBidModifier);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"AdGroupBidModifierService.mutateAdGroupBidModifiers\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateAdGroupBidModifiers(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description remove resources of type string\n             * @returns services.MutateAdGroupBidModifiersResponse\n             */\n            remove: async (adGroupBidModifiers, options) => {\n                const ops = this.buildOperations(\"remove\", adGroupBidModifiers);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"AdGroupBidModifierService.mutateAdGroupBidModifiers\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateAdGroupBidModifiers(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/AdGroupCriterionCustomizerService\n     */\n    get adGroupCriterionCustomizers() {\n        const service = this.loadService(\"AdGroupCriterionCustomizerServiceClient\");\n        return {\n            /**\n             * @description create resources of type resources.IAdGroupCriterionCustomizer\n             * @returns services.MutateAdGroupCriterionCustomizersResponse\n             */\n            create: async (adGroupCriterionCustomizers, options) => {\n                const ops = this.buildOperations(\"create\", adGroupCriterionCustomizers);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"AdGroupCriterionCustomizerService.mutateAdGroupCriterionCustomizers\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateAdGroupCriterionCustomizers(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description remove resources of type string\n             * @returns services.MutateAdGroupCriterionCustomizersResponse\n             */\n            remove: async (adGroupCriterionCustomizers, options) => {\n                const ops = this.buildOperations(\"remove\", adGroupCriterionCustomizers);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"AdGroupCriterionCustomizerService.mutateAdGroupCriterionCustomizers\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateAdGroupCriterionCustomizers(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/AdGroupCriterionLabelService\n     */\n    get adGroupCriterionLabels() {\n        const service = this.loadService(\"AdGroupCriterionLabelServiceClient\");\n        return {\n            /**\n             * @description create resources of type resources.IAdGroupCriterionLabel\n             * @returns services.MutateAdGroupCriterionLabelsResponse\n             */\n            create: async (adGroupCriterionLabels, options) => {\n                const ops = this.buildOperations(\"create\", adGroupCriterionLabels);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"AdGroupCriterionLabelService.mutateAdGroupCriterionLabels\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateAdGroupCriterionLabels(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description remove resources of type string\n             * @returns services.MutateAdGroupCriterionLabelsResponse\n             */\n            remove: async (adGroupCriterionLabels, options) => {\n                const ops = this.buildOperations(\"remove\", adGroupCriterionLabels);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"AdGroupCriterionLabelService.mutateAdGroupCriterionLabels\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateAdGroupCriterionLabels(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/AdGroupCriterionService\n     */\n    get adGroupCriteria() {\n        const service = this.loadService(\"AdGroupCriterionServiceClient\");\n        return {\n            /**\n             * @description create resources of type resources.IAdGroupCriterion\n             * @returns services.MutateAdGroupCriteriaResponse\n             */\n            create: async (adGroupCriteria, options) => {\n                const ops = this.buildOperations(\"create\", adGroupCriteria);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"AdGroupCriterionService.mutateAdGroupCriteria\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateAdGroupCriteria(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description update resources of type resources.IAdGroupCriterion\n             * @returns services.MutateAdGroupCriteriaResponse\n             */\n            update: async (adGroupCriteria, options) => {\n                const ops = this.buildOperations(\"update\", adGroupCriteria, \n                // @ts-expect-error Static class type here is fine\n                index_1.resources.AdGroupCriterion);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"AdGroupCriterionService.mutateAdGroupCriteria\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateAdGroupCriteria(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description remove resources of type string\n             * @returns services.MutateAdGroupCriteriaResponse\n             */\n            remove: async (adGroupCriteria, options) => {\n                const ops = this.buildOperations(\"remove\", adGroupCriteria);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"AdGroupCriterionService.mutateAdGroupCriteria\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateAdGroupCriteria(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/AdGroupCustomizerService\n     */\n    get adGroupCustomizers() {\n        const service = this.loadService(\"AdGroupCustomizerServiceClient\");\n        return {\n            /**\n             * @description create resources of type resources.IAdGroupCustomizer\n             * @returns services.MutateAdGroupCustomizersResponse\n             */\n            create: async (adGroupCustomizers, options) => {\n                const ops = this.buildOperations(\"create\", adGroupCustomizers);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"AdGroupCustomizerService.mutateAdGroupCustomizers\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateAdGroupCustomizers(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description remove resources of type string\n             * @returns services.MutateAdGroupCustomizersResponse\n             */\n            remove: async (adGroupCustomizers, options) => {\n                const ops = this.buildOperations(\"remove\", adGroupCustomizers);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"AdGroupCustomizerService.mutateAdGroupCustomizers\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateAdGroupCustomizers(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/AdGroupLabelService\n     */\n    get adGroupLabels() {\n        const service = this.loadService(\"AdGroupLabelServiceClient\");\n        return {\n            /**\n             * @description create resources of type resources.IAdGroupLabel\n             * @returns services.MutateAdGroupLabelsResponse\n             */\n            create: async (adGroupLabels, options) => {\n                const ops = this.buildOperations(\"create\", adGroupLabels);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"AdGroupLabelService.mutateAdGroupLabels\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateAdGroupLabels(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description remove resources of type string\n             * @returns services.MutateAdGroupLabelsResponse\n             */\n            remove: async (adGroupLabels, options) => {\n                const ops = this.buildOperations(\"remove\", adGroupLabels);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"AdGroupLabelService.mutateAdGroupLabels\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateAdGroupLabels(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/AdGroupService\n     */\n    get adGroups() {\n        const service = this.loadService(\"AdGroupServiceClient\");\n        return {\n            /**\n             * @description create resources of type resources.IAdGroup\n             * @returns services.MutateAdGroupsResponse\n             */\n            create: async (adGroups, options) => {\n                const ops = this.buildOperations(\"create\", adGroups);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"AdGroupService.mutateAdGroups\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateAdGroups(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description update resources of type resources.IAdGroup\n             * @returns services.MutateAdGroupsResponse\n             */\n            update: async (adGroups, options) => {\n                const ops = this.buildOperations(\"update\", adGroups, \n                // @ts-expect-error Static class type here is fine\n                index_1.resources.AdGroup);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"AdGroupService.mutateAdGroups\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateAdGroups(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description remove resources of type string\n             * @returns services.MutateAdGroupsResponse\n             */\n            remove: async (adGroups, options) => {\n                const ops = this.buildOperations(\"remove\", adGroups);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"AdGroupService.mutateAdGroups\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateAdGroups(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/AdParameterService\n     */\n    get adParameters() {\n        const service = this.loadService(\"AdParameterServiceClient\");\n        return {\n            /**\n             * @description create resources of type resources.IAdParameter\n             * @returns services.MutateAdParametersResponse\n             */\n            create: async (adParameters, options) => {\n                const ops = this.buildOperations(\"create\", adParameters);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"AdParameterService.mutateAdParameters\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateAdParameters(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description update resources of type resources.IAdParameter\n             * @returns services.MutateAdParametersResponse\n             */\n            update: async (adParameters, options) => {\n                const ops = this.buildOperations(\"update\", adParameters, \n                // @ts-expect-error Static class type here is fine\n                index_1.resources.AdParameter);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"AdParameterService.mutateAdParameters\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateAdParameters(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description remove resources of type string\n             * @returns services.MutateAdParametersResponse\n             */\n            remove: async (adParameters, options) => {\n                const ops = this.buildOperations(\"remove\", adParameters);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"AdParameterService.mutateAdParameters\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateAdParameters(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/AdService\n     */\n    get ads() {\n        const service = this.loadService(\"AdServiceClient\");\n        return {\n            /**\n             * @description update resources of type resources.IAd\n             * @returns services.MutateAdsResponse\n             */\n            update: async (ads, options) => {\n                const ops = this.buildOperations(\"update\", ads, \n                // @ts-expect-error Static class type here is fine\n                index_1.resources.Ad);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"AdService.mutateAds\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateAds(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/AssetGroupAssetService\n     */\n    get assetGroupAssets() {\n        const service = this.loadService(\"AssetGroupAssetServiceClient\");\n        return {\n            /**\n             * @description create resources of type resources.IAssetGroupAsset\n             * @returns services.MutateAssetGroupAssetsResponse\n             */\n            create: async (assetGroupAssets, options) => {\n                const ops = this.buildOperations(\"create\", assetGroupAssets);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"AssetGroupAssetService.mutateAssetGroupAssets\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateAssetGroupAssets(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description update resources of type resources.IAssetGroupAsset\n             * @returns services.MutateAssetGroupAssetsResponse\n             */\n            update: async (assetGroupAssets, options) => {\n                const ops = this.buildOperations(\"update\", assetGroupAssets, \n                // @ts-expect-error Static class type here is fine\n                index_1.resources.AssetGroupAsset);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"AssetGroupAssetService.mutateAssetGroupAssets\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateAssetGroupAssets(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description remove resources of type string\n             * @returns services.MutateAssetGroupAssetsResponse\n             */\n            remove: async (assetGroupAssets, options) => {\n                const ops = this.buildOperations(\"remove\", assetGroupAssets);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"AssetGroupAssetService.mutateAssetGroupAssets\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateAssetGroupAssets(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/AssetGroupListingGroupFilterService\n     */\n    get assetGroupListingGroupFilters() {\n        const service = this.loadService(\"AssetGroupListingGroupFilterServiceClient\");\n        return {\n            /**\n             * @description create resources of type resources.IAssetGroupListingGroupFilter\n             * @returns services.MutateAssetGroupListingGroupFiltersResponse\n             */\n            create: async (assetGroupListingGroupFilters, options) => {\n                const ops = this.buildOperations(\"create\", assetGroupListingGroupFilters);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"AssetGroupListingGroupFilterService.mutateAssetGroupListingGroupFilters\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateAssetGroupListingGroupFilters(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description update resources of type resources.IAssetGroupListingGroupFilter\n             * @returns services.MutateAssetGroupListingGroupFiltersResponse\n             */\n            update: async (assetGroupListingGroupFilters, options) => {\n                const ops = this.buildOperations(\"update\", assetGroupListingGroupFilters, \n                // @ts-expect-error Static class type here is fine\n                index_1.resources.AssetGroupListingGroupFilter);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"AssetGroupListingGroupFilterService.mutateAssetGroupListingGroupFilters\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateAssetGroupListingGroupFilters(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description remove resources of type string\n             * @returns services.MutateAssetGroupListingGroupFiltersResponse\n             */\n            remove: async (assetGroupListingGroupFilters, options) => {\n                const ops = this.buildOperations(\"remove\", assetGroupListingGroupFilters);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"AssetGroupListingGroupFilterService.mutateAssetGroupListingGroupFilters\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateAssetGroupListingGroupFilters(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/AssetGroupService\n     */\n    get assetGroups() {\n        const service = this.loadService(\"AssetGroupServiceClient\");\n        return {\n            /**\n             * @description create resources of type resources.IAssetGroup\n             * @returns services.MutateAssetGroupsResponse\n             */\n            create: async (assetGroups, options) => {\n                const ops = this.buildOperations(\"create\", assetGroups);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"AssetGroupService.mutateAssetGroups\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateAssetGroups(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description update resources of type resources.IAssetGroup\n             * @returns services.MutateAssetGroupsResponse\n             */\n            update: async (assetGroups, options) => {\n                const ops = this.buildOperations(\"update\", assetGroups, \n                // @ts-expect-error Static class type here is fine\n                index_1.resources.AssetGroup);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"AssetGroupService.mutateAssetGroups\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateAssetGroups(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description remove resources of type string\n             * @returns services.MutateAssetGroupsResponse\n             */\n            remove: async (assetGroups, options) => {\n                const ops = this.buildOperations(\"remove\", assetGroups);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"AssetGroupService.mutateAssetGroups\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateAssetGroups(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/AssetGroupSignalService\n     */\n    get assetGroupSignals() {\n        const service = this.loadService(\"AssetGroupSignalServiceClient\");\n        return {\n            /**\n             * @description create resources of type resources.IAssetGroupSignal\n             * @returns services.MutateAssetGroupSignalsResponse\n             */\n            create: async (assetGroupSignals, options) => {\n                const ops = this.buildOperations(\"create\", assetGroupSignals);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"AssetGroupSignalService.mutateAssetGroupSignals\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateAssetGroupSignals(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description remove resources of type string\n             * @returns services.MutateAssetGroupSignalsResponse\n             */\n            remove: async (assetGroupSignals, options) => {\n                const ops = this.buildOperations(\"remove\", assetGroupSignals);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"AssetGroupSignalService.mutateAssetGroupSignals\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateAssetGroupSignals(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/AssetService\n     */\n    get assets() {\n        const service = this.loadService(\"AssetServiceClient\");\n        return {\n            /**\n             * @description create resources of type resources.IAsset\n             * @returns services.MutateAssetsResponse\n             */\n            create: async (assets, options) => {\n                const ops = this.buildOperations(\"create\", assets);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"AssetService.mutateAssets\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateAssets(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description update resources of type resources.IAsset\n             * @returns services.MutateAssetsResponse\n             */\n            update: async (assets, options) => {\n                const ops = this.buildOperations(\"update\", assets, \n                // @ts-expect-error Static class type here is fine\n                index_1.resources.Asset);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"AssetService.mutateAssets\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateAssets(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/AssetSetAssetService\n     */\n    get assetSetAssets() {\n        const service = this.loadService(\"AssetSetAssetServiceClient\");\n        return {\n            /**\n             * @description create resources of type resources.IAssetSetAsset\n             * @returns services.MutateAssetSetAssetsResponse\n             */\n            create: async (assetSetAssets, options) => {\n                const ops = this.buildOperations(\"create\", assetSetAssets);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"AssetSetAssetService.mutateAssetSetAssets\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateAssetSetAssets(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description remove resources of type string\n             * @returns services.MutateAssetSetAssetsResponse\n             */\n            remove: async (assetSetAssets, options) => {\n                const ops = this.buildOperations(\"remove\", assetSetAssets);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"AssetSetAssetService.mutateAssetSetAssets\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateAssetSetAssets(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/AssetSetService\n     */\n    get assetSets() {\n        const service = this.loadService(\"AssetSetServiceClient\");\n        return {\n            /**\n             * @description create resources of type resources.IAssetSet\n             * @returns services.MutateAssetSetsResponse\n             */\n            create: async (assetSets, options) => {\n                const ops = this.buildOperations(\"create\", assetSets);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"AssetSetService.mutateAssetSets\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateAssetSets(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description update resources of type resources.IAssetSet\n             * @returns services.MutateAssetSetsResponse\n             */\n            update: async (assetSets, options) => {\n                const ops = this.buildOperations(\"update\", assetSets, \n                // @ts-expect-error Static class type here is fine\n                index_1.resources.AssetSet);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"AssetSetService.mutateAssetSets\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateAssetSets(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description remove resources of type string\n             * @returns services.MutateAssetSetsResponse\n             */\n            remove: async (assetSets, options) => {\n                const ops = this.buildOperations(\"remove\", assetSets);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"AssetSetService.mutateAssetSets\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateAssetSets(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/AudienceInsightsService\n     */\n    get audienceInsights() {\n        const service = this.loadService(\"AudienceInsightsServiceClient\");\n        return {\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/AudienceInsightsService#generateinsightsfinderreport\n             */\n            generateInsightsFinderReport: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"AudienceInsightsService.GenerateInsightsFinderReport\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.generateInsightsFinderReport(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/AudienceInsightsService#listaudienceinsightsattributes\n             */\n            listAudienceInsightsAttributes: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"AudienceInsightsService.ListAudienceInsightsAttributes\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.listAudienceInsightsAttributes(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/AudienceInsightsService#listinsightseligibledates\n             */\n            listInsightsEligibleDates: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"AudienceInsightsService.ListInsightsEligibleDates\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.listInsightsEligibleDates(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/AudienceInsightsService#generateaudiencecompositioninsights\n             */\n            generateAudienceCompositionInsights: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"AudienceInsightsService.GenerateAudienceCompositionInsights\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.generateAudienceCompositionInsights(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/AudienceInsightsService#generatesuggestedtargetinginsights\n             */\n            generateSuggestedTargetingInsights: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"AudienceInsightsService.GenerateSuggestedTargetingInsights\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.generateSuggestedTargetingInsights(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/AudienceInsightsService#generateaudienceoverlapinsights\n             */\n            generateAudienceOverlapInsights: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"AudienceInsightsService.GenerateAudienceOverlapInsights\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.generateAudienceOverlapInsights(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/AudienceInsightsService#generatetargetingsuggestionmetrics\n             */\n            generateTargetingSuggestionMetrics: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"AudienceInsightsService.GenerateTargetingSuggestionMetrics\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.generateTargetingSuggestionMetrics(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/AudienceService\n     */\n    get audiences() {\n        const service = this.loadService(\"AudienceServiceClient\");\n        return {\n            /**\n             * @description create resources of type resources.IAudience\n             * @returns services.MutateAudiencesResponse\n             */\n            create: async (audiences, options) => {\n                const ops = this.buildOperations(\"create\", audiences);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"AudienceService.mutateAudiences\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateAudiences(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description update resources of type resources.IAudience\n             * @returns services.MutateAudiencesResponse\n             */\n            update: async (audiences, options) => {\n                const ops = this.buildOperations(\"update\", audiences, \n                // @ts-expect-error Static class type here is fine\n                index_1.resources.Audience);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"AudienceService.mutateAudiences\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateAudiences(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/BatchJobService\n     */\n    get batchJobs() {\n        const service = this.loadService(\"BatchJobServiceClient\");\n        return {\n            /**\n             * @description create resources of type resources.IBatchJob\n             * @returns services.MutateBatchJobResponse\n             */\n            create: async (batchJobs, options) => {\n                const ops = this.buildOperations(\"create\", batchJobs);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"BatchJobService.mutateBatchJob\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateBatchJob(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description remove resources of type string\n             * @returns services.MutateBatchJobResponse\n             */\n            remove: async (batchJobs, options) => {\n                const ops = this.buildOperations(\"remove\", batchJobs);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"BatchJobService.mutateBatchJob\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateBatchJob(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/BatchJobService#listbatchjobresults\n             */\n            listBatchJobResults: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"BatchJobService.ListBatchJobResults\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.listBatchJobResults(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/BatchJobService#runbatchjob\n             */\n            runBatchJob: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"BatchJobService.RunBatchJob\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.runBatchJob(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/BatchJobService#addbatchjoboperations\n             */\n            addBatchJobOperations: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"BatchJobService.AddBatchJobOperations\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.addBatchJobOperations(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/BiddingDataExclusionService\n     */\n    get biddingDataExclusions() {\n        const service = this.loadService(\"BiddingDataExclusionServiceClient\");\n        return {\n            /**\n             * @description create resources of type resources.IBiddingDataExclusion\n             * @returns services.MutateBiddingDataExclusionsResponse\n             */\n            create: async (biddingDataExclusions, options) => {\n                const ops = this.buildOperations(\"create\", biddingDataExclusions);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"BiddingDataExclusionService.mutateBiddingDataExclusions\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateBiddingDataExclusions(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description update resources of type resources.IBiddingDataExclusion\n             * @returns services.MutateBiddingDataExclusionsResponse\n             */\n            update: async (biddingDataExclusions, options) => {\n                const ops = this.buildOperations(\"update\", biddingDataExclusions, \n                // @ts-expect-error Static class type here is fine\n                index_1.resources.BiddingDataExclusion);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"BiddingDataExclusionService.mutateBiddingDataExclusions\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateBiddingDataExclusions(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description remove resources of type string\n             * @returns services.MutateBiddingDataExclusionsResponse\n             */\n            remove: async (biddingDataExclusions, options) => {\n                const ops = this.buildOperations(\"remove\", biddingDataExclusions);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"BiddingDataExclusionService.mutateBiddingDataExclusions\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateBiddingDataExclusions(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/BiddingSeasonalityAdjustmentService\n     */\n    get biddingSeasonalityAdjustments() {\n        const service = this.loadService(\"BiddingSeasonalityAdjustmentServiceClient\");\n        return {\n            /**\n             * @description create resources of type resources.IBiddingSeasonalityAdjustment\n             * @returns services.MutateBiddingSeasonalityAdjustmentsResponse\n             */\n            create: async (biddingSeasonalityAdjustments, options) => {\n                const ops = this.buildOperations(\"create\", biddingSeasonalityAdjustments);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"BiddingSeasonalityAdjustmentService.mutateBiddingSeasonalityAdjustments\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateBiddingSeasonalityAdjustments(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description update resources of type resources.IBiddingSeasonalityAdjustment\n             * @returns services.MutateBiddingSeasonalityAdjustmentsResponse\n             */\n            update: async (biddingSeasonalityAdjustments, options) => {\n                const ops = this.buildOperations(\"update\", biddingSeasonalityAdjustments, \n                // @ts-expect-error Static class type here is fine\n                index_1.resources.BiddingSeasonalityAdjustment);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"BiddingSeasonalityAdjustmentService.mutateBiddingSeasonalityAdjustments\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateBiddingSeasonalityAdjustments(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description remove resources of type string\n             * @returns services.MutateBiddingSeasonalityAdjustmentsResponse\n             */\n            remove: async (biddingSeasonalityAdjustments, options) => {\n                const ops = this.buildOperations(\"remove\", biddingSeasonalityAdjustments);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"BiddingSeasonalityAdjustmentService.mutateBiddingSeasonalityAdjustments\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateBiddingSeasonalityAdjustments(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/BiddingStrategyService\n     */\n    get biddingStrategies() {\n        const service = this.loadService(\"BiddingStrategyServiceClient\");\n        return {\n            /**\n             * @description create resources of type resources.IBiddingStrategy\n             * @returns services.MutateBiddingStrategiesResponse\n             */\n            create: async (biddingStrategies, options) => {\n                const ops = this.buildOperations(\"create\", biddingStrategies);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"BiddingStrategyService.mutateBiddingStrategies\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateBiddingStrategies(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description update resources of type resources.IBiddingStrategy\n             * @returns services.MutateBiddingStrategiesResponse\n             */\n            update: async (biddingStrategies, options) => {\n                const ops = this.buildOperations(\"update\", biddingStrategies, \n                // @ts-expect-error Static class type here is fine\n                index_1.resources.BiddingStrategy);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"BiddingStrategyService.mutateBiddingStrategies\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateBiddingStrategies(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description remove resources of type string\n             * @returns services.MutateBiddingStrategiesResponse\n             */\n            remove: async (biddingStrategies, options) => {\n                const ops = this.buildOperations(\"remove\", biddingStrategies);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"BiddingStrategyService.mutateBiddingStrategies\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateBiddingStrategies(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/CampaignAssetService\n     */\n    get campaignAssets() {\n        const service = this.loadService(\"CampaignAssetServiceClient\");\n        return {\n            /**\n             * @description create resources of type resources.ICampaignAsset\n             * @returns services.MutateCampaignAssetsResponse\n             */\n            create: async (campaignAssets, options) => {\n                const ops = this.buildOperations(\"create\", campaignAssets);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CampaignAssetService.mutateCampaignAssets\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateCampaignAssets(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description update resources of type resources.ICampaignAsset\n             * @returns services.MutateCampaignAssetsResponse\n             */\n            update: async (campaignAssets, options) => {\n                const ops = this.buildOperations(\"update\", campaignAssets, \n                // @ts-expect-error Static class type here is fine\n                index_1.resources.CampaignAsset);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CampaignAssetService.mutateCampaignAssets\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateCampaignAssets(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description remove resources of type string\n             * @returns services.MutateCampaignAssetsResponse\n             */\n            remove: async (campaignAssets, options) => {\n                const ops = this.buildOperations(\"remove\", campaignAssets);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CampaignAssetService.mutateCampaignAssets\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateCampaignAssets(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/CampaignAssetSetService\n     */\n    get campaignAssetSets() {\n        const service = this.loadService(\"CampaignAssetSetServiceClient\");\n        return {\n            /**\n             * @description create resources of type resources.ICampaignAssetSet\n             * @returns services.MutateCampaignAssetSetsResponse\n             */\n            create: async (campaignAssetSets, options) => {\n                const ops = this.buildOperations(\"create\", campaignAssetSets);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CampaignAssetSetService.mutateCampaignAssetSets\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateCampaignAssetSets(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description remove resources of type string\n             * @returns services.MutateCampaignAssetSetsResponse\n             */\n            remove: async (campaignAssetSets, options) => {\n                const ops = this.buildOperations(\"remove\", campaignAssetSets);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CampaignAssetSetService.mutateCampaignAssetSets\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateCampaignAssetSets(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/CampaignBidModifierService\n     */\n    get campaignBidModifiers() {\n        const service = this.loadService(\"CampaignBidModifierServiceClient\");\n        return {\n            /**\n             * @description create resources of type resources.ICampaignBidModifier\n             * @returns services.MutateCampaignBidModifiersResponse\n             */\n            create: async (campaignBidModifiers, options) => {\n                const ops = this.buildOperations(\"create\", campaignBidModifiers);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CampaignBidModifierService.mutateCampaignBidModifiers\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateCampaignBidModifiers(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description update resources of type resources.ICampaignBidModifier\n             * @returns services.MutateCampaignBidModifiersResponse\n             */\n            update: async (campaignBidModifiers, options) => {\n                const ops = this.buildOperations(\"update\", campaignBidModifiers, \n                // @ts-expect-error Static class type here is fine\n                index_1.resources.CampaignBidModifier);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CampaignBidModifierService.mutateCampaignBidModifiers\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateCampaignBidModifiers(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description remove resources of type string\n             * @returns services.MutateCampaignBidModifiersResponse\n             */\n            remove: async (campaignBidModifiers, options) => {\n                const ops = this.buildOperations(\"remove\", campaignBidModifiers);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CampaignBidModifierService.mutateCampaignBidModifiers\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateCampaignBidModifiers(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/CampaignBudgetService\n     */\n    get campaignBudgets() {\n        const service = this.loadService(\"CampaignBudgetServiceClient\");\n        return {\n            /**\n             * @description create resources of type resources.ICampaignBudget\n             * @returns services.MutateCampaignBudgetsResponse\n             */\n            create: async (campaignBudgets, options) => {\n                const ops = this.buildOperations(\"create\", campaignBudgets);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CampaignBudgetService.mutateCampaignBudgets\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateCampaignBudgets(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description update resources of type resources.ICampaignBudget\n             * @returns services.MutateCampaignBudgetsResponse\n             */\n            update: async (campaignBudgets, options) => {\n                const ops = this.buildOperations(\"update\", campaignBudgets, \n                // @ts-expect-error Static class type here is fine\n                index_1.resources.CampaignBudget);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CampaignBudgetService.mutateCampaignBudgets\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateCampaignBudgets(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description remove resources of type string\n             * @returns services.MutateCampaignBudgetsResponse\n             */\n            remove: async (campaignBudgets, options) => {\n                const ops = this.buildOperations(\"remove\", campaignBudgets);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CampaignBudgetService.mutateCampaignBudgets\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateCampaignBudgets(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/CampaignConversionGoalService\n     */\n    get campaignConversionGoals() {\n        const service = this.loadService(\"CampaignConversionGoalServiceClient\");\n        return {\n            /**\n             * @description update resources of type resources.ICampaignConversionGoal\n             * @returns services.MutateCampaignConversionGoalsResponse\n             */\n            update: async (campaignConversionGoals, options) => {\n                const ops = this.buildOperations(\"update\", campaignConversionGoals, \n                // @ts-expect-error Static class type here is fine\n                index_1.resources.CampaignConversionGoal);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CampaignConversionGoalService.mutateCampaignConversionGoals\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateCampaignConversionGoals(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/CampaignCriterionService\n     */\n    get campaignCriteria() {\n        const service = this.loadService(\"CampaignCriterionServiceClient\");\n        return {\n            /**\n             * @description create resources of type resources.ICampaignCriterion\n             * @returns services.MutateCampaignCriteriaResponse\n             */\n            create: async (campaignCriteria, options) => {\n                const ops = this.buildOperations(\"create\", campaignCriteria);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CampaignCriterionService.mutateCampaignCriteria\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateCampaignCriteria(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description update resources of type resources.ICampaignCriterion\n             * @returns services.MutateCampaignCriteriaResponse\n             */\n            update: async (campaignCriteria, options) => {\n                const ops = this.buildOperations(\"update\", campaignCriteria, \n                // @ts-expect-error Static class type here is fine\n                index_1.resources.CampaignCriterion);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CampaignCriterionService.mutateCampaignCriteria\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateCampaignCriteria(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description remove resources of type string\n             * @returns services.MutateCampaignCriteriaResponse\n             */\n            remove: async (campaignCriteria, options) => {\n                const ops = this.buildOperations(\"remove\", campaignCriteria);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CampaignCriterionService.mutateCampaignCriteria\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateCampaignCriteria(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/CampaignCustomizerService\n     */\n    get campaignCustomizers() {\n        const service = this.loadService(\"CampaignCustomizerServiceClient\");\n        return {\n            /**\n             * @description create resources of type resources.ICampaignCustomizer\n             * @returns services.MutateCampaignCustomizersResponse\n             */\n            create: async (campaignCustomizers, options) => {\n                const ops = this.buildOperations(\"create\", campaignCustomizers);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CampaignCustomizerService.mutateCampaignCustomizers\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateCampaignCustomizers(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description remove resources of type string\n             * @returns services.MutateCampaignCustomizersResponse\n             */\n            remove: async (campaignCustomizers, options) => {\n                const ops = this.buildOperations(\"remove\", campaignCustomizers);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CampaignCustomizerService.mutateCampaignCustomizers\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateCampaignCustomizers(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/CampaignDraftService\n     */\n    get campaignDrafts() {\n        const service = this.loadService(\"CampaignDraftServiceClient\");\n        return {\n            /**\n             * @description create resources of type resources.ICampaignDraft\n             * @returns services.MutateCampaignDraftsResponse\n             */\n            create: async (campaignDrafts, options) => {\n                const ops = this.buildOperations(\"create\", campaignDrafts);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CampaignDraftService.mutateCampaignDrafts\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateCampaignDrafts(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description update resources of type resources.ICampaignDraft\n             * @returns services.MutateCampaignDraftsResponse\n             */\n            update: async (campaignDrafts, options) => {\n                const ops = this.buildOperations(\"update\", campaignDrafts, \n                // @ts-expect-error Static class type here is fine\n                index_1.resources.CampaignDraft);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CampaignDraftService.mutateCampaignDrafts\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateCampaignDrafts(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description remove resources of type string\n             * @returns services.MutateCampaignDraftsResponse\n             */\n            remove: async (campaignDrafts, options) => {\n                const ops = this.buildOperations(\"remove\", campaignDrafts);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CampaignDraftService.mutateCampaignDrafts\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateCampaignDrafts(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/CampaignDraftService#promotecampaigndraft\n             */\n            promoteCampaignDraft: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CampaignDraftService.PromoteCampaignDraft\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.promoteCampaignDraft(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/CampaignDraftService#listcampaigndraftasyncerrors\n             */\n            listCampaignDraftAsyncErrors: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CampaignDraftService.ListCampaignDraftAsyncErrors\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.listCampaignDraftAsyncErrors(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/CampaignGroupService\n     */\n    get campaignGroups() {\n        const service = this.loadService(\"CampaignGroupServiceClient\");\n        return {\n            /**\n             * @description create resources of type resources.ICampaignGroup\n             * @returns services.MutateCampaignGroupsResponse\n             */\n            create: async (campaignGroups, options) => {\n                const ops = this.buildOperations(\"create\", campaignGroups);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CampaignGroupService.mutateCampaignGroups\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateCampaignGroups(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description update resources of type resources.ICampaignGroup\n             * @returns services.MutateCampaignGroupsResponse\n             */\n            update: async (campaignGroups, options) => {\n                const ops = this.buildOperations(\"update\", campaignGroups, \n                // @ts-expect-error Static class type here is fine\n                index_1.resources.CampaignGroup);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CampaignGroupService.mutateCampaignGroups\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateCampaignGroups(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description remove resources of type string\n             * @returns services.MutateCampaignGroupsResponse\n             */\n            remove: async (campaignGroups, options) => {\n                const ops = this.buildOperations(\"remove\", campaignGroups);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CampaignGroupService.mutateCampaignGroups\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateCampaignGroups(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/CampaignLabelService\n     */\n    get campaignLabels() {\n        const service = this.loadService(\"CampaignLabelServiceClient\");\n        return {\n            /**\n             * @description create resources of type resources.ICampaignLabel\n             * @returns services.MutateCampaignLabelsResponse\n             */\n            create: async (campaignLabels, options) => {\n                const ops = this.buildOperations(\"create\", campaignLabels);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CampaignLabelService.mutateCampaignLabels\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateCampaignLabels(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description remove resources of type string\n             * @returns services.MutateCampaignLabelsResponse\n             */\n            remove: async (campaignLabels, options) => {\n                const ops = this.buildOperations(\"remove\", campaignLabels);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CampaignLabelService.mutateCampaignLabels\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateCampaignLabels(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/CampaignService\n     */\n    get campaigns() {\n        const service = this.loadService(\"CampaignServiceClient\");\n        return {\n            /**\n             * @description create resources of type resources.ICampaign\n             * @returns services.MutateCampaignsResponse\n             */\n            create: async (campaigns, options) => {\n                const ops = this.buildOperations(\"create\", campaigns);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CampaignService.mutateCampaigns\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateCampaigns(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description update resources of type resources.ICampaign\n             * @returns services.MutateCampaignsResponse\n             */\n            update: async (campaigns, options) => {\n                const ops = this.buildOperations(\"update\", campaigns, \n                // @ts-expect-error Static class type here is fine\n                index_1.resources.Campaign);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CampaignService.mutateCampaigns\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateCampaigns(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description remove resources of type string\n             * @returns services.MutateCampaignsResponse\n             */\n            remove: async (campaigns, options) => {\n                const ops = this.buildOperations(\"remove\", campaigns);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CampaignService.mutateCampaigns\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateCampaigns(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/CampaignService#enablepmaxbrandguidelines\n             */\n            enablePMaxBrandGuidelines: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CampaignService.EnablePMaxBrandGuidelines\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.enablePMaxBrandGuidelines(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/CampaignSharedSetService\n     */\n    get campaignSharedSets() {\n        const service = this.loadService(\"CampaignSharedSetServiceClient\");\n        return {\n            /**\n             * @description create resources of type resources.ICampaignSharedSet\n             * @returns services.MutateCampaignSharedSetsResponse\n             */\n            create: async (campaignSharedSets, options) => {\n                const ops = this.buildOperations(\"create\", campaignSharedSets);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CampaignSharedSetService.mutateCampaignSharedSets\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateCampaignSharedSets(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description remove resources of type string\n             * @returns services.MutateCampaignSharedSetsResponse\n             */\n            remove: async (campaignSharedSets, options) => {\n                const ops = this.buildOperations(\"remove\", campaignSharedSets);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CampaignSharedSetService.mutateCampaignSharedSets\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateCampaignSharedSets(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/ConversionActionService\n     */\n    get conversionActions() {\n        const service = this.loadService(\"ConversionActionServiceClient\");\n        return {\n            /**\n             * @description create resources of type resources.IConversionAction\n             * @returns services.MutateConversionActionsResponse\n             */\n            create: async (conversionActions, options) => {\n                const ops = this.buildOperations(\"create\", conversionActions);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"ConversionActionService.mutateConversionActions\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateConversionActions(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description update resources of type resources.IConversionAction\n             * @returns services.MutateConversionActionsResponse\n             */\n            update: async (conversionActions, options) => {\n                const ops = this.buildOperations(\"update\", conversionActions, \n                // @ts-expect-error Static class type here is fine\n                index_1.resources.ConversionAction);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"ConversionActionService.mutateConversionActions\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateConversionActions(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description remove resources of type string\n             * @returns services.MutateConversionActionsResponse\n             */\n            remove: async (conversionActions, options) => {\n                const ops = this.buildOperations(\"remove\", conversionActions);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"ConversionActionService.mutateConversionActions\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateConversionActions(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/ConversionCustomVariableService\n     */\n    get conversionCustomVariables() {\n        const service = this.loadService(\"ConversionCustomVariableServiceClient\");\n        return {\n            /**\n             * @description create resources of type resources.IConversionCustomVariable\n             * @returns services.MutateConversionCustomVariablesResponse\n             */\n            create: async (conversionCustomVariables, options) => {\n                const ops = this.buildOperations(\"create\", conversionCustomVariables);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"ConversionCustomVariableService.mutateConversionCustomVariables\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateConversionCustomVariables(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description update resources of type resources.IConversionCustomVariable\n             * @returns services.MutateConversionCustomVariablesResponse\n             */\n            update: async (conversionCustomVariables, options) => {\n                const ops = this.buildOperations(\"update\", conversionCustomVariables, \n                // @ts-expect-error Static class type here is fine\n                index_1.resources.ConversionCustomVariable);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"ConversionCustomVariableService.mutateConversionCustomVariables\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateConversionCustomVariables(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/ConversionGoalCampaignConfigService\n     */\n    get conversionGoalCampaignConfigs() {\n        const service = this.loadService(\"ConversionGoalCampaignConfigServiceClient\");\n        return {\n            /**\n             * @description update resources of type resources.IConversionGoalCampaignConfig\n             * @returns services.MutateConversionGoalCampaignConfigsResponse\n             */\n            update: async (conversionGoalCampaignConfigs, options) => {\n                const ops = this.buildOperations(\"update\", conversionGoalCampaignConfigs, \n                // @ts-expect-error Static class type here is fine\n                index_1.resources.ConversionGoalCampaignConfig);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"ConversionGoalCampaignConfigService.mutateConversionGoalCampaignConfigs\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateConversionGoalCampaignConfigs(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/ConversionValueRuleService\n     */\n    get conversionValueRules() {\n        const service = this.loadService(\"ConversionValueRuleServiceClient\");\n        return {\n            /**\n             * @description create resources of type resources.IConversionValueRule\n             * @returns services.MutateConversionValueRulesResponse\n             */\n            create: async (conversionValueRules, options) => {\n                const ops = this.buildOperations(\"create\", conversionValueRules);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"ConversionValueRuleService.mutateConversionValueRules\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateConversionValueRules(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description update resources of type resources.IConversionValueRule\n             * @returns services.MutateConversionValueRulesResponse\n             */\n            update: async (conversionValueRules, options) => {\n                const ops = this.buildOperations(\"update\", conversionValueRules, \n                // @ts-expect-error Static class type here is fine\n                index_1.resources.ConversionValueRule);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"ConversionValueRuleService.mutateConversionValueRules\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateConversionValueRules(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description remove resources of type string\n             * @returns services.MutateConversionValueRulesResponse\n             */\n            remove: async (conversionValueRules, options) => {\n                const ops = this.buildOperations(\"remove\", conversionValueRules);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"ConversionValueRuleService.mutateConversionValueRules\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateConversionValueRules(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/ConversionValueRuleSetService\n     */\n    get conversionValueRuleSets() {\n        const service = this.loadService(\"ConversionValueRuleSetServiceClient\");\n        return {\n            /**\n             * @description create resources of type resources.IConversionValueRuleSet\n             * @returns services.MutateConversionValueRuleSetsResponse\n             */\n            create: async (conversionValueRuleSets, options) => {\n                const ops = this.buildOperations(\"create\", conversionValueRuleSets);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"ConversionValueRuleSetService.mutateConversionValueRuleSets\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateConversionValueRuleSets(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description update resources of type resources.IConversionValueRuleSet\n             * @returns services.MutateConversionValueRuleSetsResponse\n             */\n            update: async (conversionValueRuleSets, options) => {\n                const ops = this.buildOperations(\"update\", conversionValueRuleSets, \n                // @ts-expect-error Static class type here is fine\n                index_1.resources.ConversionValueRuleSet);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"ConversionValueRuleSetService.mutateConversionValueRuleSets\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateConversionValueRuleSets(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description remove resources of type string\n             * @returns services.MutateConversionValueRuleSetsResponse\n             */\n            remove: async (conversionValueRuleSets, options) => {\n                const ops = this.buildOperations(\"remove\", conversionValueRuleSets);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"ConversionValueRuleSetService.mutateConversionValueRuleSets\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateConversionValueRuleSets(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/CustomConversionGoalService\n     */\n    get customConversionGoals() {\n        const service = this.loadService(\"CustomConversionGoalServiceClient\");\n        return {\n            /**\n             * @description create resources of type resources.ICustomConversionGoal\n             * @returns services.MutateCustomConversionGoalsResponse\n             */\n            create: async (customConversionGoals, options) => {\n                const ops = this.buildOperations(\"create\", customConversionGoals);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CustomConversionGoalService.mutateCustomConversionGoals\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateCustomConversionGoals(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description update resources of type resources.ICustomConversionGoal\n             * @returns services.MutateCustomConversionGoalsResponse\n             */\n            update: async (customConversionGoals, options) => {\n                const ops = this.buildOperations(\"update\", customConversionGoals, \n                // @ts-expect-error Static class type here is fine\n                index_1.resources.CustomConversionGoal);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CustomConversionGoalService.mutateCustomConversionGoals\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateCustomConversionGoals(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description remove resources of type string\n             * @returns services.MutateCustomConversionGoalsResponse\n             */\n            remove: async (customConversionGoals, options) => {\n                const ops = this.buildOperations(\"remove\", customConversionGoals);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CustomConversionGoalService.mutateCustomConversionGoals\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateCustomConversionGoals(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/CustomerAssetService\n     */\n    get customerAssets() {\n        const service = this.loadService(\"CustomerAssetServiceClient\");\n        return {\n            /**\n             * @description create resources of type resources.ICustomerAsset\n             * @returns services.MutateCustomerAssetsResponse\n             */\n            create: async (customerAssets, options) => {\n                const ops = this.buildOperations(\"create\", customerAssets);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CustomerAssetService.mutateCustomerAssets\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateCustomerAssets(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description update resources of type resources.ICustomerAsset\n             * @returns services.MutateCustomerAssetsResponse\n             */\n            update: async (customerAssets, options) => {\n                const ops = this.buildOperations(\"update\", customerAssets, \n                // @ts-expect-error Static class type here is fine\n                index_1.resources.CustomerAsset);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CustomerAssetService.mutateCustomerAssets\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateCustomerAssets(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description remove resources of type string\n             * @returns services.MutateCustomerAssetsResponse\n             */\n            remove: async (customerAssets, options) => {\n                const ops = this.buildOperations(\"remove\", customerAssets);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CustomerAssetService.mutateCustomerAssets\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateCustomerAssets(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/CustomerConversionGoalService\n     */\n    get customerConversionGoals() {\n        const service = this.loadService(\"CustomerConversionGoalServiceClient\");\n        return {\n            /**\n             * @description update resources of type resources.ICustomerConversionGoal\n             * @returns services.MutateCustomerConversionGoalsResponse\n             */\n            update: async (customerConversionGoals, options) => {\n                const ops = this.buildOperations(\"update\", customerConversionGoals, \n                // @ts-expect-error Static class type here is fine\n                index_1.resources.CustomerConversionGoal);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CustomerConversionGoalService.mutateCustomerConversionGoals\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateCustomerConversionGoals(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/CustomerCustomizerService\n     */\n    get customerCustomizers() {\n        const service = this.loadService(\"CustomerCustomizerServiceClient\");\n        return {\n            /**\n             * @description create resources of type resources.ICustomerCustomizer\n             * @returns services.MutateCustomerCustomizersResponse\n             */\n            create: async (customerCustomizers, options) => {\n                const ops = this.buildOperations(\"create\", customerCustomizers);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CustomerCustomizerService.mutateCustomerCustomizers\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateCustomerCustomizers(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description remove resources of type string\n             * @returns services.MutateCustomerCustomizersResponse\n             */\n            remove: async (customerCustomizers, options) => {\n                const ops = this.buildOperations(\"remove\", customerCustomizers);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CustomerCustomizerService.mutateCustomerCustomizers\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateCustomerCustomizers(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/CustomerLabelService\n     */\n    get customerLabels() {\n        const service = this.loadService(\"CustomerLabelServiceClient\");\n        return {\n            /**\n             * @description create resources of type resources.ICustomerLabel\n             * @returns services.MutateCustomerLabelsResponse\n             */\n            create: async (customerLabels, options) => {\n                const ops = this.buildOperations(\"create\", customerLabels);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CustomerLabelService.mutateCustomerLabels\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateCustomerLabels(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description remove resources of type string\n             * @returns services.MutateCustomerLabelsResponse\n             */\n            remove: async (customerLabels, options) => {\n                const ops = this.buildOperations(\"remove\", customerLabels);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CustomerLabelService.mutateCustomerLabels\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateCustomerLabels(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/CustomerNegativeCriterionService\n     */\n    get customerNegativeCriteria() {\n        const service = this.loadService(\"CustomerNegativeCriterionServiceClient\");\n        return {\n            /**\n             * @description create resources of type resources.ICustomerNegativeCriterion\n             * @returns services.MutateCustomerNegativeCriteriaResponse\n             */\n            create: async (customerNegativeCriteria, options) => {\n                const ops = this.buildOperations(\"create\", customerNegativeCriteria);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CustomerNegativeCriterionService.mutateCustomerNegativeCriteria\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateCustomerNegativeCriteria(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description remove resources of type string\n             * @returns services.MutateCustomerNegativeCriteriaResponse\n             */\n            remove: async (customerNegativeCriteria, options) => {\n                const ops = this.buildOperations(\"remove\", customerNegativeCriteria);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CustomerNegativeCriterionService.mutateCustomerNegativeCriteria\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateCustomerNegativeCriteria(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/CustomerService\n     */\n    get customers() {\n        const service = this.loadService(\"CustomerServiceClient\");\n        return {\n            /**\n             * @description update resources of type resources.ICustomer\n             * @returns services.MutateCustomerResponse\n             */\n            update: async (customers, options) => {\n                const ops = this.buildOperations(\"update\", customers, \n                // @ts-expect-error Static class type here is fine\n                index_1.resources.Customer);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CustomerService.mutateCustomer\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateCustomer(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/CustomerService#listaccessiblecustomers\n             */\n            listAccessibleCustomers: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CustomerService.ListAccessibleCustomers\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.listAccessibleCustomers(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/CustomerService#createcustomerclient\n             */\n            createCustomerClient: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CustomerService.CreateCustomerClient\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.createCustomerClient(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/CustomizerAttributeService\n     */\n    get customizerAttributes() {\n        const service = this.loadService(\"CustomizerAttributeServiceClient\");\n        return {\n            /**\n             * @description create resources of type resources.ICustomizerAttribute\n             * @returns services.MutateCustomizerAttributesResponse\n             */\n            create: async (customizerAttributes, options) => {\n                const ops = this.buildOperations(\"create\", customizerAttributes);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CustomizerAttributeService.mutateCustomizerAttributes\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateCustomizerAttributes(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description remove resources of type string\n             * @returns services.MutateCustomizerAttributesResponse\n             */\n            remove: async (customizerAttributes, options) => {\n                const ops = this.buildOperations(\"remove\", customizerAttributes);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CustomizerAttributeService.mutateCustomizerAttributes\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateCustomizerAttributes(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/ExperimentArmService\n     */\n    get experimentArms() {\n        const service = this.loadService(\"ExperimentArmServiceClient\");\n        return {\n            /**\n             * @description create resources of type resources.IExperimentArm\n             * @returns services.MutateExperimentArmsResponse\n             */\n            create: async (experimentArms, options) => {\n                const ops = this.buildOperations(\"create\", experimentArms);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"ExperimentArmService.mutateExperimentArms\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateExperimentArms(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description update resources of type resources.IExperimentArm\n             * @returns services.MutateExperimentArmsResponse\n             */\n            update: async (experimentArms, options) => {\n                const ops = this.buildOperations(\"update\", experimentArms, \n                // @ts-expect-error Static class type here is fine\n                index_1.resources.ExperimentArm);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"ExperimentArmService.mutateExperimentArms\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateExperimentArms(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description remove resources of type string\n             * @returns services.MutateExperimentArmsResponse\n             */\n            remove: async (experimentArms, options) => {\n                const ops = this.buildOperations(\"remove\", experimentArms);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"ExperimentArmService.mutateExperimentArms\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateExperimentArms(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/ExperimentService\n     */\n    get experiments() {\n        const service = this.loadService(\"ExperimentServiceClient\");\n        return {\n            /**\n             * @description create resources of type resources.IExperiment\n             * @returns services.MutateExperimentsResponse\n             */\n            create: async (experiments, options) => {\n                const ops = this.buildOperations(\"create\", experiments);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"ExperimentService.mutateExperiments\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateExperiments(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description update resources of type resources.IExperiment\n             * @returns services.MutateExperimentsResponse\n             */\n            update: async (experiments, options) => {\n                const ops = this.buildOperations(\"update\", experiments, \n                // @ts-expect-error Static class type here is fine\n                index_1.resources.Experiment);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"ExperimentService.mutateExperiments\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateExperiments(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description remove resources of type string\n             * @returns services.MutateExperimentsResponse\n             */\n            remove: async (experiments, options) => {\n                const ops = this.buildOperations(\"remove\", experiments);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"ExperimentService.mutateExperiments\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateExperiments(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/ExperimentService#endexperiment\n             */\n            endExperiment: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"ExperimentService.EndExperiment\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.endExperiment(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/ExperimentService#listexperimentasyncerrors\n             */\n            listExperimentAsyncErrors: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"ExperimentService.ListExperimentAsyncErrors\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.listExperimentAsyncErrors(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/ExperimentService#graduateexperiment\n             */\n            graduateExperiment: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"ExperimentService.GraduateExperiment\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.graduateExperiment(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/ExperimentService#scheduleexperiment\n             */\n            scheduleExperiment: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"ExperimentService.ScheduleExperiment\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.scheduleExperiment(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/ExperimentService#promoteexperiment\n             */\n            promoteExperiment: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"ExperimentService.PromoteExperiment\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.promoteExperiment(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/KeywordPlanAdGroupKeywordService\n     */\n    get keywordPlanAdGroupKeywords() {\n        const service = this.loadService(\"KeywordPlanAdGroupKeywordServiceClient\");\n        return {\n            /**\n             * @description create resources of type resources.IKeywordPlanAdGroupKeyword\n             * @returns services.MutateKeywordPlanAdGroupKeywordsResponse\n             */\n            create: async (keywordPlanAdGroupKeywords, options) => {\n                const ops = this.buildOperations(\"create\", keywordPlanAdGroupKeywords);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"KeywordPlanAdGroupKeywordService.mutateKeywordPlanAdGroupKeywords\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateKeywordPlanAdGroupKeywords(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description update resources of type resources.IKeywordPlanAdGroupKeyword\n             * @returns services.MutateKeywordPlanAdGroupKeywordsResponse\n             */\n            update: async (keywordPlanAdGroupKeywords, options) => {\n                const ops = this.buildOperations(\"update\", keywordPlanAdGroupKeywords, \n                // @ts-expect-error Static class type here is fine\n                index_1.resources.KeywordPlanAdGroupKeyword);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"KeywordPlanAdGroupKeywordService.mutateKeywordPlanAdGroupKeywords\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateKeywordPlanAdGroupKeywords(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description remove resources of type string\n             * @returns services.MutateKeywordPlanAdGroupKeywordsResponse\n             */\n            remove: async (keywordPlanAdGroupKeywords, options) => {\n                const ops = this.buildOperations(\"remove\", keywordPlanAdGroupKeywords);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"KeywordPlanAdGroupKeywordService.mutateKeywordPlanAdGroupKeywords\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateKeywordPlanAdGroupKeywords(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/KeywordPlanAdGroupService\n     */\n    get keywordPlanAdGroups() {\n        const service = this.loadService(\"KeywordPlanAdGroupServiceClient\");\n        return {\n            /**\n             * @description create resources of type resources.IKeywordPlanAdGroup\n             * @returns services.MutateKeywordPlanAdGroupsResponse\n             */\n            create: async (keywordPlanAdGroups, options) => {\n                const ops = this.buildOperations(\"create\", keywordPlanAdGroups);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"KeywordPlanAdGroupService.mutateKeywordPlanAdGroups\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateKeywordPlanAdGroups(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description update resources of type resources.IKeywordPlanAdGroup\n             * @returns services.MutateKeywordPlanAdGroupsResponse\n             */\n            update: async (keywordPlanAdGroups, options) => {\n                const ops = this.buildOperations(\"update\", keywordPlanAdGroups, \n                // @ts-expect-error Static class type here is fine\n                index_1.resources.KeywordPlanAdGroup);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"KeywordPlanAdGroupService.mutateKeywordPlanAdGroups\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateKeywordPlanAdGroups(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description remove resources of type string\n             * @returns services.MutateKeywordPlanAdGroupsResponse\n             */\n            remove: async (keywordPlanAdGroups, options) => {\n                const ops = this.buildOperations(\"remove\", keywordPlanAdGroups);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"KeywordPlanAdGroupService.mutateKeywordPlanAdGroups\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateKeywordPlanAdGroups(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/KeywordPlanCampaignKeywordService\n     */\n    get keywordPlanCampaignKeywords() {\n        const service = this.loadService(\"KeywordPlanCampaignKeywordServiceClient\");\n        return {\n            /**\n             * @description create resources of type resources.IKeywordPlanCampaignKeyword\n             * @returns services.MutateKeywordPlanCampaignKeywordsResponse\n             */\n            create: async (keywordPlanCampaignKeywords, options) => {\n                const ops = this.buildOperations(\"create\", keywordPlanCampaignKeywords);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"KeywordPlanCampaignKeywordService.mutateKeywordPlanCampaignKeywords\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateKeywordPlanCampaignKeywords(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description update resources of type resources.IKeywordPlanCampaignKeyword\n             * @returns services.MutateKeywordPlanCampaignKeywordsResponse\n             */\n            update: async (keywordPlanCampaignKeywords, options) => {\n                const ops = this.buildOperations(\"update\", keywordPlanCampaignKeywords, \n                // @ts-expect-error Static class type here is fine\n                index_1.resources.KeywordPlanCampaignKeyword);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"KeywordPlanCampaignKeywordService.mutateKeywordPlanCampaignKeywords\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateKeywordPlanCampaignKeywords(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description remove resources of type string\n             * @returns services.MutateKeywordPlanCampaignKeywordsResponse\n             */\n            remove: async (keywordPlanCampaignKeywords, options) => {\n                const ops = this.buildOperations(\"remove\", keywordPlanCampaignKeywords);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"KeywordPlanCampaignKeywordService.mutateKeywordPlanCampaignKeywords\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateKeywordPlanCampaignKeywords(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/KeywordPlanCampaignService\n     */\n    get keywordPlanCampaigns() {\n        const service = this.loadService(\"KeywordPlanCampaignServiceClient\");\n        return {\n            /**\n             * @description create resources of type resources.IKeywordPlanCampaign\n             * @returns services.MutateKeywordPlanCampaignsResponse\n             */\n            create: async (keywordPlanCampaigns, options) => {\n                const ops = this.buildOperations(\"create\", keywordPlanCampaigns);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"KeywordPlanCampaignService.mutateKeywordPlanCampaigns\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateKeywordPlanCampaigns(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description update resources of type resources.IKeywordPlanCampaign\n             * @returns services.MutateKeywordPlanCampaignsResponse\n             */\n            update: async (keywordPlanCampaigns, options) => {\n                const ops = this.buildOperations(\"update\", keywordPlanCampaigns, \n                // @ts-expect-error Static class type here is fine\n                index_1.resources.KeywordPlanCampaign);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"KeywordPlanCampaignService.mutateKeywordPlanCampaigns\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateKeywordPlanCampaigns(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description remove resources of type string\n             * @returns services.MutateKeywordPlanCampaignsResponse\n             */\n            remove: async (keywordPlanCampaigns, options) => {\n                const ops = this.buildOperations(\"remove\", keywordPlanCampaigns);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"KeywordPlanCampaignService.mutateKeywordPlanCampaigns\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateKeywordPlanCampaigns(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/KeywordPlanService\n     */\n    get keywordPlans() {\n        const service = this.loadService(\"KeywordPlanServiceClient\");\n        return {\n            /**\n             * @description create resources of type resources.IKeywordPlan\n             * @returns services.MutateKeywordPlansResponse\n             */\n            create: async (keywordPlans, options) => {\n                const ops = this.buildOperations(\"create\", keywordPlans);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"KeywordPlanService.mutateKeywordPlans\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateKeywordPlans(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description update resources of type resources.IKeywordPlan\n             * @returns services.MutateKeywordPlansResponse\n             */\n            update: async (keywordPlans, options) => {\n                const ops = this.buildOperations(\"update\", keywordPlans, \n                // @ts-expect-error Static class type here is fine\n                index_1.resources.KeywordPlan);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"KeywordPlanService.mutateKeywordPlans\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateKeywordPlans(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description remove resources of type string\n             * @returns services.MutateKeywordPlansResponse\n             */\n            remove: async (keywordPlans, options) => {\n                const ops = this.buildOperations(\"remove\", keywordPlans);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"KeywordPlanService.mutateKeywordPlans\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateKeywordPlans(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/LabelService\n     */\n    get labels() {\n        const service = this.loadService(\"LabelServiceClient\");\n        return {\n            /**\n             * @description create resources of type resources.ILabel\n             * @returns services.MutateLabelsResponse\n             */\n            create: async (labels, options) => {\n                const ops = this.buildOperations(\"create\", labels);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"LabelService.mutateLabels\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateLabels(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description update resources of type resources.ILabel\n             * @returns services.MutateLabelsResponse\n             */\n            update: async (labels, options) => {\n                const ops = this.buildOperations(\"update\", labels, \n                // @ts-expect-error Static class type here is fine\n                index_1.resources.Label);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"LabelService.mutateLabels\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateLabels(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description remove resources of type string\n             * @returns services.MutateLabelsResponse\n             */\n            remove: async (labels, options) => {\n                const ops = this.buildOperations(\"remove\", labels);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"LabelService.mutateLabels\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateLabels(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/RecommendationSubscriptionService\n     */\n    get recommendationSubscriptions() {\n        const service = this.loadService(\"RecommendationSubscriptionServiceClient\");\n        return {\n            /**\n             * @description create resources of type resources.IRecommendationSubscription\n             * @returns services.MutateRecommendationSubscriptionResponse\n             */\n            create: async (recommendationSubscriptions, options) => {\n                const ops = this.buildOperations(\"create\", recommendationSubscriptions);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"RecommendationSubscriptionService.mutateRecommendationSubscription\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateRecommendationSubscription(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description update resources of type resources.IRecommendationSubscription\n             * @returns services.MutateRecommendationSubscriptionResponse\n             */\n            update: async (recommendationSubscriptions, options) => {\n                const ops = this.buildOperations(\"update\", recommendationSubscriptions, \n                // @ts-expect-error Static class type here is fine\n                index_1.resources.RecommendationSubscription);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"RecommendationSubscriptionService.mutateRecommendationSubscription\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateRecommendationSubscription(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/RemarketingActionService\n     */\n    get remarketingActions() {\n        const service = this.loadService(\"RemarketingActionServiceClient\");\n        return {\n            /**\n             * @description create resources of type resources.IRemarketingAction\n             * @returns services.MutateRemarketingActionsResponse\n             */\n            create: async (remarketingActions, options) => {\n                const ops = this.buildOperations(\"create\", remarketingActions);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"RemarketingActionService.mutateRemarketingActions\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateRemarketingActions(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description update resources of type resources.IRemarketingAction\n             * @returns services.MutateRemarketingActionsResponse\n             */\n            update: async (remarketingActions, options) => {\n                const ops = this.buildOperations(\"update\", remarketingActions, \n                // @ts-expect-error Static class type here is fine\n                index_1.resources.RemarketingAction);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"RemarketingActionService.mutateRemarketingActions\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateRemarketingActions(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/SharedCriterionService\n     */\n    get sharedCriteria() {\n        const service = this.loadService(\"SharedCriterionServiceClient\");\n        return {\n            /**\n             * @description create resources of type resources.ISharedCriterion\n             * @returns services.MutateSharedCriteriaResponse\n             */\n            create: async (sharedCriteria, options) => {\n                const ops = this.buildOperations(\"create\", sharedCriteria);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"SharedCriterionService.mutateSharedCriteria\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateSharedCriteria(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description remove resources of type string\n             * @returns services.MutateSharedCriteriaResponse\n             */\n            remove: async (sharedCriteria, options) => {\n                const ops = this.buildOperations(\"remove\", sharedCriteria);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"SharedCriterionService.mutateSharedCriteria\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateSharedCriteria(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/SharedSetService\n     */\n    get sharedSets() {\n        const service = this.loadService(\"SharedSetServiceClient\");\n        return {\n            /**\n             * @description create resources of type resources.ISharedSet\n             * @returns services.MutateSharedSetsResponse\n             */\n            create: async (sharedSets, options) => {\n                const ops = this.buildOperations(\"create\", sharedSets);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"SharedSetService.mutateSharedSets\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateSharedSets(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description update resources of type resources.ISharedSet\n             * @returns services.MutateSharedSetsResponse\n             */\n            update: async (sharedSets, options) => {\n                const ops = this.buildOperations(\"update\", sharedSets, \n                // @ts-expect-error Static class type here is fine\n                index_1.resources.SharedSet);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"SharedSetService.mutateSharedSets\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateSharedSets(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description remove resources of type string\n             * @returns services.MutateSharedSetsResponse\n             */\n            remove: async (sharedSets, options) => {\n                const ops = this.buildOperations(\"remove\", sharedSets);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"SharedSetService.mutateSharedSets\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateSharedSets(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/SmartCampaignSettingService\n     */\n    get smartCampaignSettings() {\n        const service = this.loadService(\"SmartCampaignSettingServiceClient\");\n        return {\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/SmartCampaignSettingService#getsmartcampaignstatus\n             */\n            getSmartCampaignStatus: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"SmartCampaignSettingService.GetSmartCampaignStatus\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.getSmartCampaignStatus(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description update resources of type resources.ISmartCampaignSetting\n             * @returns services.MutateSmartCampaignSettingsResponse\n             */\n            update: async (smartCampaignSettings, options) => {\n                const ops = this.buildOperations(\"update\", smartCampaignSettings, \n                // @ts-expect-error Static class type here is fine\n                index_1.resources.SmartCampaignSetting);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"SmartCampaignSettingService.mutateSmartCampaignSettings\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateSmartCampaignSettings(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/UserListService\n     */\n    get userLists() {\n        const service = this.loadService(\"UserListServiceClient\");\n        return {\n            /**\n             * @description create resources of type resources.IUserList\n             * @returns services.MutateUserListsResponse\n             */\n            create: async (userLists, options) => {\n                const ops = this.buildOperations(\"create\", userLists);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"UserListService.mutateUserLists\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateUserLists(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description update resources of type resources.IUserList\n             * @returns services.MutateUserListsResponse\n             */\n            update: async (userLists, options) => {\n                const ops = this.buildOperations(\"update\", userLists, \n                // @ts-expect-error Static class type here is fine\n                index_1.resources.UserList);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"UserListService.mutateUserLists\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateUserLists(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description remove resources of type string\n             * @returns services.MutateUserListsResponse\n             */\n            remove: async (userLists, options) => {\n                const ops = this.buildOperations(\"remove\", userLists);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"UserListService.mutateUserLists\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateUserLists(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/BillingSetupService\n     */\n    get billingSetups() {\n        const service = this.loadService(\"BillingSetupServiceClient\");\n        return {\n            /**\n             * @description create resources of type resources.IBillingSetup\n             * @returns services.MutateBillingSetupResponse\n             */\n            create: async (billingSetups, options) => {\n                const ops = this.buildOperations(\"create\", billingSetups);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"BillingSetupService.mutateBillingSetup\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateBillingSetup(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description remove resources of type string\n             * @returns services.MutateBillingSetupResponse\n             */\n            remove: async (billingSetups, options) => {\n                const ops = this.buildOperations(\"remove\", billingSetups);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"BillingSetupService.mutateBillingSetup\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateBillingSetup(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/BrandSuggestionService\n     */\n    get brandSuggestions() {\n        const service = this.loadService(\"BrandSuggestionServiceClient\");\n        return {\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/BrandSuggestionService#suggestbrands\n             */\n            suggestBrands: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"BrandSuggestionService.SuggestBrands\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.suggestBrands(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/CampaignLifecycleGoalService\n     */\n    get campaignLifecycleGoals() {\n        const service = this.loadService(\"CampaignLifecycleGoalServiceClient\");\n        return {\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/CampaignLifecycleGoalService#configurecampaignlifecyclegoals\n             */\n            configureCampaignLifecycleGoals: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CampaignLifecycleGoalService.ConfigureCampaignLifecycleGoals\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.configureCampaignLifecycleGoals(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/ContentCreatorInsightsService\n     */\n    get contentCreatorInsights() {\n        const service = this.loadService(\"ContentCreatorInsightsServiceClient\");\n        return {\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/ContentCreatorInsightsService#generatecreatorinsights\n             */\n            generateCreatorInsights: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"ContentCreatorInsightsService.GenerateCreatorInsights\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.generateCreatorInsights(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/ContentCreatorInsightsService#generatetrendinginsights\n             */\n            generateTrendingInsights: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"ContentCreatorInsightsService.GenerateTrendingInsights\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.generateTrendingInsights(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/ConversionAdjustmentUploadService\n     */\n    get conversionAdjustmentUploads() {\n        const service = this.loadService(\"ConversionAdjustmentUploadServiceClient\");\n        return {\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/ConversionAdjustmentUploadService#uploadconversionadjustments\n             */\n            uploadConversionAdjustments: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"ConversionAdjustmentUploadService.UploadConversionAdjustments\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.uploadConversionAdjustments(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/ConversionUploadService\n     */\n    get conversionUploads() {\n        const service = this.loadService(\"ConversionUploadServiceClient\");\n        return {\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/ConversionUploadService#uploadclickconversions\n             */\n            uploadClickConversions: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"ConversionUploadService.UploadClickConversions\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.uploadClickConversions(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/ConversionUploadService#uploadcallconversions\n             */\n            uploadCallConversions: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"ConversionUploadService.UploadCallConversions\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.uploadCallConversions(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/CustomAudienceService\n     */\n    get customAudiences() {\n        const service = this.loadService(\"CustomAudienceServiceClient\");\n        return {\n            /**\n             * @description create resources of type resources.ICustomAudience\n             * @returns services.MutateCustomAudiencesResponse\n             */\n            create: async (customAudiences, options) => {\n                const ops = this.buildOperations(\"create\", customAudiences);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CustomAudienceService.mutateCustomAudiences\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateCustomAudiences(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description update resources of type resources.ICustomAudience\n             * @returns services.MutateCustomAudiencesResponse\n             */\n            update: async (customAudiences, options) => {\n                const ops = this.buildOperations(\"update\", customAudiences, \n                // @ts-expect-error Static class type here is fine\n                index_1.resources.CustomAudience);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CustomAudienceService.mutateCustomAudiences\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateCustomAudiences(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description remove resources of type string\n             * @returns services.MutateCustomAudiencesResponse\n             */\n            remove: async (customAudiences, options) => {\n                const ops = this.buildOperations(\"remove\", customAudiences);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CustomAudienceService.mutateCustomAudiences\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateCustomAudiences(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/CustomInterestService\n     */\n    get customInterests() {\n        const service = this.loadService(\"CustomInterestServiceClient\");\n        return {\n            /**\n             * @description create resources of type resources.ICustomInterest\n             * @returns services.MutateCustomInterestsResponse\n             */\n            create: async (customInterests, options) => {\n                const ops = this.buildOperations(\"create\", customInterests);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CustomInterestService.mutateCustomInterests\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateCustomInterests(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description update resources of type resources.ICustomInterest\n             * @returns services.MutateCustomInterestsResponse\n             */\n            update: async (customInterests, options) => {\n                const ops = this.buildOperations(\"update\", customInterests, \n                // @ts-expect-error Static class type here is fine\n                index_1.resources.CustomInterest);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CustomInterestService.mutateCustomInterests\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateCustomInterests(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/CustomerAssetSetService\n     */\n    get customerAssetSets() {\n        const service = this.loadService(\"CustomerAssetSetServiceClient\");\n        return {\n            /**\n             * @description create resources of type resources.ICustomerAssetSet\n             * @returns services.MutateCustomerAssetSetsResponse\n             */\n            create: async (customerAssetSets, options) => {\n                const ops = this.buildOperations(\"create\", customerAssetSets);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CustomerAssetSetService.mutateCustomerAssetSets\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateCustomerAssetSets(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description remove resources of type string\n             * @returns services.MutateCustomerAssetSetsResponse\n             */\n            remove: async (customerAssetSets, options) => {\n                const ops = this.buildOperations(\"remove\", customerAssetSets);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CustomerAssetSetService.mutateCustomerAssetSets\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateCustomerAssetSets(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/CustomerClientLinkService\n     */\n    get customerClientLinks() {\n        const service = this.loadService(\"CustomerClientLinkServiceClient\");\n        return {\n            /**\n             * @description create resources of type resources.ICustomerClientLink\n             * @returns services.MutateCustomerClientLinkResponse\n             */\n            create: async (customerClientLinks, options) => {\n                const ops = this.buildOperations(\"create\", customerClientLinks);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CustomerClientLinkService.mutateCustomerClientLink\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateCustomerClientLink(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description update resources of type resources.ICustomerClientLink\n             * @returns services.MutateCustomerClientLinkResponse\n             */\n            update: async (customerClientLinks, options) => {\n                const ops = this.buildOperations(\"update\", customerClientLinks, \n                // @ts-expect-error Static class type here is fine\n                index_1.resources.CustomerClientLink);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CustomerClientLinkService.mutateCustomerClientLink\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateCustomerClientLink(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/CustomerLifecycleGoalService\n     */\n    get customerLifecycleGoals() {\n        const service = this.loadService(\"CustomerLifecycleGoalServiceClient\");\n        return {\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/CustomerLifecycleGoalService#configurecustomerlifecyclegoals\n             */\n            configureCustomerLifecycleGoals: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CustomerLifecycleGoalService.ConfigureCustomerLifecycleGoals\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.configureCustomerLifecycleGoals(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/CustomerManagerLinkService\n     */\n    get customerManagerLinks() {\n        const service = this.loadService(\"CustomerManagerLinkServiceClient\");\n        return {\n            /**\n             * @description update resources of type resources.ICustomerManagerLink\n             * @returns services.MutateCustomerManagerLinkResponse\n             */\n            update: async (customerManagerLinks, options) => {\n                const ops = this.buildOperations(\"update\", customerManagerLinks, \n                // @ts-expect-error Static class type here is fine\n                index_1.resources.CustomerManagerLink);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CustomerManagerLinkService.mutateCustomerManagerLink\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateCustomerManagerLink(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/CustomerManagerLinkService#movemanagerlink\n             */\n            moveManagerLink: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CustomerManagerLinkService.MoveManagerLink\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.moveManagerLink(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/CustomerSkAdNetworkConversionValueSchemaService\n     */\n    get customerSkAdNetworkConversionValueSchemas() {\n        const service = this.loadService(\"CustomerSkAdNetworkConversionValueSchemaServiceClient\");\n        return {\n            /**\n             * @description update resources of type resources.ICustomerSkAdNetworkConversionValueSchema\n             * @returns services.MutateCustomerSkAdNetworkConversionValueSchemaResponse\n             */\n            update: async (customerSkAdNetworkConversionValueSchemas, options) => {\n                const ops = this.buildOperations(\"update\", customerSkAdNetworkConversionValueSchemas, \n                // @ts-expect-error Static class type here is fine\n                index_1.resources.CustomerSkAdNetworkConversionValueSchema);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CustomerSkAdNetworkConversionValueSchemaService.mutateCustomerSkAdNetworkConversionValueSchema\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateCustomerSkAdNetworkConversionValueSchema(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/CustomerUserAccessInvitationService\n     */\n    get customerUserAccessInvitations() {\n        const service = this.loadService(\"CustomerUserAccessInvitationServiceClient\");\n        return {\n            /**\n             * @description create resources of type resources.ICustomerUserAccessInvitation\n             * @returns services.MutateCustomerUserAccessInvitationResponse\n             */\n            create: async (customerUserAccessInvitations, options) => {\n                const ops = this.buildOperations(\"create\", customerUserAccessInvitations);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CustomerUserAccessInvitationService.mutateCustomerUserAccessInvitation\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateCustomerUserAccessInvitation(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description remove resources of type string\n             * @returns services.MutateCustomerUserAccessInvitationResponse\n             */\n            remove: async (customerUserAccessInvitations, options) => {\n                const ops = this.buildOperations(\"remove\", customerUserAccessInvitations);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CustomerUserAccessInvitationService.mutateCustomerUserAccessInvitation\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateCustomerUserAccessInvitation(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/CustomerUserAccessService\n     */\n    get customerUserAccesses() {\n        const service = this.loadService(\"CustomerUserAccessServiceClient\");\n        return {\n            /**\n             * @description update resources of type resources.ICustomerUserAccess\n             * @returns services.MutateCustomerUserAccessResponse\n             */\n            update: async (customerUserAccesses, options) => {\n                const ops = this.buildOperations(\"update\", customerUserAccesses, \n                // @ts-expect-error Static class type here is fine\n                index_1.resources.CustomerUserAccess);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CustomerUserAccessService.mutateCustomerUserAccess\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateCustomerUserAccess(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description remove resources of type string\n             * @returns services.MutateCustomerUserAccessResponse\n             */\n            remove: async (customerUserAccesses, options) => {\n                const ops = this.buildOperations(\"remove\", customerUserAccesses);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"CustomerUserAccessService.mutateCustomerUserAccess\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateCustomerUserAccess(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/DataLinkService\n     */\n    get dataLinks() {\n        const service = this.loadService(\"DataLinkServiceClient\");\n        return {\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/DataLinkService#createdatalink\n             */\n            createDataLink: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"DataLinkService.CreateDataLink\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.createDataLink(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/DataLinkService#removedatalink\n             */\n            removeDataLink: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"DataLinkService.RemoveDataLink\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.removeDataLink(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/DataLinkService#updatedatalink\n             */\n            updateDataLink: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"DataLinkService.UpdateDataLink\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.updateDataLink(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/GeoTargetConstantService\n     */\n    get geoTargetConstants() {\n        const service = this.loadService(\"GeoTargetConstantServiceClient\");\n        return {\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/GeoTargetConstantService#suggestgeotargetconstants\n             */\n            suggestGeoTargetConstants: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"GeoTargetConstantService.SuggestGeoTargetConstants\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.suggestGeoTargetConstants(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/IdentityVerificationService\n     */\n    get identityVerifications() {\n        const service = this.loadService(\"IdentityVerificationServiceClient\");\n        return {\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/IdentityVerificationService#startidentityverification\n             */\n            startIdentityVerification: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"IdentityVerificationService.StartIdentityVerification\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.startIdentityVerification(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/IdentityVerificationService#getidentityverification\n             */\n            getIdentityVerification: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"IdentityVerificationService.GetIdentityVerification\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.getIdentityVerification(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/InvoiceService\n     */\n    get invoices() {\n        const service = this.loadService(\"InvoiceServiceClient\");\n        return {\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/InvoiceService#listinvoices\n             */\n            listInvoices: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"InvoiceService.ListInvoices\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.listInvoices(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/KeywordPlanIdeaService\n     */\n    get keywordPlanIdeas() {\n        const service = this.loadService(\"KeywordPlanIdeaServiceClient\");\n        return {\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/KeywordPlanIdeaService#generatekeywordideas\n             */\n            generateKeywordIdeas: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"KeywordPlanIdeaService.GenerateKeywordIdeas\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.generateKeywordIdeas(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/KeywordPlanIdeaService#generatekeywordhistoricalmetrics\n             */\n            generateKeywordHistoricalMetrics: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"KeywordPlanIdeaService.GenerateKeywordHistoricalMetrics\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.generateKeywordHistoricalMetrics(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/KeywordPlanIdeaService#generateadgroupthemes\n             */\n            generateAdGroupThemes: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"KeywordPlanIdeaService.GenerateAdGroupThemes\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.generateAdGroupThemes(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/KeywordPlanIdeaService#generatekeywordforecastmetrics\n             */\n            generateKeywordForecastMetrics: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"KeywordPlanIdeaService.GenerateKeywordForecastMetrics\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.generateKeywordForecastMetrics(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/KeywordThemeConstantService\n     */\n    get keywordThemeConstants() {\n        const service = this.loadService(\"KeywordThemeConstantServiceClient\");\n        return {\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/KeywordThemeConstantService#suggestkeywordthemeconstants\n             */\n            suggestKeywordThemeConstants: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"KeywordThemeConstantService.SuggestKeywordThemeConstants\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.suggestKeywordThemeConstants(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/LocalServicesLeadService\n     */\n    get localsLeadServices() {\n        const service = this.loadService(\"LocalServicesLeadServiceClient\");\n        return {\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/LocalServicesLeadService#appendleadconversation\n             */\n            appendLeadConversation: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"LocalServicesLeadService.AppendLeadConversation\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.appendLeadConversation(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/LocalServicesLeadService#provideleadfeedback\n             */\n            provideLeadFeedback: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"LocalServicesLeadService.ProvideLeadFeedback\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.provideLeadFeedback(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/OfflineUserDataJobService\n     */\n    get offlineUserDataJobs() {\n        const service = this.loadService(\"OfflineUserDataJobServiceClient\");\n        return {\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/OfflineUserDataJobService#createofflineuserdatajob\n             */\n            createOfflineUserDataJob: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"OfflineUserDataJobService.CreateOfflineUserDataJob\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.createOfflineUserDataJob(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/OfflineUserDataJobService#addofflineuserdatajoboperations\n             */\n            addOfflineUserDataJobOperations: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"OfflineUserDataJobService.AddOfflineUserDataJobOperations\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.addOfflineUserDataJobOperations(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/OfflineUserDataJobService#runofflineuserdatajob\n             */\n            runOfflineUserDataJob: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"OfflineUserDataJobService.RunOfflineUserDataJob\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.runOfflineUserDataJob(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/PaymentsAccountService\n     */\n    get paymentsAccounts() {\n        const service = this.loadService(\"PaymentsAccountServiceClient\");\n        return {\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/PaymentsAccountService#listpaymentsaccounts\n             */\n            listPaymentsAccounts: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"PaymentsAccountService.ListPaymentsAccounts\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.listPaymentsAccounts(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/ProductLinkInvitationService\n     */\n    get productLinkInvitations() {\n        const service = this.loadService(\"ProductLinkInvitationServiceClient\");\n        return {\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/ProductLinkInvitationService#createproductlinkinvitation\n             */\n            createProductLinkInvitation: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"ProductLinkInvitationService.CreateProductLinkInvitation\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.createProductLinkInvitation(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/ProductLinkInvitationService#updateproductlinkinvitation\n             */\n            updateProductLinkInvitation: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"ProductLinkInvitationService.UpdateProductLinkInvitation\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.updateProductLinkInvitation(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/ProductLinkInvitationService#removeproductlinkinvitation\n             */\n            removeProductLinkInvitation: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"ProductLinkInvitationService.RemoveProductLinkInvitation\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.removeProductLinkInvitation(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/ProductLinkService\n     */\n    get productLinks() {\n        const service = this.loadService(\"ProductLinkServiceClient\");\n        return {\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/ProductLinkService#createproductlink\n             */\n            createProductLink: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"ProductLinkService.CreateProductLink\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.createProductLink(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/ProductLinkService#removeproductlink\n             */\n            removeProductLink: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"ProductLinkService.RemoveProductLink\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.removeProductLink(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/ReachPlanService\n     */\n    get reachPlans() {\n        const service = this.loadService(\"ReachPlanServiceClient\");\n        return {\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/ReachPlanService#generateconversionrates\n             */\n            generateConversionRates: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"ReachPlanService.GenerateConversionRates\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.generateConversionRates(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/ReachPlanService#listplannablelocations\n             */\n            listPlannableLocations: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"ReachPlanService.ListPlannableLocations\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.listPlannableLocations(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/ReachPlanService#listplannableproducts\n             */\n            listPlannableProducts: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"ReachPlanService.ListPlannableProducts\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.listPlannableProducts(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/ReachPlanService#generatereachforecast\n             */\n            generateReachForecast: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"ReachPlanService.GenerateReachForecast\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.generateReachForecast(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/ReachPlanService#listplannableuserlists\n             */\n            listPlannableUserLists: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"ReachPlanService.ListPlannableUserLists\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.listPlannableUserLists(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/RecommendationService\n     */\n    get recommendations() {\n        const service = this.loadService(\"RecommendationServiceClient\");\n        return {\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/RecommendationService#applyrecommendation\n             */\n            applyRecommendation: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"RecommendationService.ApplyRecommendation\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.applyRecommendation(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/RecommendationService#dismissrecommendation\n             */\n            dismissRecommendation: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"RecommendationService.DismissRecommendation\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.dismissRecommendation(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/RecommendationService#generaterecommendations\n             */\n            generateRecommendations: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"RecommendationService.GenerateRecommendations\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.generateRecommendations(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/ShareablePreviewService\n     */\n    get shareablePreviews() {\n        const service = this.loadService(\"ShareablePreviewServiceClient\");\n        return {\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/ShareablePreviewService#generateshareablepreviews\n             */\n            generateShareablePreviews: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"ShareablePreviewService.GenerateShareablePreviews\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.generateShareablePreviews(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/SmartCampaignSuggestService\n     */\n    get smartCampaignSuggests() {\n        const service = this.loadService(\"SmartCampaignSuggestServiceClient\");\n        return {\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/SmartCampaignSuggestService#suggestsmartcampaignbudgetoptions\n             */\n            suggestSmartCampaignBudgetOptions: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"SmartCampaignSuggestService.SuggestSmartCampaignBudgetOptions\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.suggestSmartCampaignBudgetOptions(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/SmartCampaignSuggestService#suggestsmartcampaignad\n             */\n            suggestSmartCampaignAd: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"SmartCampaignSuggestService.SuggestSmartCampaignAd\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.suggestSmartCampaignAd(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/SmartCampaignSuggestService#suggestkeywordthemes\n             */\n            suggestKeywordThemes: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"SmartCampaignSuggestService.SuggestKeywordThemes\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.suggestKeywordThemes(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/ThirdPartyAppAnalyticsLinkService\n     */\n    get thirdPartyAppAnalyticsLinks() {\n        const service = this.loadService(\"ThirdPartyAppAnalyticsLinkServiceClient\");\n        return {\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/ThirdPartyAppAnalyticsLinkService#regenerateshareablelinkid\n             */\n            regenerateShareableLinkId: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"ThirdPartyAppAnalyticsLinkService.RegenerateShareableLinkId\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.regenerateShareableLinkId(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/TravelAssetSuggestionService\n     */\n    get travelAssetSuggestions() {\n        const service = this.loadService(\"TravelAssetSuggestionServiceClient\");\n        return {\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/TravelAssetSuggestionService#suggesttravelassets\n             */\n            suggestTravelAssets: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"TravelAssetSuggestionService.SuggestTravelAssets\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.suggestTravelAssets(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/UserDataService\n     */\n    get userData() {\n        const service = this.loadService(\"UserDataServiceClient\");\n        return {\n            /**\n             * @link https://developers.google.com/google-ads/api/reference/rpc/v20/UserDataService#uploaduserdata\n             */\n            uploadUserData: async (request) => {\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"UserDataService.UploadUserData\",\n                    requestOptions: request,\n                };\n                if (this.hooks.onServiceStart) {\n                    const serviceCancellation = { cancelled: false };\n                    await this.hooks.onServiceStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            serviceCancellation.cancelled = true;\n                            serviceCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (serviceCancellation.cancelled) {\n                        return serviceCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.uploadUserData(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onServiceEnd) {\n                        const serviceResolution = { resolved: false };\n                        await this.hooks.onServiceEnd({\n                            ...baseHookArguments,\n                            response,\n                            resolve: (res) => {\n                                serviceResolution.resolved = true;\n                                serviceResolution.res = res;\n                            },\n                        });\n                        if (serviceResolution.resolved) {\n                            return serviceResolution.res;\n                        }\n                    }\n                    return response;\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onServiceError) {\n                        await this.hooks.onServiceError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n    /**\n     * @link https://developers.google.com/google-ads/api/reference/rpc/v20/UserListCustomerTypeService\n     */\n    get userListCustomerTypes() {\n        const service = this.loadService(\"UserListCustomerTypeServiceClient\");\n        return {\n            /**\n             * @description create resources of type resources.IUserListCustomerType\n             * @returns services.MutateUserListCustomerTypesResponse\n             */\n            create: async (userListCustomerTypes, options) => {\n                const ops = this.buildOperations(\"create\", userListCustomerTypes);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"UserListCustomerTypeService.mutateUserListCustomerTypes\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateUserListCustomerTypes(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n            /**\n             * @description remove resources of type string\n             * @returns services.MutateUserListCustomerTypesResponse\n             */\n            remove: async (userListCustomerTypes, options) => {\n                const ops = this.buildOperations(\"remove\", userListCustomerTypes);\n                const request = this.buildRequest(ops, options);\n                const baseHookArguments = {\n                    credentials: this.credentials,\n                    method: \"UserListCustomerTypeService.mutateUserListCustomerTypes\",\n                    mutation: request,\n                    isServiceCall: true,\n                };\n                if (this.hooks.onMutationStart) {\n                    const mutationCancellation = { cancelled: false };\n                    await this.hooks.onMutationStart({\n                        ...baseHookArguments,\n                        cancel: (res) => {\n                            mutationCancellation.cancelled = true;\n                            mutationCancellation.res = res;\n                        },\n                        editOptions: (options) => {\n                            Object.entries(options).forEach(([key, val]) => {\n                                // @ts-expect-error Index with key type is fine\n                                request[key] = val;\n                            });\n                        },\n                    });\n                    if (mutationCancellation.cancelled) {\n                        return mutationCancellation.res;\n                    }\n                }\n                try {\n                    // @ts-expect-error Response is an array type\n                    const [response] = await service.mutateUserListCustomerTypes(request, {\n                        // @ts-expect-error This arg doesn't exist in the type definitions\n                        otherArgs: {\n                            headers: this.callHeaders,\n                        },\n                    });\n                    if (this.hooks.onMutationEnd) {\n                        const mutationResolution = { resolved: false };\n                        await this.hooks.onMutationEnd({\n                            ...baseHookArguments,\n                            response: this.decodePartialFailureError(response),\n                            resolve: (res) => {\n                                mutationResolution.resolved = true;\n                                mutationResolution.res = res;\n                            },\n                        });\n                        if (mutationResolution.resolved) {\n                            return mutationResolution.res;\n                        }\n                    }\n                    return this.decodePartialFailureError(response);\n                }\n                catch (err) {\n                    const googleAdsError = this.getGoogleAdsError(err);\n                    if (this.hooks.onMutationError) {\n                        await this.hooks.onMutationError({\n                            ...baseHookArguments,\n                            error: googleAdsError,\n                        });\n                    }\n                    throw googleAdsError;\n                }\n            },\n        };\n    }\n}\nexports.default = ServiceFactory;\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}}]
}