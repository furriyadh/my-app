{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/DELL/my-site/src/app/api/register/route.ts"],"sourcesContent":["// my-app/src/app/api/register/route.ts\r\n\r\nimport { NextResponse } from 'next/server';\r\n\r\n// هذه دالة وهمية لإنشاء مستخدم في قاعدة البيانات\r\n// يجب استبدالها بمنطقك الفعلي لإنشاء المستخدم\r\nasync function createUserInDatabase(email: string, password: string) {\r\n  // هنا يمكنك إضافة منطقك لإنشاء المستخدم في قاعدة البيانات\r\n  // على سبيل المثال، باستخدام Prisma, Mongoose, أو أي ORM آخر\r\n  console.log(`Creating user: ${email}`);\r\n  // افترض أننا نرجع كائن مستخدم مع خاصية تشير إلى ما إذا كان جديدًا\r\n  return { id: 'user123', email, isNewUser: true, hasCompletedBusinessSetup: false };\r\n}\r\n\r\n// هذه دالة وهمية لتسجيل الدخول بعد إنشاء الحساب\r\n// يجب استبدالها بمنطقك الفعلي لتسجيل الدخول وإنشاء جلسة للمستخدم\r\nasync function signInUser(userId: string) {\r\n  console.log(`Signing in user: ${userId}`);\r\n  // هنا يمكنك إنشاء جلسة للمستخدم (مثل استخدام NextAuth.js أو JWT)\r\n  // هذا الجزء يعتمد بشكل كبير على طريقة المصادقة الخاصة بك\r\n  return { success: true };\r\n}\r\n\r\nexport async function POST(request: Request) {\r\n  try {\r\n    const { email, password } = await request.json();\r\n\r\n    // 1. إنشاء المستخدم في قاعدة البيانات\r\n    const user = await createUserInDatabase(email, password);\r\n\r\n    if (!user) {\r\n      return NextResponse.json({ message: 'Failed to create user' }, { status: 400 });\r\n    }\r\n\r\n    // 2. تسجيل الدخول التلقائي للمستخدم بعد الإنشاء\r\n    const signInResult = await signInUser(user.id);\r\n\r\n    if (!signInResult.success) {\r\n      return NextResponse.json({ message: 'Failed to sign in user' }, { status: 500 });\r\n    }\r\n\r\n    // 3. التحقق مما إذا كان المستخدم جديدًا ويحتاج إلى إعدادات العمل\r\n    // يمكنك تخزين هذه الحالة في قاعدة البيانات (مثال: حقل hasCompletedBusinessSetup)\r\n    if (user.isNewUser && !user.hasCompletedBusinessSetup) {\r\n      // إعادة توجيه المستخدم إلى صفحة إعدادات العمل\r\n      return NextResponse.redirect(new URL('/business-creation', request.url), 302);\r\n    }\r\n\r\n    // إذا لم يكن جديدًا أو أكمل الإعدادات، أعد توجيهه إلى لوحة التحكم الافتراضية\r\n    return NextResponse.redirect(new URL('/dashboard', request.url), 302);\r\n\r\n  } catch (error) {\r\n    console.error('Registration error:', error);\r\n    return NextResponse.json({ message: 'Internal server error' }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":"AAAA,uCAAuC;;;;AAEvC;;AAEA,iDAAiD;AACjD,8CAA8C;AAC9C,eAAe,qBAAqB,KAAa,EAAE,QAAgB;IACjE,0DAA0D;IAC1D,4DAA4D;IAC5D,QAAQ,GAAG,CAAC,CAAC,eAAe,EAAE,OAAO;IACrC,kEAAkE;IAClE,OAAO;QAAE,IAAI;QAAW;QAAO,WAAW;QAAM,2BAA2B;IAAM;AACnF;AAEA,gDAAgD;AAChD,iEAAiE;AACjE,eAAe,WAAW,MAAc;IACtC,QAAQ,GAAG,CAAC,CAAC,iBAAiB,EAAE,QAAQ;IACxC,iEAAiE;IACjE,yDAAyD;IACzD,OAAO;QAAE,SAAS;IAAK;AACzB;AAEO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,MAAM,QAAQ,IAAI;QAE9C,sCAAsC;QACtC,MAAM,OAAO,MAAM,qBAAqB,OAAO;QAE/C,uCAAW;;QAEX;QAEA,gDAAgD;QAChD,MAAM,eAAe,MAAM,WAAW,KAAK,EAAE;QAE7C,IAAI,CAAC,aAAa,OAAO,EAAE;YACzB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAAyB,GAAG;gBAAE,QAAQ;YAAI;QAChF;QAEA,iEAAiE;QACjE,iFAAiF;QACjF,IAAI,KAAK,SAAS,IAAI,CAAC,KAAK,yBAAyB,EAAE;YACrD,8CAA8C;YAC9C,OAAO,gIAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,sBAAsB,QAAQ,GAAG,GAAG;QAC3E;QAEA,6EAA6E;QAC7E,OAAO,gIAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,cAAc,QAAQ,GAAG,GAAG;IAEnE,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,uBAAuB;QACrC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC/E;AACF","debugId":null}}]
}