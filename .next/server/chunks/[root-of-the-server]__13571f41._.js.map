{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/DELL/my-site/src/lib/mcc-client.ts"],"sourcesContent":["// src/lib/mcc-client.ts\r\n// عميل MCC مصحح مع Google Ads API methods الصحيحة\r\n\r\n// تكوين عميل Google Ads (آمن من متغيرات البيئة)\r\ninterface GoogleAdsConfig {\r\n  client_id: string;\r\n  client_secret: string;\r\n  refresh_token: string;\r\n  developer_token: string;\r\n  manager_account_id: string;\r\n  login_customer_id?: string;\r\n}\r\n\r\n// واجهة بيانات العميل\r\ninterface CustomerData {\r\n  name: string;\r\n  currency: string;\r\n  timezone: string;\r\n  descriptiveName?: string;\r\n  countryCode?: string;\r\n}\r\n\r\n// واجهة نتيجة إنشاء العميل\r\ninterface CreateCustomerResult {\r\n  success: boolean;\r\n  customerId?: string;\r\n  customerName?: string;\r\n  resourceName?: string;\r\n  error?: string;\r\n  details?: any;\r\n}\r\n\r\n// واجهة بيانات الحملة\r\ninterface CampaignData {\r\n  customerId: string;\r\n  name: string;\r\n  objective: string;\r\n  budgetType: 'daily' | 'total';\r\n  budget: number;\r\n  locations: string[];\r\n  languages: string[];\r\n  keywords: string[];\r\n  headlines: string[];\r\n  descriptions: string[];\r\n  startDate: string;\r\n  endDate?: string;\r\n  deviceTargeting?: string[];\r\n  networkSettings?: {\r\n    search: boolean;\r\n    display: boolean;\r\n    youtube: boolean;\r\n    partners: boolean;\r\n  };\r\n}\r\n\r\n// واجهة نتيجة إنشاء الحملة\r\ninterface CreateCampaignResult {\r\n  success: boolean;\r\n  campaignId?: string;\r\n  campaignName?: string;\r\n  customerId?: string;\r\n  budgetId?: string;\r\n  adGroupId?: string;\r\n  adIds?: string[];\r\n  keywordIds?: string[];\r\n  error?: string;\r\n  details?: any;\r\n}\r\n\r\n// واجهة معلومات العميل\r\ninterface CustomerInfo {\r\n  id: string;\r\n  descriptiveName: string;\r\n  currencyCode: string;\r\n  timeZone: string;\r\n  status: string;\r\n  testAccount: boolean;\r\n  manager: boolean;\r\n}\r\n\r\nclass MCCClient {\r\n  private config: GoogleAdsConfig;\r\n\r\n  constructor() {\r\n    // تحميل التكوين بشكل آمن من متغيرات البيئة\r\n    this.config = this.loadSecureConfig();\r\n    \r\n    // التحقق من وجود جميع المتغيرات المطلوبة\r\n    this.validateConfig();\r\n  }\r\n\r\n  // تحميل التكوين بشكل آمن من متغيرات البيئة المحمية\r\n  private loadSecureConfig(): GoogleAdsConfig {\r\n    return {\r\n      client_id: process.env.GOOGLE_ADS_CLIENT_ID!,\r\n      client_secret: process.env.GOOGLE_ADS_CLIENT_SECRET!,\r\n      refresh_token: process.env.GOOGLE_ADS_REFRESH_TOKEN!,\r\n      developer_token: process.env.GOOGLE_ADS_DEVELOPER_TOKEN!,\r\n      manager_account_id: process.env.GOOGLE_ADS_MANAGER_ACCOUNT_ID!,\r\n      login_customer_id: process.env.GOOGLE_ADS_LOGIN_CUSTOMER_ID,\r\n    };\r\n  }\r\n\r\n  // التحقق من صحة التكوين\r\n  private validateConfig(): void {\r\n    const requiredFields = ['client_id', 'client_secret', 'refresh_token', 'developer_token', 'manager_account_id'];\r\n    \r\n    for (const field of requiredFields) {\r\n      if (!this.config[field as keyof GoogleAdsConfig]) {\r\n        throw new Error(`Missing required Google Ads API configuration: ${field}. Please check your .env file.`);\r\n      }\r\n    }\r\n  }\r\n\r\n  // إنشاء عميل جديد تحت MCC\r\n  async createSubAccount(customerData: CustomerData): Promise<CreateCustomerResult> {\r\n    try {\r\n      console.log('🚀 Creating new sub-account under MCC:', customerData.name);\r\n\r\n      // استخدام fetch API للتعامل مع Google Ads API\r\n      const response = await this.makeGoogleAdsRequest('POST', 'customers', {\r\n        descriptive_name: customerData.descriptiveName || customerData.name,\r\n        currency_code: customerData.currency.toUpperCase(),\r\n        time_zone: customerData.timezone,\r\n        ...(customerData.countryCode && { country_code: customerData.countryCode }),\r\n      });\r\n\r\n      if (response.success && response.data) {\r\n        const newCustomerId = response.data.customer_id;\r\n        \r\n        console.log('✅ Sub-account created successfully:', newCustomerId);\r\n\r\n        // إنشاء رابط الإدارة\r\n        await this.createManagerLink(newCustomerId);\r\n        \r\n        return {\r\n          success: true,\r\n          customerId: newCustomerId,\r\n          customerName: customerData.name,\r\n          resourceName: `customers/${newCustomerId}`,\r\n          details: response.data\r\n        };\r\n      } else {\r\n        throw new Error(response.error || 'Failed to create customer');\r\n      }\r\n\r\n    } catch (error: any) {\r\n      console.error('❌ Error creating sub-account:', error);\r\n      \r\n      return {\r\n        success: false,\r\n        error: error.message || 'Failed to create sub-account',\r\n        details: error\r\n      };\r\n    }\r\n  }\r\n\r\n  // إنشاء رابط الإدارة بين MCC والحساب الفرعي\r\n  private async createManagerLink(customerId: string): Promise<void> {\r\n    try {\r\n      const response = await this.makeGoogleAdsRequest('POST', 'customer-manager-links', {\r\n        client_customer: `customers/${customerId}`,\r\n        manager_customer: `customers/${this.config.manager_account_id}`,\r\n        status: 'ACTIVE',\r\n      });\r\n\r\n      if (response.success) {\r\n        console.log('✅ Manager link created for customer:', customerId);\r\n      }\r\n\r\n    } catch (error) {\r\n      console.warn('⚠️ Warning: Could not create manager link:', error);\r\n    }\r\n  }\r\n\r\n  // إنشاء حملة كاملة مع استراتيجيات Google التلقائية\r\n  async createCampaign(campaignData: CampaignData): Promise<CreateCampaignResult> {\r\n    try {\r\n      console.log('🚀 Creating campaign with Google\\'s automatic bidding strategies:', campaignData.name);\r\n\r\n      // 1. إنشاء الميزانية\r\n      const budgetId = await this.createCampaignBudget(campaignData);\r\n      \r\n      // 2. إنشاء الحملة مع استراتيجية Google التلقائية\r\n      const campaignId = await this.createCampaignEntity(campaignData, budgetId);\r\n      \r\n      // 3. إنشاء مجموعة الإعلانات\r\n      const adGroupId = await this.createAdGroup(campaignId, campaignData);\r\n      \r\n      // 4. إضافة الكلمات المفتاحية\r\n      const keywordIds = await this.addKeywords(adGroupId, campaignData.keywords, campaignData.customerId);\r\n      \r\n      // 5. إنشاء الإعلانات\r\n      const adIds = await this.createAds(adGroupId, campaignData);\r\n      \r\n      // 6. إضافة استهداف المواقع\r\n      await this.addLocationTargeting(campaignId, campaignData.locations, campaignData.customerId);\r\n      \r\n      // 7. إضافة استهداف اللغات\r\n      await this.addLanguageTargeting(campaignId, campaignData.languages, campaignData.customerId);\r\n\r\n      console.log('✅ Campaign created successfully with Google\\'s automatic optimization:', {\r\n        campaignId,\r\n        budgetId,\r\n        adGroupId,\r\n        adIds,\r\n        keywordIds\r\n      });\r\n\r\n      return {\r\n        success: true,\r\n        campaignId,\r\n        campaignName: campaignData.name,\r\n        customerId: campaignData.customerId,\r\n        budgetId,\r\n        adGroupId,\r\n        adIds,\r\n        keywordIds,\r\n        details: {\r\n          campaign: campaignId,\r\n          budget: budgetId,\r\n          adGroup: adGroupId,\r\n          ads: adIds,\r\n          keywords: keywordIds\r\n        }\r\n      };\r\n\r\n    } catch (error: any) {\r\n      console.error('❌ Error creating campaign:', error);\r\n      \r\n      return {\r\n        success: false,\r\n        error: error.message || 'Failed to create campaign',\r\n        details: error\r\n      };\r\n    }\r\n  }\r\n\r\n  // إنشاء ميزانية الحملة\r\n  private async createCampaignBudget(campaignData: CampaignData): Promise<string> {\r\n    const budgetData = {\r\n      name: `Budget for ${campaignData.name}`,\r\n      amount_micros: campaignData.budget * 1000000,\r\n      delivery_method: 'STANDARD',\r\n      period: campaignData.budgetType === 'daily' ? 'DAILY' : 'CUSTOM_PERIOD',\r\n      explicitly_shared: false,\r\n    };\r\n\r\n    const response = await this.makeGoogleAdsRequest('POST', 'campaign-budgets', budgetData, campaignData.customerId);\r\n    \r\n    if (response.success && response.data) {\r\n      const budgetId = response.data.resource_name.split('/')[3];\r\n      console.log('✅ Budget created:', budgetId);\r\n      return budgetId;\r\n    } else {\r\n      throw new Error('Failed to create campaign budget');\r\n    }\r\n  }\r\n\r\n  // إنشاء كيان الحملة مع استراتيجية Google التلقائية\r\n  private async createCampaignEntity(campaignData: CampaignData, budgetId: string): Promise<string> {\r\n    const biddingStrategy = this.getAutomaticBiddingStrategy(campaignData.objective);\r\n    \r\n    const campaignDataPayload = {\r\n      name: campaignData.name,\r\n      status: 'PAUSED',\r\n      campaign_budget: `customers/${campaignData.customerId}/campaignBudgets/${budgetId}`,\r\n      advertising_channel_type: 'SEARCH',\r\n      bidding_strategy_type: biddingStrategy,\r\n      start_date: campaignData.startDate.replace(/-/g, ''),\r\n      ...(campaignData.endDate && { end_date: campaignData.endDate.replace(/-/g, '') }),\r\n      network_settings: {\r\n        target_google_search: campaignData.networkSettings?.search ?? true,\r\n        target_search_network: campaignData.networkSettings?.partners ?? false,\r\n        target_content_network: campaignData.networkSettings?.display ?? false,\r\n        target_partner_search_network: campaignData.networkSettings?.partners ?? false,\r\n      },\r\n      optimization_score_weight: 1.0,\r\n      url_expansion_opt_out: false,\r\n    };\r\n\r\n    const response = await this.makeGoogleAdsRequest('POST', 'campaigns', campaignDataPayload, campaignData.customerId);\r\n    \r\n    if (response.success && response.data) {\r\n      const campaignId = response.data.resource_name.split('/')[3];\r\n      console.log('✅ Campaign entity created with automatic bidding:', campaignId);\r\n      return campaignId;\r\n    } else {\r\n      throw new Error('Failed to create campaign');\r\n    }\r\n  }\r\n\r\n  // تحديد استراتيجية المزايدة التلقائية حسب هدف الحملة\r\n  private getAutomaticBiddingStrategy(objective: string): string {\r\n    const strategyMap: { [key: string]: string } = {\r\n      'sales': 'MAXIMIZE_CONVERSIONS',\r\n      'leads': 'MAXIMIZE_CONVERSIONS',\r\n      'traffic': 'MAXIMIZE_CLICKS',\r\n      'awareness': 'MAXIMIZE_CLICKS',\r\n      'consideration': 'MAXIMIZE_CLICKS',\r\n      'app': 'MAXIMIZE_CONVERSIONS',\r\n    };\r\n    \r\n    return strategyMap[objective] || 'MAXIMIZE_CLICKS';\r\n  }\r\n\r\n  // إنشاء مجموعة الإعلانات\r\n  private async createAdGroup(campaignId: string, campaignData: CampaignData): Promise<string> {\r\n    const adGroupData = {\r\n      name: `${campaignData.name} - Ad Group`,\r\n      campaign: `customers/${campaignData.customerId}/campaigns/${campaignId}`,\r\n      status: 'ENABLED',\r\n      type: 'SEARCH_STANDARD',\r\n    };\r\n\r\n    const response = await this.makeGoogleAdsRequest('POST', 'ad-groups', adGroupData, campaignData.customerId);\r\n    \r\n    if (response.success && response.data) {\r\n      const adGroupId = response.data.resource_name.split('/')[3];\r\n      console.log('✅ Ad Group created:', adGroupId);\r\n      return adGroupId;\r\n    } else {\r\n      throw new Error('Failed to create ad group');\r\n    }\r\n  }\r\n\r\n  // إضافة الكلمات المفتاحية\r\n  private async addKeywords(adGroupId: string, keywords: string[], customerId: string): Promise<string[]> {\r\n    if (!keywords || keywords.length === 0) {\r\n      return [];\r\n    }\r\n\r\n    const keywordOperations = keywords.map(keyword => ({\r\n      ad_group: `customers/${customerId}/adGroups/${adGroupId}`,\r\n      status: 'ENABLED',\r\n      keyword: {\r\n        text: keyword,\r\n        match_type: 'BROAD',\r\n      },\r\n    }));\r\n\r\n    const response = await this.makeGoogleAdsRequest('POST', 'ad-group-criteria', { operations: keywordOperations }, customerId);\r\n    \r\n    if (response.success && response.data) {\r\n      const keywordIds = response.data.results?.map((result: any) => result.resource_name.split('/')[3]) || [];\r\n      console.log('✅ Keywords added with automatic bidding:', keywordIds.length);\r\n      return keywordIds;\r\n    } else {\r\n      console.warn('⚠️ Failed to add keywords');\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // إنشاء الإعلانات\r\n  private async createAds(adGroupId: string, campaignData: CampaignData): Promise<string[]> {\r\n    if (!campaignData.headlines || campaignData.headlines.length < 3 || \r\n        !campaignData.descriptions || campaignData.descriptions.length < 2) {\r\n      throw new Error('At least 3 headlines and 2 descriptions are required');\r\n    }\r\n\r\n    const adData = {\r\n      ad_group: `customers/${campaignData.customerId}/adGroups/${adGroupId}`,\r\n      status: 'ENABLED',\r\n      ad: {\r\n        type: 'RESPONSIVE_SEARCH_AD',\r\n        responsive_search_ad: {\r\n          headlines: campaignData.headlines.slice(0, 15).map(headline => ({\r\n            text: headline,\r\n            pinned_field: undefined,\r\n          })),\r\n          descriptions: campaignData.descriptions.slice(0, 4).map(description => ({\r\n            text: description,\r\n            pinned_field: undefined,\r\n          })),\r\n          path1: '',\r\n          path2: '',\r\n        },\r\n        final_urls: ['https://example.com'],\r\n      }\r\n    };\r\n\r\n    const response = await this.makeGoogleAdsRequest('POST', 'ad-group-ads', adData, campaignData.customerId);\r\n    \r\n    if (response.success && response.data) {\r\n      const adIds = response.data.results?.map((result: any) => result.resource_name.split('/')[3]) || [];\r\n      console.log('✅ Responsive Search Ads created:', adIds.length);\r\n      return adIds;\r\n    } else {\r\n      console.warn('⚠️ Failed to create ads');\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // إضافة استهداف المواقع\r\n  private async addLocationTargeting(campaignId: string, userSelectedLocations: string[], customerId: string): Promise<void> {\r\n    if (!userSelectedLocations || userSelectedLocations.length === 0) {\r\n      console.log('⚠️ No locations selected by user, skipping location targeting');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const locationIds = await this.resolveLocationIds(userSelectedLocations);\r\n      \r\n      if (locationIds.length === 0) {\r\n        console.warn('⚠️ Could not resolve any location IDs from user selection');\r\n        return;\r\n      }\r\n\r\n      const locationOperations = locationIds.map(locationId => ({\r\n        campaign: `customers/${customerId}/campaigns/${campaignId}`,\r\n        location: {\r\n          geo_target_constant: `geoTargetConstants/${locationId}`,\r\n        },\r\n        bid_modifier: 1.0,\r\n      }));\r\n\r\n      const response = await this.makeGoogleAdsRequest('POST', 'campaign-criteria', { operations: locationOperations }, customerId);\r\n      \r\n      if (response.success) {\r\n        console.log('✅ Location targeting added for user-selected locations:', locationIds.length);\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('❌ Error adding location targeting:', error);\r\n    }\r\n  }\r\n\r\n  // إضافة استهداف اللغات\r\n  private async addLanguageTargeting(campaignId: string, userSelectedLanguages: string[], customerId: string): Promise<void> {\r\n    if (!userSelectedLanguages || userSelectedLanguages.length === 0) {\r\n      console.log('⚠️ No languages selected by user, skipping language targeting');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const languageIds = this.resolveLanguageIds(userSelectedLanguages);\r\n      \r\n      if (languageIds.length === 0) {\r\n        console.warn('⚠️ Could not resolve any language IDs from user selection');\r\n        return;\r\n      }\r\n\r\n      const languageOperations = languageIds.map(languageId => ({\r\n        campaign: `customers/${customerId}/campaigns/${campaignId}`,\r\n        language: {\r\n          language_constant: `languageConstants/${languageId}`,\r\n        },\r\n      }));\r\n\r\n      const response = await this.makeGoogleAdsRequest('POST', 'campaign-criteria', { operations: languageOperations }, customerId);\r\n      \r\n      if (response.success) {\r\n        console.log('✅ Language targeting added for user-selected languages:', languageIds.length);\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('❌ Error adding language targeting:', error);\r\n    }\r\n  }\r\n\r\n  // طلب HTTP إلى Google Ads API\r\n  private async makeGoogleAdsRequest(method: string, endpoint: string, data?: any, customerId?: string): Promise<any> {\r\n    try {\r\n      const targetCustomerId = customerId || this.config.manager_account_id;\r\n      const url = `https://googleads.googleapis.com/v14/customers/${targetCustomerId}/${endpoint}`;\r\n      \r\n      const headers = {\r\n        'Authorization': `Bearer ${await this.getAccessToken()}`,\r\n        'developer-token': this.config.developer_token,\r\n        'login-customer-id': this.config.login_customer_id || this.config.manager_account_id,\r\n        'Content-Type': 'application/json',\r\n      };\r\n\r\n      const response = await fetch(url, {\r\n        method,\r\n        headers,\r\n        ...(data && { body: JSON.stringify(data) }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        const responseData = await response.json();\r\n        return { success: true, data: responseData };\r\n      } else {\r\n        const errorData = await response.text();\r\n        return { success: false, error: errorData };\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('❌ Google Ads API request failed:', error);\r\n      return { success: false, error: error };\r\n    }\r\n  }\r\n\r\n  // الحصول على access token\r\n  private async getAccessToken(): Promise<string> {\r\n    try {\r\n      const response = await fetch('https://oauth2.googleapis.com/token', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/x-www-form-urlencoded',\r\n        },\r\n        body: new URLSearchParams({\r\n          client_id: this.config.client_id,\r\n          client_secret: this.config.client_secret,\r\n          refresh_token: this.config.refresh_token,\r\n          grant_type: 'refresh_token',\r\n        }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        return data.access_token;\r\n      } else {\r\n        throw new Error('Failed to refresh access token');\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('❌ Error getting access token:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // حل معرفات المواقع من اختيار المستخدم\r\n  private async resolveLocationIds(userSelectedLocations: string[]): Promise<number[]> {\r\n    const locationMap: { [key: string]: number } = {\r\n      'United States': 2840,\r\n      'Canada': 2124,\r\n      'Mexico': 2484,\r\n      'United Kingdom': 2826,\r\n      'Germany': 2276,\r\n      'France': 2250,\r\n      'Spain': 2724,\r\n      'Italy': 2380,\r\n      'Netherlands': 2528,\r\n      'Sweden': 2752,\r\n      'Norway': 2578,\r\n      'Denmark': 2208,\r\n      'Finland': 2246,\r\n      'Belgium': 2056,\r\n      'Switzerland': 2756,\r\n      'Austria': 2040,\r\n      'Poland': 2616,\r\n      'Australia': 2036,\r\n      'Japan': 2392,\r\n      'South Korea': 2410,\r\n      'Singapore': 2702,\r\n      'India': 2356,\r\n      'China': 2156,\r\n      'Thailand': 2764,\r\n      'Malaysia': 2458,\r\n      'Philippines': 2608,\r\n      'Indonesia': 2360,\r\n      'Vietnam': 2704,\r\n      'Saudi Arabia': 2682,\r\n      'UAE': 2784,\r\n      'Egypt': 2818,\r\n      'Jordan': 2400,\r\n      'Lebanon': 2422,\r\n      'Kuwait': 2414,\r\n      'Qatar': 2634,\r\n      'Bahrain': 2048,\r\n      'Oman': 2512,\r\n      'Morocco': 2504,\r\n      'Tunisia': 2788,\r\n      'South Africa': 2710,\r\n      'Brazil': 2076,\r\n      'Argentina': 2032,\r\n      'Chile': 2152,\r\n      'Colombia': 2170,\r\n      'Peru': 2604,\r\n    };\r\n\r\n    return userSelectedLocations\r\n      .map(location => locationMap[location])\r\n      .filter(id => id !== undefined);\r\n  }\r\n\r\n  // حل معرفات اللغات من اختيار المستخدم\r\n  private resolveLanguageIds(userSelectedLanguages: string[]): number[] {\r\n    const languageMap: { [key: string]: number } = {\r\n      'English': 1000,\r\n      'Arabic': 1019,\r\n      'Spanish': 1003,\r\n      'French': 1002,\r\n      'German': 1001,\r\n      'Italian': 1004,\r\n      'Portuguese': 1014,\r\n      'Dutch': 1043,\r\n      'Swedish': 1015,\r\n      'Norwegian': 1013,\r\n      'Danish': 1009,\r\n      'Finnish': 1011,\r\n      'Polish': 1016,\r\n      'Russian': 1018,\r\n      'Japanese': 1005,\r\n      'Korean': 1012,\r\n      'Chinese (Simplified)': 1017,\r\n      'Chinese (Traditional)': 1018,\r\n      'Thai': 1044,\r\n      'Vietnamese': 1045,\r\n      'Hindi': 1020,\r\n      'Turkish': 1037,\r\n      'Hebrew': 1027,\r\n      'Greek': 1006,\r\n    };\r\n\r\n    return userSelectedLanguages\r\n      .map(language => languageMap[language])\r\n      .filter(id => id !== undefined);\r\n  }\r\n\r\n  // الحصول على معلومات العميل\r\n  async getCustomerInfo(customerId: string): Promise<CustomerInfo | null> {\r\n    try {\r\n      const response = await this.makeGoogleAdsRequest('GET', `query?query=SELECT customer.id, customer.descriptive_name, customer.currency_code, customer.time_zone, customer.status, customer.test_account, customer.manager FROM customer LIMIT 1`, undefined, customerId);\r\n\r\n      if (response.success && response.data && response.data.results && response.data.results.length > 0) {\r\n        const customerData = response.data.results[0].customer;\r\n        return {\r\n          id: customerData.id.toString(),\r\n          descriptiveName: customerData.descriptive_name,\r\n          currencyCode: customerData.currency_code,\r\n          timeZone: customerData.time_zone,\r\n          status: customerData.status,\r\n          testAccount: customerData.test_account,\r\n          manager: customerData.manager,\r\n        };\r\n      }\r\n\r\n      return null;\r\n\r\n    } catch (error) {\r\n      console.error('❌ Error getting customer info:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  // التحقق من حالة الاتصال\r\n  async checkConnection(): Promise<boolean> {\r\n    try {\r\n      const response = await this.makeGoogleAdsRequest('GET', 'query?query=SELECT customer.id FROM customer LIMIT 1');\r\n      \r\n      if (response.success) {\r\n        console.log('✅ Google Ads API connection verified');\r\n        return true;\r\n      } else {\r\n        console.error('❌ Google Ads API connection failed:', response.error);\r\n        return false;\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('❌ Google Ads API connection failed:', error);\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n// إنشاء مثيل العميل الآمن\r\nexport const createMCCClient = (): MCCClient => {\r\n  return new MCCClient();\r\n};\r\n\r\n// تصدير الأنواع\r\nexport type {\r\n  CustomerData,\r\n  CreateCustomerResult,\r\n  CampaignData,\r\n  CreateCampaignResult,\r\n  CustomerInfo,\r\n  GoogleAdsConfig\r\n};\r\n\r\n// تصدير العميل الافتراضي\r\nexport default MCCClient;\r\n\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 596, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/DELL/my-site/src/app/api/accounts/create/route.ts"],"sourcesContent":["// src/app/api/accounts/create/route.ts\r\n// API endpoint لإنشاء حساب Google Ads حقيقي تحت MCC\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\n\r\n// استيراد MCCClient مع التعامل مع الأخطاء المحتملة\r\nlet MCCClient: any;\r\n\r\ntry {\r\n  const mccModule = require('@/lib/mcc-client');\r\n  MCCClient = mccModule.default || mccModule.MCCClient;\r\n} catch (error) {\r\n  console.warn('MCC Client not available, using mock implementation');\r\n}\r\n\r\ninterface AccountCreateRequest {\r\n  accountType: 'furriyadh-managed' | 'new-account';\r\n  customerName: string;\r\n  currency?: string;\r\n  timezone?: string;\r\n  countryCode?: string;\r\n  userEmail?: string;\r\n}\r\n\r\ninterface AccountCreateResponse {\r\n  success: boolean;\r\n  customerId?: string;\r\n  customerName?: string;\r\n  accountType?: string;\r\n  resourceName?: string;\r\n  error?: string;\r\n  message?: string;\r\n  details?: any;\r\n}\r\n\r\nclass GoogleAdsAccountManager {\r\n  private mccClient: any;\r\n  private isApiAvailable: boolean;\r\n\r\n  constructor() {\r\n    this.isApiAvailable = !!MCCClient;\r\n    \r\n    if (this.isApiAvailable) {\r\n      try {\r\n        this.mccClient = new MCCClient();\r\n      } catch (e) {\r\n        console.error('Failed to initialize MCCClient:', e);\r\n        this.isApiAvailable = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  async createAccount(request: AccountCreateRequest): Promise<AccountCreateResponse> {\r\n    if (!this.isApiAvailable) {\r\n      console.warn('MCC Client not available, performing mock account creation.');\r\n      // Simulate API call delay\r\n      await new Promise(resolve => setTimeout(resolve, 2000));\r\n      return {\r\n        success: true,\r\n        customerId: `mock-customer-${Date.now()}`,\r\n        customerName: request.customerName,\r\n        accountType: request.accountType,\r\n        message: 'Mock account created successfully.'\r\n      };\r\n    }\r\n\r\n    try {\r\n      const newAccount = await this.mccClient.createSubAccount({\r\n        name: request.customerName,\r\n        currencyCode: request.currency || 'SAR',\r\n        timeZone: request.timezone || 'Asia/Riyadh',\r\n        countryCode: request.countryCode || 'SA',\r\n        emailAddress: request.userEmail // Pass user email if available\r\n      });\r\n\r\n      if (newAccount && newAccount.resourceName) {\r\n        // Extract customerId from resourceName (e.g., customers/1234567890)\r\n        const customerId = newAccount.resourceName.split('/').pop();\r\n        return {\r\n          success: true,\r\n          customerId: customerId,\r\n          customerName: request.customerName,\r\n          accountType: request.accountType,\r\n          resourceName: newAccount.resourceName,\r\n          message: 'Account created successfully.'\r\n        };\r\n      } else {\r\n        return {\r\n          success: false,\r\n          error: 'Failed to create account: No resourceName returned.',\r\n          message: 'Failed to create account.'\r\n        };\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error creating account:', error);\r\n      return {\r\n        success: false,\r\n        error: error.message || 'Unknown error during account creation.',\r\n        message: 'Failed to create account.',\r\n        details: error\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nexport async function POST(req: NextRequest) {\r\n  try {\r\n    const { accountType, customerName, currency, timezone, countryCode, userEmail } = await req.json();\r\n\r\n    if (!customerName || !accountType) {\r\n      return NextResponse.json({ success: false, error: 'Missing customerName or accountType' }, { status: 400 });\r\n    }\r\n\r\n    const manager = new GoogleAdsAccountManager();\r\n    const response = await manager.createAccount({\r\n      accountType,\r\n      customerName,\r\n      currency,\r\n      timezone,\r\n      countryCode,\r\n      userEmail\r\n    });\r\n\r\n    if (response.success) {\r\n      return NextResponse.json(response, { status: 200 });\r\n    } else {\r\n      return NextResponse.json(response, { status: 500 });\r\n    }\r\n  } catch (error: any) {\r\n    console.error('API Error:', error);\r\n    return NextResponse.json({ success: false, error: error.message || 'Internal Server Error' }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,oDAAoD;;;;AAEpD;;AAEA,mDAAmD;AACnD,IAAI;AAEJ,IAAI;IACF,MAAM;IACN,YAAY,UAAU,OAAO,IAAI,UAAU,SAAS;AACtD,EAAE,OAAO,OAAO;IACd,QAAQ,IAAI,CAAC;AACf;AAsBA,MAAM;IACI,UAAe;IACf,eAAwB;IAEhC,aAAc;QACZ,IAAI,CAAC,cAAc,GAAG,CAAC,CAAC;QAExB,IAAI,IAAI,CAAC,cAAc,EAAE;YACvB,IAAI;gBACF,IAAI,CAAC,SAAS,GAAG,IAAI;YACvB,EAAE,OAAO,GAAG;gBACV,QAAQ,KAAK,CAAC,mCAAmC;gBACjD,IAAI,CAAC,cAAc,GAAG;YACxB;QACF;IACF;IAEA,MAAM,cAAc,OAA6B,EAAkC;QACjF,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE;YACxB,QAAQ,IAAI,CAAC;YACb,0BAA0B;YAC1B,MAAM,IAAI,QAAQ,CAAA,UAAW,WAAW,SAAS;YACjD,OAAO;gBACL,SAAS;gBACT,YAAY,CAAC,cAAc,EAAE,KAAK,GAAG,IAAI;gBACzC,cAAc,QAAQ,YAAY;gBAClC,aAAa,QAAQ,WAAW;gBAChC,SAAS;YACX;QACF;QAEA,IAAI;YACF,MAAM,aAAa,MAAM,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC;gBACvD,MAAM,QAAQ,YAAY;gBAC1B,cAAc,QAAQ,QAAQ,IAAI;gBAClC,UAAU,QAAQ,QAAQ,IAAI;gBAC9B,aAAa,QAAQ,WAAW,IAAI;gBACpC,cAAc,QAAQ,SAAS,CAAC,+BAA+B;YACjE;YAEA,IAAI,cAAc,WAAW,YAAY,EAAE;gBACzC,oEAAoE;gBACpE,MAAM,aAAa,WAAW,YAAY,CAAC,KAAK,CAAC,KAAK,GAAG;gBACzD,OAAO;oBACL,SAAS;oBACT,YAAY;oBACZ,cAAc,QAAQ,YAAY;oBAClC,aAAa,QAAQ,WAAW;oBAChC,cAAc,WAAW,YAAY;oBACrC,SAAS;gBACX;YACF,OAAO;gBACL,OAAO;oBACL,SAAS;oBACT,OAAO;oBACP,SAAS;gBACX;YACF;QACF,EAAE,OAAO,OAAY;YACnB,QAAQ,KAAK,CAAC,2BAA2B;YACzC,OAAO;gBACL,SAAS;gBACT,OAAO,MAAM,OAAO,IAAI;gBACxB,SAAS;gBACT,SAAS;YACX;QACF;IACF;AACF;AAEO,eAAe,KAAK,GAAgB;IACzC,IAAI;QACF,MAAM,EAAE,WAAW,EAAE,YAAY,EAAE,QAAQ,EAAE,QAAQ,EAAE,WAAW,EAAE,SAAS,EAAE,GAAG,MAAM,IAAI,IAAI;QAEhG,IAAI,CAAC,gBAAgB,CAAC,aAAa;YACjC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;gBAAO,OAAO;YAAsC,GAAG;gBAAE,QAAQ;YAAI;QAC3G;QAEA,MAAM,UAAU,IAAI;QACpB,MAAM,WAAW,MAAM,QAAQ,aAAa,CAAC;YAC3C;YACA;YACA;YACA;YACA;YACA;QACF;QAEA,IAAI,SAAS,OAAO,EAAE;YACpB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,UAAU;gBAAE,QAAQ;YAAI;QACnD,OAAO;YACL,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,UAAU;gBAAE,QAAQ;YAAI;QACnD;IACF,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,cAAc;QAC5B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAO,OAAO,MAAM,OAAO,IAAI;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC9G;AACF","debugId":null}}]
}