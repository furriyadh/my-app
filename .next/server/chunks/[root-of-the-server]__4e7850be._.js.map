{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 268, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/DELL/my-site/src/app/api/google-ads/route.ts"],"sourcesContent":["// src/app/api/google-ads/route.ts\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { createClient } from '@supabase/supabase-js';\r\n\r\n// @ts-ignore - Google Ads API doesn't have official TypeScript types\r\nconst { GoogleAdsApi } = require('google-ads-api');\r\n\r\n// Enhanced interfaces for comprehensive campaign management\r\ninterface Campaign {\r\n  id: string;\r\n  name: string;\r\n  status: 'ENABLED' | 'PAUSED' | 'REMOVED';\r\n  type: string;\r\n  subType: string;\r\n  budget: number;\r\n  spend: number;\r\n  impressions: number;\r\n  clicks: number;\r\n  conversions: number;\r\n  ctr: number;\r\n  avgCpc: number;\r\n  conversionRate: number;\r\n  costPerConversion: number;\r\n  qualityScore: number;\r\n  impressionShare: number;\r\n  targetLocation: string;\r\n  bidStrategy: string;\r\n  startDate: string;\r\n  endDate: string;\r\n  devicePerformance: {\r\n    desktop: { impressions: number; clicks: number; cost: number };\r\n    mobile: { impressions: number; clicks: number; cost: number };\r\n    tablet: { impressions: number; clicks: number; cost: number };\r\n  };\r\n  audienceData: {\r\n    ageGroups: { [key: string]: number };\r\n    genders: { male: number; female: number; unknown: number };\r\n    interests: string[];\r\n  };\r\n  geoPerformance: {\r\n    [country: string]: { impressions: number; clicks: number; cost: number };\r\n  };\r\n}\r\n\r\ninterface Summary {\r\n  totalSpend: number;\r\n  totalClicks: number;\r\n  totalImpressions: number;\r\n  totalConversions: number;\r\n  avgCpc: number;\r\n  avgCtr: number;\r\n  conversionRate: number;\r\n  impressionShare: number;\r\n  qualityScore: number;\r\n  campaignTypes: Record<string, number>;\r\n  statusBreakdown: {\r\n    enabled: number;\r\n    paused: number;\r\n    removed: number;\r\n  };\r\n  performanceTrends: {\r\n    impressions: { current: number; previous: number; change: number };\r\n    clicks: { current: number; previous: number; change: number };\r\n    cost: { current: number; previous: number; change: number };\r\n    conversions: { current: number; previous: number; change: number };\r\n  };\r\n  topPerformingCampaigns: Campaign[];\r\n  recommendations: {\r\n    type: 'budget' | 'keyword' | 'audience' | 'bidding';\r\n    title: string;\r\n    description: string;\r\n    impact: 'high' | 'medium' | 'low';\r\n    campaignId?: string;\r\n  }[];\r\n}\r\n\r\ninterface ApiResponse {\r\n  success: boolean;\r\n  data?: {\r\n    campaigns: Campaign[];\r\n    summary: Summary;\r\n    totalCount?: number;\r\n    filteredCount?: number;\r\n  };\r\n  error?: string;\r\n  note?: string;\r\n  isDemo?: boolean;\r\n}\r\n\r\n// إنشاء Supabase client للخادم\r\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;\r\nconst supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;\r\n\r\nconst supabase = createClient(supabaseUrl, supabaseServiceKey);\r\n\r\n// Helper function to generate comprehensive demo data as fallback\r\nconst generateComprehensiveDemoData = (): { campaigns: Campaign[]; summary: Summary } => {\r\n  const campaigns: Campaign[] = [\r\n    {\r\n      id: 'camp_001',\r\n      name: 'Performance Max - All Products',\r\n      status: 'ENABLED',\r\n      type: 'Performance Max',\r\n      subType: 'All Products',\r\n      budget: 8000,\r\n      spend: 6567.20,\r\n      impressions: 234560,\r\n      clicks: 4456,\r\n      conversions: 234,\r\n      ctr: 1.90,\r\n      avgCpc: 14.735,\r\n      conversionRate: 5.25,\r\n      costPerConversion: 28.07,\r\n      qualityScore: 8.5,\r\n      impressionShare: 85.2,\r\n      targetLocation: 'Egypt, Saudi Arabia',\r\n      bidStrategy: 'Maximize Conversions',\r\n      startDate: '2024-01-01',\r\n      endDate: '2024-12-31',\r\n      devicePerformance: {\r\n        desktop: { impressions: 70368, clicks: 1337, cost: 1970.16 },\r\n        mobile: { impressions: 140736, clicks: 2669, cost: 3940.32 },\r\n        tablet: { impressions: 23456, clicks: 450, cost: 656.72 }\r\n      },\r\n      audienceData: {\r\n        ageGroups: { '18-24': 15, '25-34': 35, '35-44': 30, '45-54': 15, '55+': 5 },\r\n        genders: { male: 60, female: 38, unknown: 2 },\r\n        interests: ['Technology', 'Shopping', 'Electronics']\r\n      },\r\n      geoPerformance: {\r\n        'Egypt': { impressions: 140736, clicks: 2669, cost: 3940.32 },\r\n        'Saudi Arabia': { impressions: 93824, clicks: 1787, cost: 2626.88 }\r\n      }\r\n    },\r\n    {\r\n      id: 'camp_002',\r\n      name: 'Shopping - Home & Garden Products',\r\n      status: 'ENABLED',\r\n      type: 'Shopping',\r\n      subType: 'Smart Shopping',\r\n      budget: 6000,\r\n      spend: 4567.90,\r\n      impressions: 156780,\r\n      clicks: 2876,\r\n      conversions: 156,\r\n      ctr: 1.83,\r\n      avgCpc: 15.885,\r\n      conversionRate: 5.42,\r\n      costPerConversion: 29.28,\r\n      qualityScore: 7.8,\r\n      impressionShare: 78.5,\r\n      targetLocation: 'Egypt, UAE',\r\n      bidStrategy: 'Target ROAS',\r\n      startDate: '2024-02-01',\r\n      endDate: '2024-12-31',\r\n      devicePerformance: {\r\n        desktop: { impressions: 62712, clicks: 1150, cost: 1827.16 },\r\n        mobile: { impressions: 78390, clicks: 1438, cost: 2283.95 },\r\n        tablet: { impressions: 15678, clicks: 288, cost: 456.79 }\r\n      },\r\n      audienceData: {\r\n        ageGroups: { '25-34': 25, '35-44': 40, '45-54': 25, '55+': 10 },\r\n        genders: { male: 35, female: 63, unknown: 2 },\r\n        interests: ['Home & Garden', 'Lifestyle', 'Interior Design']\r\n      },\r\n      geoPerformance: {\r\n        'Egypt': { impressions: 94068, clicks: 1726, cost: 2740.74 },\r\n        'UAE': { impressions: 62712, clicks: 1150, cost: 1827.16 }\r\n      }\r\n    },\r\n    {\r\n      id: 'camp_003',\r\n      name: 'Search - Electronics & Gadgets',\r\n      status: 'ENABLED',\r\n      type: 'Search',\r\n      subType: 'Standard',\r\n      budget: 5000,\r\n      spend: 3247.50,\r\n      impressions: 125430,\r\n      clicks: 2156,\r\n      conversions: 89,\r\n      ctr: 1.72,\r\n      avgCpc: 15.065,\r\n      conversionRate: 4.13,\r\n      costPerConversion: 36.49,\r\n      qualityScore: 9.2,\r\n      impressionShare: 92.1,\r\n      targetLocation: 'Egypt',\r\n      bidStrategy: 'Enhanced CPC',\r\n      startDate: '2024-01-15',\r\n      endDate: '2024-12-31',\r\n      devicePerformance: {\r\n        desktop: { impressions: 37629, clicks: 647, cost: 974.25 },\r\n        mobile: { impressions: 75258, clicks: 1293, cost: 1948.50 },\r\n        tablet: { impressions: 12543, clicks: 216, cost: 324.75 }\r\n      },\r\n      audienceData: {\r\n        ageGroups: { '18-24': 30, '25-34': 35, '35-44': 25, '45-54': 8, '55+': 2 },\r\n        genders: { male: 70, female: 28, unknown: 2 },\r\n        interests: ['Electronics', 'Technology', 'Gaming']\r\n      },\r\n      geoPerformance: {\r\n        'Egypt': { impressions: 125430, clicks: 2156, cost: 3247.50 }\r\n      }\r\n    }\r\n  ];\r\n\r\n  // Calculate comprehensive summary\r\n  const totalSpend = campaigns.reduce((sum, c) => sum + c.spend, 0);\r\n  const totalClicks = campaigns.reduce((sum, c) => sum + c.clicks, 0);\r\n  const totalImpressions = campaigns.reduce((sum, c) => sum + c.impressions, 0);\r\n  const totalConversions = campaigns.reduce((sum, c) => sum + c.conversions, 0);\r\n\r\n  const summary: Summary = {\r\n    totalSpend,\r\n    totalClicks,\r\n    totalImpressions,\r\n    totalConversions,\r\n    avgCpc: totalSpend / totalClicks,\r\n    avgCtr: (totalClicks / totalImpressions) * 100,\r\n    conversionRate: (totalConversions / totalClicks) * 100,\r\n    impressionShare: campaigns.reduce((sum, c) => sum + c.impressionShare, 0) / campaigns.length,\r\n    qualityScore: campaigns.reduce((sum, c) => sum + c.qualityScore, 0) / campaigns.length,\r\n    campaignTypes: {\r\n      'Performance Max': 1,\r\n      'Shopping': 1,\r\n      'Search': 1\r\n    },\r\n    statusBreakdown: {\r\n      enabled: campaigns.filter(c => c.status === 'ENABLED').length,\r\n      paused: campaigns.filter(c => c.status === 'PAUSED').length,\r\n      removed: campaigns.filter(c => c.status === 'REMOVED').length\r\n    },\r\n    performanceTrends: {\r\n      impressions: { current: totalImpressions, previous: totalImpressions * 0.85, change: 15 },\r\n      clicks: { current: totalClicks, previous: totalClicks * 0.92, change: 8 },\r\n      cost: { current: totalSpend, previous: totalSpend * 1.05, change: -5 },\r\n      conversions: { current: totalConversions, previous: totalConversions * 0.88, change: 12 }\r\n    },\r\n    topPerformingCampaigns: campaigns.sort((a, b) => b.conversionRate - a.conversionRate).slice(0, 3),\r\n    recommendations: [\r\n      {\r\n        type: 'budget',\r\n        title: 'Increase Budget for Top Performers',\r\n        description: 'Performance Max campaign shows strong conversion rates. Consider increasing budget by 20%.',\r\n        impact: 'high',\r\n        campaignId: 'camp_001'\r\n      },\r\n      {\r\n        type: 'keyword',\r\n        title: 'Expand Keyword Targeting',\r\n        description: 'Electronics campaign has high impression share. Add related keywords to capture more traffic.',\r\n        impact: 'medium',\r\n        campaignId: 'camp_003'\r\n      }\r\n    ]\r\n  };\r\n\r\n  return { campaigns, summary };\r\n};\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    const { searchParams } = new URL(request.url);\r\n    const dataType = searchParams.get('dataType') || 'campaigns';\r\n    const campaignType = searchParams.get('campaignType');\r\n    const status = searchParams.get('status');\r\n    const search = searchParams.get('search');\r\n    \r\n    console.log('🔍 GET Request params:', { dataType, campaignType, status, search });\r\n\r\n    // Try to fetch real data from Google Ads API\r\n    try {\r\n      const realData = await fetchGoogleAdsData();\r\n      if (realData.success && realData.data) {\r\n        console.log('✅ Real Google Ads data fetched successfully');\r\n        return NextResponse.json(realData);\r\n      }\r\n    } catch (error) {\r\n      console.log('⚠️ Google Ads API failed, using demo data');\r\n    }\r\n\r\n    // Fallback to comprehensive demo data\r\n    console.log('🔄 Using comprehensive demo data as fallback');\r\n    const demoData = generateComprehensiveDemoData();\r\n    \r\n    // Apply filters if provided\r\n    let filteredCampaigns = demoData.campaigns;\r\n    \r\n    if (campaignType && campaignType !== 'all') {\r\n      filteredCampaigns = filteredCampaigns.filter(c => \r\n        c.type.toLowerCase().includes(campaignType.toLowerCase())\r\n      );\r\n    }\r\n    \r\n    if (status && status !== 'all') {\r\n      filteredCampaigns = filteredCampaigns.filter(c => \r\n        c.status.toLowerCase() === status.toLowerCase()\r\n      );\r\n    }\r\n    \r\n    if (search) {\r\n      filteredCampaigns = filteredCampaigns.filter(c => \r\n        c.name.toLowerCase().includes(search.toLowerCase())\r\n      );\r\n    }\r\n\r\n    // Use original summary (comprehensive) regardless of filters\r\n    const response: ApiResponse = {\r\n      success: true,\r\n      data: {\r\n        campaigns: filteredCampaigns,\r\n        summary: demoData.summary,\r\n        totalCount: demoData.campaigns.length,\r\n        filteredCount: filteredCampaigns.length\r\n      },\r\n      note: 'Using comprehensive demo data - configure Google Ads API for real data',\r\n      isDemo: true\r\n    };\r\n\r\n    return NextResponse.json(response);\r\n  } catch (error) {\r\n    console.error('❌ API Error:', error);\r\n    return NextResponse.json({\r\n      success: false,\r\n      error: 'Failed to fetch campaign data',\r\n      data: {\r\n        campaigns: [],\r\n        summary: {\r\n          totalSpend: 0,\r\n          totalClicks: 0,\r\n          totalImpressions: 0,\r\n          totalConversions: 0,\r\n          avgCpc: 0,\r\n          avgCtr: 0,\r\n          conversionRate: 0,\r\n          impressionShare: 0,\r\n          qualityScore: 0,\r\n          campaignTypes: {},\r\n          statusBreakdown: { enabled: 0, paused: 0, removed: 0 },\r\n          performanceTrends: {\r\n            impressions: { current: 0, previous: 0, change: 0 },\r\n            clicks: { current: 0, previous: 0, change: 0 },\r\n            cost: { current: 0, previous: 0, change: 0 },\r\n            conversions: { current: 0, previous: 0, change: 0 }\r\n          },\r\n          topPerformingCampaigns: [],\r\n          recommendations: []\r\n        }\r\n      }\r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    console.log('🚀 POST Request: Fetching Google Ads data...');\r\n    \r\n    const body = await request.json();\r\n    const { loginCustomerId, startDate, endDate, dataType } = body;\r\n    \r\n    console.log('📥 Request body:', { loginCustomerId, startDate, endDate, dataType });\r\n    \r\n    // Try to fetch real data\r\n    const realData = await fetchGoogleAdsDataWithParams(loginCustomerId, startDate, endDate, dataType);\r\n    \r\n    if (realData.success) {\r\n      return NextResponse.json(realData);\r\n    } else {\r\n      // Fallback to demo data\r\n      console.log('🔄 Using demo data as fallback');\r\n      const demoData = generateComprehensiveDemoData();\r\n      return NextResponse.json({\r\n        success: true,\r\n        data: demoData,\r\n        message: 'Demo data (Google Ads API unavailable)',\r\n        isDemo: true\r\n      });\r\n    }\r\n    \r\n  } catch (error: any) {\r\n    console.error('❌ POST request error:', error);\r\n    \r\n    // Always return demo data on error\r\n    const demoData = generateComprehensiveDemoData();\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: demoData,\r\n      message: 'Demo data (API error)',\r\n      isDemo: true,\r\n      error: error.message\r\n    });\r\n  }\r\n}\r\n\r\nexport async function PUT(request: NextRequest) {\r\n  try {\r\n    const body = await request.json();\r\n    const { campaignId, action } = body;\r\n    \r\n    console.log(`🔧 Campaign action: ${action} for campaign ${campaignId}`);\r\n    \r\n    // In demo mode, just return success\r\n    return NextResponse.json({\r\n      success: true,\r\n      message: `Campaign ${campaignId} ${action}d successfully (demo mode)`,\r\n      isDemo: true\r\n    });\r\n    \r\n  } catch (error: any) {\r\n    console.error('❌ PUT request error:', error);\r\n    return NextResponse.json(\r\n      { \r\n        success: false, \r\n        error: 'Campaign action failed',\r\n        message: error.message \r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// Helper function to fetch real Google Ads data\r\nasync function fetchGoogleAdsData(): Promise<ApiResponse> {\r\n  try {\r\n    // Get environment variables\r\n    const refreshToken = process.env.GOOGLE_REFRESH_TOKEN;\r\n    const clientId = process.env.GOOGLE_CLIENT_ID;\r\n    const clientSecret = process.env.GOOGLE_CLIENT_SECRET;\r\n    const developerId = process.env.GOOGLE_DEVELOPER_TOKEN;\r\n    const mccCustomerId = process.env.MCC_LOGIN_CUSTOMER_ID;\r\n\r\n    if (!refreshToken || !clientId || !clientSecret || !developerId) {\r\n      throw new Error('Missing required environment variables');\r\n    }\r\n\r\n    // Create Google Ads API client\r\n    const client = new GoogleAdsApi({\r\n      client_id: clientId,\r\n      client_secret: clientSecret,\r\n      developer_token: developerId,\r\n    });\r\n\r\n    // Use default customer ID\r\n    const formattedCustomerId = '3271710441';\r\n    \r\n    const customer = client.Customer({\r\n      customer_id: formattedCustomerId,\r\n      refresh_token: refreshToken,\r\n      login_customer_id: mccCustomerId?.replace(/-/g, '') || undefined,\r\n    });\r\n\r\n    // Date range (last 7 days)\r\n    const endDate = new Date().toISOString().split('T')[0];\r\n    const startDate = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];\r\n\r\n    // Enhanced Google Ads API query\r\n    const query = `\r\n      SELECT \r\n        campaign.id,\r\n        campaign.name,\r\n        campaign.status,\r\n        campaign.advertising_channel_type,\r\n        metrics.cost_micros,\r\n        metrics.clicks,\r\n        metrics.impressions,\r\n        metrics.conversions,\r\n        metrics.ctr,\r\n        metrics.average_cpc,\r\n        segments.date\r\n      FROM campaign \r\n      WHERE campaign.status IN ('ENABLED', 'PAUSED')\r\n        AND segments.date >= '${startDate}'\r\n        AND segments.date <= '${endDate}'\r\n    `;\r\n\r\n    console.log('📡 Executing Google Ads query...');\r\n    const results = await customer.query(query.trim());\r\n    \r\n    console.log('✅ Query executed successfully, results:', results.length);\r\n\r\n    // Transform real data to match our interface\r\n    const campaignMap = new Map();\r\n    \r\n    results.forEach((row: any) => {\r\n      const campaign = row.campaign || {};\r\n      const metrics = row.metrics || {};\r\n      \r\n      const campaignId = campaign.id?.toString() || 'unknown';\r\n      \r\n      if (!campaignMap.has(campaignId)) {\r\n        campaignMap.set(campaignId, {\r\n          id: campaignId,\r\n          name: campaign.name || 'Unknown Campaign',\r\n          status: campaign.status || 'UNKNOWN',\r\n          type: campaign.advertising_channel_type || 'Unknown',\r\n          subType: 'Standard',\r\n          budget: 5000,\r\n          spend: 0,\r\n          impressions: 0,\r\n          clicks: 0,\r\n          conversions: 0,\r\n          ctr: 0,\r\n          avgCpc: 0,\r\n          conversionRate: 0,\r\n          costPerConversion: 0,\r\n          qualityScore: 8.0,\r\n          impressionShare: 85,\r\n          targetLocation: 'Egypt',\r\n          bidStrategy: 'Enhanced CPC',\r\n          startDate: '2024-01-01',\r\n          endDate: '2024-12-31',\r\n          devicePerformance: {\r\n            desktop: { impressions: 0, clicks: 0, cost: 0 },\r\n            mobile: { impressions: 0, clicks: 0, cost: 0 },\r\n            tablet: { impressions: 0, clicks: 0, cost: 0 }\r\n          },\r\n          audienceData: {\r\n            ageGroups: { '25-34': 50, '35-44': 30, '18-24': 20 },\r\n            genders: { male: 50, female: 48, unknown: 2 },\r\n            interests: ['General']\r\n          },\r\n          geoPerformance: {\r\n            'Egypt': { impressions: 0, clicks: 0, cost: 0 }\r\n          }\r\n        });\r\n      }\r\n      \r\n      const existingCampaign = campaignMap.get(campaignId);\r\n      existingCampaign.spend += metrics.cost_micros ? (parseInt(metrics.cost_micros) / 1000000) : 0;\r\n      existingCampaign.clicks += parseInt(metrics.clicks) || 0;\r\n      existingCampaign.impressions += parseInt(metrics.impressions) || 0;\r\n      existingCampaign.conversions += parseFloat(metrics.conversions) || 0;\r\n      existingCampaign.ctr = parseFloat(metrics.ctr) || 0;\r\n      existingCampaign.avgCpc = metrics.average_cpc ? (parseInt(metrics.average_cpc) / 1000000) : 0;\r\n      \r\n      // Calculate derived metrics\r\n      if (existingCampaign.clicks > 0) {\r\n        existingCampaign.conversionRate = (existingCampaign.conversions / existingCampaign.clicks) * 100;\r\n      }\r\n      if (existingCampaign.conversions > 0) {\r\n        existingCampaign.costPerConversion = existingCampaign.spend / existingCampaign.conversions;\r\n      }\r\n    });\r\n\r\n    const campaigns = Array.from(campaignMap.values());\r\n    \r\n    // Calculate comprehensive summary\r\n    const totalSpend = campaigns.reduce((sum, c) => sum + c.spend, 0);\r\n    const totalClicks = campaigns.reduce((sum, c) => sum + c.clicks, 0);\r\n    const totalImpressions = campaigns.reduce((sum, c) => sum + c.impressions, 0);\r\n    const totalConversions = campaigns.reduce((sum, c) => sum + c.conversions, 0);\r\n\r\n    const summary: Summary = {\r\n      totalSpend,\r\n      totalClicks,\r\n      totalImpressions,\r\n      totalConversions,\r\n      avgCpc: totalClicks > 0 ? totalSpend / totalClicks : 0,\r\n      avgCtr: totalImpressions > 0 ? (totalClicks / totalImpressions) * 100 : 0,\r\n      conversionRate: totalClicks > 0 ? (totalConversions / totalClicks) * 100 : 0,\r\n      impressionShare: campaigns.length > 0 ? campaigns.reduce((sum, c) => sum + c.impressionShare, 0) / campaigns.length : 0,\r\n      qualityScore: campaigns.length > 0 ? campaigns.reduce((sum, c) => sum + c.qualityScore, 0) / campaigns.length : 0,\r\n      campaignTypes: campaigns.reduce((acc, c) => {\r\n        acc[c.type] = (acc[c.type] || 0) + 1;\r\n        return acc;\r\n      }, {} as Record<string, number>),\r\n      statusBreakdown: {\r\n        enabled: campaigns.filter(c => c.status === 'ENABLED').length,\r\n        paused: campaigns.filter(c => c.status === 'PAUSED').length,\r\n        removed: campaigns.filter(c => c.status === 'REMOVED').length\r\n      },\r\n      performanceTrends: {\r\n        impressions: { current: totalImpressions, previous: totalImpressions * 0.85, change: 15 },\r\n        clicks: { current: totalClicks, previous: totalClicks * 0.92, change: 8 },\r\n        cost: { current: totalSpend, previous: totalSpend * 1.05, change: -5 },\r\n        conversions: { current: totalConversions, previous: totalConversions * 0.88, change: 12 }\r\n      },\r\n      topPerformingCampaigns: campaigns.sort((a, b) => b.conversionRate - a.conversionRate).slice(0, 3),\r\n      recommendations: [\r\n        {\r\n          type: 'budget',\r\n          title: 'Optimize Budget Allocation',\r\n          description: 'Consider reallocating budget to top-performing campaigns.',\r\n          impact: 'high'\r\n        }\r\n      ]\r\n    };\r\n\r\n    return {\r\n      success: true,\r\n      data: { campaigns, summary },\r\n      note: `Found ${campaigns.length} campaigns from Google Ads API`\r\n    };\r\n\r\n  } catch (error: any) {\r\n    console.error('❌ Google Ads API error:', error);\r\n    return {\r\n      success: false,\r\n      error: error.message || 'Google Ads API failed'\r\n    };\r\n  }\r\n}\r\n\r\n// Helper function with parameters\r\nasync function fetchGoogleAdsDataWithParams(\r\n  loginCustomerId?: string, \r\n  startDate?: string, \r\n  endDate?: string, \r\n  dataType?: string\r\n): Promise<ApiResponse> {\r\n  // For now, use the same function but could be enhanced with parameters\r\n  return fetchGoogleAdsData();\r\n}"],"names":[],"mappings":"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","debugId":null}}]
}