{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/DELL/my-site/src/app/api/google-ads/route.ts"],"sourcesContent":["// src/app/api/google-ads/route.ts\r\n// @ts-nocheck6\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { createClient } from '@supabase/supabase-js';\r\n\r\n// ÿ•ŸÜÿ¥ÿßÿ° Supabase client ŸÑŸÑÿÆÿßÿØŸÖ\r\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;\r\nconst supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;\r\n\r\nconst supabase = createClient(supabaseUrl, supabaseServiceKey);\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    console.log('üöÄ Next.js API Route: ÿßÿ≥ÿ™ÿØÿπÿßÿ° Google Ads data ŸÖÿ®ÿßÿ¥ÿ±ÿ©...');\r\n    \r\n    const body = await request.json();\r\n    const { loginCustomerId, startDate, endDate, dataType } = body;\r\n    \r\n    console.log('üì• Request body:', { loginCustomerId, startDate, endDate, dataType });\r\n    \r\n    // Get environment variables\r\n    const refreshToken = process.env.GOOGLE_REFRESH_TOKEN;\r\n    const clientId = process.env.GOOGLE_CLIENT_ID;\r\n    const clientSecret = process.env.GOOGLE_CLIENT_SECRET;\r\n    const developerId = process.env.GOOGLE_DEVELOPER_TOKEN;\r\n    const mccCustomerId = process.env.MCC_LOGIN_CUSTOMER_ID;\r\n\r\n    console.log('üîë Environment check:', {\r\n      hasRefreshToken: !!refreshToken,\r\n      hasClientId: !!clientId,\r\n      hasClientSecret: !!clientSecret,\r\n      hasDeveloperToken: !!developerId,\r\n      hasMccCustomerId: !!mccCustomerId\r\n    });\r\n\r\n    if (!refreshToken || !clientId || !clientSecret || !developerId) {\r\n      return NextResponse.json(\r\n        { \r\n          success: false, \r\n          error: 'Missing required environment variables',\r\n          details: {\r\n            hasRefreshToken: !!refreshToken,\r\n            hasClientId: !!clientId,\r\n            hasClientSecret: !!clientSecret,\r\n            hasDeveloperToken: !!developerId,\r\n            hasMccCustomerId: !!mccCustomerId\r\n          }\r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Get access token\r\n    console.log('üîÑ Getting access token...');\r\n    const tokenResponse = await fetch('https://oauth2.googleapis.com/token', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\r\n      body: new URLSearchParams({\r\n        grant_type: 'refresh_token',\r\n        refresh_token: refreshToken,\r\n        client_id: clientId,\r\n        client_secret: clientSecret,\r\n      }),\r\n    });\r\n\r\n    if (!tokenResponse.ok) {\r\n      const tokenError = await tokenResponse.text();\r\n      console.error('‚ùå Token error:', tokenError);\r\n      return NextResponse.json(\r\n        { \r\n          success: false, \r\n          error: 'Failed to get access token', \r\n          details: tokenError \r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const { access_token } = await tokenResponse.json();\r\n    console.log('‚úÖ Access token obtained');\r\n\r\n    // Format customer ID (remove dashes)\r\n    const formattedCustomerId = loginCustomerId?.replace(/-/g, '') || '3271710441';\r\n    console.log('üéØ Using customer ID:', formattedCustomerId);\r\n\r\n    // Google Ads API query\r\n    const query = `\r\n      SELECT \r\n        campaign.id,\r\n        campaign.name,\r\n        campaign.status,\r\n      WHERE campaign.status = 'ENABLED' \r\n      DURING LAST_7_DAYS\r\n    `;\r\n\r\n    // Make Google Ads API request\r\n    console.log('üì° Calling Google Ads API...');\r\n    const adsResponse = await fetch(\r\n      `https://googleads.googleapis.com/v16/customers/${formattedCustomerId}/googleAds:search`,\r\n      {\r\n        method: 'POST',\r\n        headers: {\r\n          'Authorization': `Bearer ${access_token}`,\r\n          'developer-token': developerId,\r\n          'login-customer-id': mccCustomerId?.replace(/-/g, '') || '',\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          query: query.trim()\r\n        }),\r\n      }\r\n    );\r\n\r\n    console.log('üìä API Response status:', adsResponse.status);\r\n\r\n    if (!adsResponse.ok) {\r\n      const errorText = await adsResponse.text();\r\n      console.error('‚ùå Google Ads API error:', errorText);\r\n      return NextResponse.json(\r\n        { \r\n          success: false, \r\n          error: 'Google Ads API failed', \r\n          details: errorText,\r\n          status: adsResponse.status\r\n        },\r\n        { status: adsResponse.status }\r\n      );\r\n    }\r\n\r\n    const data = await adsResponse.json();\r\n    console.log('‚úÖ Google Ads API success:', data);\r\n\r\n    // Transform data for frontend\r\n    const transformedData = data.map((item: any) => {\r\n      const campaign = item.campaign || {};\r\n      const metrics = item.metrics || {};\r\n      \r\n      return {\r\n        id: campaign.id || 'unknown',\r\n        name: campaign.name || 'Unknown Campaign',\r\n        status: campaign.status || 'UNKNOWN',\r\n        cost: metrics.costMicros ? (parseInt(metrics.costMicros) / 1000000).toFixed(2) : '0.00',\r\n        clicks: metrics.clicks || 0,\r\n        impressions: metrics.impressions || 0\r\n      };\r\n    });\r\n\r\n    // Save data to Supabase Database (optional)\r\n    try {\r\n      console.log('üíæ Saving data to Supabase...');\r\n      \r\n      const { error: saveError } = await supabase\r\n        .from('google_ads_data')\r\n        .upsert({\r\n          customer_id: formattedCustomerId,\r\n          data: transformedData,\r\n          fetched_at: new Date().toISOString(),\r\n          data_type: dataType || 'campaigns'\r\n        });\r\n\r\n      if (saveError) {\r\n        console.error('‚ùå Supabase save error:', saveError);\r\n      } else {\r\n        console.log('‚úÖ Data saved to Supabase');\r\n      }\r\n    } catch (saveError) {\r\n      console.error('‚ùå Supabase save failed:', saveError);\r\n      // Continue even if save fails\r\n    }\r\n    \r\n    // ÿ•ÿ±ÿ¨ÿßÿπ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿ•ŸÑŸâ ÿßŸÑÿπŸÖŸäŸÑ\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: transformedData,\r\n      rawData: data,\r\n      message: `Found ${transformedData.length} campaigns`\r\n    });\r\n    \r\n  } catch (error: any) {\r\n    console.error('üí• ÿÆÿ∑ÿ£ ŸÅŸä Next.js API Route:', error);\r\n    return NextResponse.json(\r\n      { \r\n        success: false, \r\n        error: 'Internal server error',\r\n        message: error.message,\r\n        stack: error.stack\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nexport async function GET(request: NextRequest) {\r\n  return NextResponse.json({ \r\n    message: 'Google Ads API Route is working. Use POST method to fetch data.',\r\n    timestamp: new Date().toISOString()\r\n  });\r\n}"],"names":[],"mappings":"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","debugId":null}}]
}