{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 268, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/DELL/my-site/src/app/api/google-ads/route.ts"],"sourcesContent":["// src/app/api/google-ads/route.ts\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { GoogleAdsApi, enums } from 'google-ads-api';\r\n\r\n// Enhanced interfaces for comprehensive campaign management\r\ninterface Campaign {\r\n  id: string;\r\n  name: string;\r\n  status: 'ENABLED' | 'PAUSED' | 'REMOVED';\r\n  type: string;\r\n  subType: string;\r\n  budget: number;\r\n  spend: number;\r\n  impressions: number;\r\n  clicks: number;\r\n  conversions: number;\r\n  ctr: number;\r\n  avgCpc: number;\r\n  conversionRate: number;\r\n  costPerConversion: number;\r\n  qualityScore: number;\r\n  impressionShare: number;\r\n  targetLocation: string;\r\n  bidStrategy: string;\r\n  startDate: string;\r\n  endDate: string;\r\n  devicePerformance: {\r\n    desktop: { impressions: number; clicks: number; cost: number };\r\n    mobile: { impressions: number; clicks: number; cost: number };\r\n    tablet: { impressions: number; clicks: number; cost: number };\r\n  };\r\n  audienceData: {\r\n    ageGroups: { [key: string]: number };\r\n    genders: { male: number; female: number; unknown: number };\r\n    interests: string[];\r\n  };\r\n  geoPerformance: {\r\n    [country: string]: { impressions: number; clicks: number; cost: number };\r\n  };\r\n}\r\n\r\ninterface Summary {\r\n  totalSpend: number;\r\n  totalClicks: number;\r\n  totalImpressions: number;\r\n  totalConversions: number;\r\n  avgCpc: number;\r\n  avgCtr: number;\r\n  conversionRate: number;\r\n  impressionShare: number;\r\n  qualityScore: number;\r\n  campaignTypes: Record<string, number>;\r\n  statusBreakdown: {\r\n    enabled: number;\r\n    paused: number;\r\n    removed: number;\r\n  };\r\n  performanceTrends: {\r\n    impressions: { current: number; previous: number; change: number };\r\n    clicks: { current: number; previous: number; change: number };\r\n    cost: { current: number; previous: number; change: number };\r\n    conversions: { current: number; previous: number; change: number };\r\n  };\r\n  topPerformingCampaigns: Campaign[];\r\n  recommendations: {\r\n    type: 'budget' | 'keyword' | 'audience' | 'bidding';\r\n    title: string;\r\n    description: string;\r\n    impact: 'high' | 'medium' | 'low';\r\n    campaignId?: string;\r\n  }[];\r\n}\r\n\r\ninterface ApiResponse {\r\n  success: boolean;\r\n  data?: {\r\n    campaigns: Campaign[];\r\n    summary: Summary;\r\n    totalCount?: number;\r\n    filteredCount?: number;\r\n  };\r\n  error?: string;\r\n  note?: string;\r\n  isDemo?: boolean;\r\n  customerId?: string;\r\n}\r\n\r\n// Initialize Google Ads API client\r\nconst initializeGoogleAdsClient = () => {\r\n  try {\r\n    const client = new GoogleAdsApi({\r\n      client_id: process.env.GOOGLE_CLIENT_ID!,\r\n      client_secret: process.env.GOOGLE_CLIENT_SECRET!,\r\n      developer_token: process.env.GOOGLE_DEVELOPER_TOKEN!,\r\n    });\r\n\r\n    return client;\r\n  } catch (error) {\r\n    console.error('‚ùå Failed to initialize Google Ads client:', error);\r\n    throw new Error('Google Ads API initialization failed');\r\n  }\r\n};\r\n\r\n// Fetch data for specific customer ID\r\nconst fetchCustomerData = async (customerId: string): Promise<{ campaigns: Campaign[]; summary: Summary }> => {\r\n  try {\r\n    console.log(`üîÑ Fetching data for customer: ${customerId}`);\r\n    \r\n    const client = initializeGoogleAdsClient();\r\n    \r\n    const customer = client.Customer({\r\n      customer_id: customerId,\r\n      refresh_token: process.env.GOOGLE_REFRESH_TOKEN!,\r\n      login_customer_id: process.env.MCC_LOGIN_CUSTOMER_ID!,\r\n    });\r\n\r\n    // Simplified campaign query without problematic segments\r\n    const campaignQuery = `\r\n      SELECT \r\n        campaign.id,\r\n        campaign.name,\r\n        campaign.status,\r\n        campaign.advertising_channel_type,\r\n        campaign.advertising_channel_sub_type,\r\n        campaign.start_date,\r\n        campaign.end_date,\r\n        campaign.bidding_strategy_type,\r\n        campaign_budget.amount_micros,\r\n        metrics.impressions,\r\n        metrics.clicks,\r\n        metrics.cost_micros,\r\n        metrics.conversions,\r\n        metrics.ctr,\r\n        metrics.average_cpc,\r\n        metrics.conversions_from_interactions_rate,\r\n        metrics.cost_per_conversion,\r\n        metrics.search_impression_share\r\n      FROM campaign\r\n      WHERE \r\n        campaign.status IN ('ENABLED', 'PAUSED')\r\n        AND segments.date DURING LAST_30_DAYS\r\n    `;\r\n\r\n    console.log('üîÑ Executing basic campaign query...');\r\n    const campaignResponse = await customer.query(campaignQuery);\r\n    \r\n    if (!campaignResponse || campaignResponse.length === 0) {\r\n      console.log('‚ö†Ô∏è No campaigns found for customer:', customerId);\r\n      throw new Error(`No campaigns found for customer ${customerId}`);\r\n    }\r\n\r\n    console.log(`‚úÖ Found ${campaignResponse.length} campaign records`);\r\n\r\n    // Process campaign data\r\n    const campaignMap = new Map<string, any>();\r\n    \r\n    campaignResponse.forEach((row: any) => {\r\n      const campaignId = row.campaign.id.toString();\r\n      \r\n      if (!campaignMap.has(campaignId)) {\r\n        campaignMap.set(campaignId, {\r\n          id: campaignId,\r\n          name: row.campaign.name,\r\n          status: row.campaign.status,\r\n          type: getCampaignType(row.campaign.advertising_channel_type),\r\n          subType: row.campaign.advertising_channel_sub_type || 'Standard',\r\n          budget: row.campaign_budget?.amount_micros ? row.campaign_budget.amount_micros / 1000000 : 0,\r\n          spend: 0,\r\n          impressions: 0,\r\n          clicks: 0,\r\n          conversions: 0,\r\n          ctr: 0,\r\n          avgCpc: 0,\r\n          conversionRate: 0,\r\n          costPerConversion: 0,\r\n          qualityScore: 8.0, // Default value\r\n          impressionShare: 0,\r\n          targetLocation: 'Multiple Locations',\r\n          bidStrategy: getBiddingStrategy(row.campaign.bidding_strategy_type),\r\n          startDate: row.campaign.start_date || '2024-01-01',\r\n          endDate: row.campaign.end_date || '2024-12-31',\r\n          devicePerformance: {\r\n            desktop: { impressions: 0, clicks: 0, cost: 0 },\r\n            mobile: { impressions: 0, clicks: 0, cost: 0 },\r\n            tablet: { impressions: 0, clicks: 0, cost: 0 }\r\n          },\r\n          audienceData: {\r\n            ageGroups: { '18-24': 20, '25-34': 35, '35-44': 25, '45-54': 15, '55+': 5 },\r\n            genders: { male: 50, female: 48, unknown: 2 },\r\n            interests: ['General']\r\n          },\r\n          geoPerformance: {\r\n            'Egypt': { impressions: 0, clicks: 0, cost: 0 }\r\n          }\r\n        });\r\n      }\r\n      \r\n      const campaign = campaignMap.get(campaignId);\r\n      \r\n      // Aggregate metrics\r\n      campaign.spend += (row.metrics?.cost_micros || 0) / 1000000;\r\n      campaign.impressions += row.metrics?.impressions || 0;\r\n      campaign.clicks += row.metrics?.clicks || 0;\r\n      campaign.conversions += row.metrics?.conversions || 0;\r\n      campaign.ctr = row.metrics?.ctr || 0;\r\n      campaign.avgCpc = (row.metrics?.average_cpc || 0) / 1000000;\r\n      campaign.conversionRate = (row.metrics?.conversions_from_interactions_rate || 0) * 100;\r\n      campaign.costPerConversion = (row.metrics?.cost_per_conversion || 0) / 1000000;\r\n      campaign.impressionShare = (row.metrics?.search_impression_share || 0) * 100;\r\n    });\r\n\r\n    // Try to fetch device performance data separately\r\n    try {\r\n      console.log('üîÑ Fetching device performance data...');\r\n      const deviceQuery = `\r\n        SELECT \r\n          campaign.id,\r\n          segments.device,\r\n          metrics.impressions,\r\n          metrics.clicks,\r\n          metrics.cost_micros\r\n        FROM campaign\r\n        WHERE \r\n          campaign.status IN ('ENABLED', 'PAUSED')\r\n          AND segments.date DURING LAST_30_DAYS\r\n      `;\r\n\r\n      const deviceResponse = await customer.query(deviceQuery);\r\n      \r\n      deviceResponse.forEach((row: any) => {\r\n        const campaignId = row.campaign.id.toString();\r\n        const campaign = campaignMap.get(campaignId);\r\n        \r\n        if (campaign) {\r\n          const device = row.segments?.device?.toLowerCase() || 'unknown';\r\n          if (device === 'desktop' || device === 'mobile' || device === 'tablet') {\r\n            campaign.devicePerformance[device].impressions += row.metrics?.impressions || 0;\r\n            campaign.devicePerformance[device].clicks += row.metrics?.clicks || 0;\r\n            campaign.devicePerformance[device].cost += (row.metrics?.cost_micros || 0) / 1000000;\r\n          }\r\n        }\r\n      });\r\n      \r\n      console.log('‚úÖ Device performance data fetched successfully');\r\n    } catch (deviceError) {\r\n      console.log('‚ö†Ô∏è Could not fetch device performance data:', deviceError);\r\n    }\r\n\r\n    // Try to fetch geographic data separately (simplified)\r\n    try {\r\n      console.log('üîÑ Fetching geographic data...');\r\n      const geoQuery = `\r\n        SELECT \r\n          campaign.id,\r\n          metrics.impressions,\r\n          metrics.clicks,\r\n          metrics.cost_micros\r\n        FROM campaign\r\n        WHERE \r\n          campaign.status IN ('ENABLED', 'PAUSED')\r\n          AND segments.date DURING LAST_30_DAYS\r\n      `;\r\n\r\n      const geoResponse = await customer.query(geoQuery);\r\n      \r\n      // Aggregate geo data (simplified - assign all to Egypt for now)\r\n      geoResponse.forEach((row: any) => {\r\n        const campaignId = row.campaign.id.toString();\r\n        const campaign = campaignMap.get(campaignId);\r\n        \r\n        if (campaign) {\r\n          campaign.geoPerformance['Egypt'].impressions += row.metrics?.impressions || 0;\r\n          campaign.geoPerformance['Egypt'].clicks += row.metrics?.clicks || 0;\r\n          campaign.geoPerformance['Egypt'].cost += (row.metrics?.cost_micros || 0) / 1000000;\r\n        }\r\n      });\r\n      \r\n      console.log('‚úÖ Geographic data fetched successfully');\r\n    } catch (geoError) {\r\n      console.log('‚ö†Ô∏è Could not fetch geographic data:', geoError);\r\n    }\r\n    \r\n    // Convert map to array\r\n    const campaigns = Array.from(campaignMap.values());\r\n    \r\n    if (campaigns.length === 0) {\r\n      throw new Error(`No campaigns found for customer ${customerId}`);\r\n    }\r\n    \r\n    // Calculate summary\r\n    const summary = calculateSummary(campaigns);\r\n    \r\n    console.log(`‚úÖ Successfully fetched ${campaigns.length} campaigns for customer ${customerId}`);\r\n    \r\n    return { campaigns, summary };\r\n    \r\n  } catch (error) {\r\n    console.error(`‚ùå Error fetching data for customer ${customerId}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Helper function to map campaign types\r\nconst getCampaignType = (channelType: string): string => {\r\n  const typeMap: Record<string, string> = {\r\n    'SEARCH': 'Search',\r\n    'DISPLAY': 'Display',\r\n    'SHOPPING': 'Shopping',\r\n    'VIDEO': 'Video',\r\n    'PERFORMANCE_MAX': 'Performance Max',\r\n    'LOCAL': 'Local',\r\n    'SMART': 'Smart',\r\n    'DISCOVERY': 'Discovery',\r\n    'LOCAL_SERVICES': 'Local Services'\r\n  };\r\n  \r\n  return typeMap[channelType] || 'Other';\r\n};\r\n\r\n// Helper function to map bidding strategies\r\nconst getBiddingStrategy = (strategyType: string): string => {\r\n  const strategyMap: Record<string, string> = {\r\n    'MAXIMIZE_CONVERSIONS': 'Maximize Conversions',\r\n    'MAXIMIZE_CONVERSION_VALUE': 'Maximize Conversion Value',\r\n    'TARGET_CPA': 'Target CPA',\r\n    'TARGET_ROAS': 'Target ROAS',\r\n    'MAXIMIZE_CLICKS': 'Maximize Clicks',\r\n    'TARGET_SPEND': 'Target Spend',\r\n    'TARGET_IMPRESSION_SHARE': 'Target Impression Share',\r\n    'ENHANCED_CPC': 'Enhanced CPC',\r\n    'MANUAL_CPC': 'Manual CPC',\r\n    'MANUAL_CPM': 'Manual CPM',\r\n    'MANUAL_CPV': 'Manual CPV'\r\n  };\r\n  \r\n  return strategyMap[strategyType] || 'Unknown';\r\n};\r\n\r\n// Calculate comprehensive summary\r\nconst calculateSummary = (campaigns: Campaign[]): Summary => {\r\n  const totalSpend = campaigns.reduce((sum, c) => sum + c.spend, 0);\r\n  const totalClicks = campaigns.reduce((sum, c) => sum + c.clicks, 0);\r\n  const totalImpressions = campaigns.reduce((sum, c) => sum + c.impressions, 0);\r\n  const totalConversions = campaigns.reduce((sum, c) => sum + c.conversions, 0);\r\n\r\n  // Calculate campaign types\r\n  const campaignTypes: Record<string, number> = {};\r\n  campaigns.forEach(campaign => {\r\n    campaignTypes[campaign.type] = (campaignTypes[campaign.type] || 0) + 1;\r\n  });\r\n\r\n  // Calculate status breakdown\r\n  const statusBreakdown = {\r\n    enabled: campaigns.filter(c => c.status === 'ENABLED').length,\r\n    paused: campaigns.filter(c => c.status === 'PAUSED').length,\r\n    removed: campaigns.filter(c => c.status === 'REMOVED').length\r\n  };\r\n\r\n  // Generate performance trends (mock data for now)\r\n  const performanceTrends = {\r\n    impressions: { \r\n      current: totalImpressions, \r\n      previous: Math.round(totalImpressions * 0.9), \r\n      change: 10 \r\n    },\r\n    clicks: { \r\n      current: totalClicks, \r\n      previous: Math.round(totalClicks * 0.95), \r\n      change: 5 \r\n    },\r\n    cost: { \r\n      current: totalSpend, \r\n      previous: Math.round(totalSpend * 1.05), \r\n      change: -5 \r\n    },\r\n    conversions: { \r\n      current: totalConversions, \r\n      previous: Math.round(totalConversions * 0.85), \r\n      change: 15 \r\n    }\r\n  };\r\n\r\n  // Get top performing campaigns\r\n  const topPerformingCampaigns = campaigns\r\n    .filter(c => c.status === 'ENABLED' && c.conversions > 0)\r\n    .sort((a, b) => b.conversionRate - a.conversionRate)\r\n    .slice(0, 3);\r\n\r\n  // Generate AI recommendations\r\n  const recommendations = generateRecommendations(campaigns);\r\n\r\n  return {\r\n    totalSpend,\r\n    totalClicks,\r\n    totalImpressions,\r\n    totalConversions,\r\n    avgCpc: totalClicks > 0 ? totalSpend / totalClicks : 0,\r\n    avgCtr: totalImpressions > 0 ? (totalClicks / totalImpressions) * 100 : 0,\r\n    conversionRate: totalClicks > 0 ? (totalConversions / totalClicks) * 100 : 0,\r\n    impressionShare: campaigns.length > 0 ? campaigns.reduce((sum, c) => sum + c.impressionShare, 0) / campaigns.length : 0,\r\n    qualityScore: campaigns.length > 0 ? campaigns.reduce((sum, c) => sum + c.qualityScore, 0) / campaigns.length : 0,\r\n    campaignTypes,\r\n    statusBreakdown,\r\n    performanceTrends,\r\n    topPerformingCampaigns,\r\n    recommendations\r\n  };\r\n};\r\n\r\n// Generate AI recommendations based on real data\r\nconst generateRecommendations = (campaigns: Campaign[]) => {\r\n  const recommendations: any[] = [];\r\n  \r\n  // Find high-performing campaigns for budget increase\r\n  const highPerformers = campaigns\r\n    .filter(c => c.status === 'ENABLED' && c.conversionRate > 5)\r\n    .sort((a, b) => b.conversionRate - a.conversionRate);\r\n    \r\n  if (highPerformers.length > 0) {\r\n    recommendations.push({\r\n      type: 'budget',\r\n      title: 'Increase Budget for Top Performers',\r\n      description: `${highPerformers[0].name} has a ${highPerformers[0].conversionRate.toFixed(2)}% conversion rate. Consider increasing budget by 20%.`,\r\n      impact: 'high',\r\n      campaignId: highPerformers[0].id\r\n    });\r\n  }\r\n  \r\n  // Find paused campaigns with good historical performance\r\n  const pausedCampaigns = campaigns.filter(c => c.status === 'PAUSED' && c.conversions > 0);\r\n  if (pausedCampaigns.length > 0) {\r\n    recommendations.push({\r\n      type: 'bidding',\r\n      title: 'Resume High-Performing Paused Campaigns',\r\n      description: `${pausedCampaigns[0].name} is paused but had ${pausedCampaigns[0].conversions} conversions. Consider resuming with optimized targeting.`,\r\n      impact: 'high',\r\n      campaignId: pausedCampaigns[0].id\r\n    });\r\n  }\r\n  \r\n  // Find campaigns with low impression share\r\n  const lowImpressionShare = campaigns\r\n    .filter(c => c.status === 'ENABLED' && c.impressionShare < 50 && c.impressionShare > 0);\r\n    \r\n  if (lowImpressionShare.length > 0) {\r\n    recommendations.push({\r\n      type: 'keyword',\r\n      title: 'Improve Impression Share',\r\n      description: `${lowImpressionShare[0].name} has only ${lowImpressionShare[0].impressionShare.toFixed(1)}% impression share. Consider increasing bids or budget.`,\r\n      impact: 'medium',\r\n      campaignId: lowImpressionShare[0].id\r\n    });\r\n  }\r\n  \r\n  return recommendations;\r\n};\r\n\r\n// Fallback demo data for specific customer\r\nconst generateCustomerDemoData = (customerId: string): { campaigns: Campaign[]; summary: Summary } => {\r\n  const campaigns: Campaign[] = [\r\n    {\r\n      id: `demo_${customerId}_001`,\r\n      name: `Demo Campaign for Customer ${customerId}`,\r\n      status: 'ENABLED',\r\n      type: 'Performance Max',\r\n      subType: 'All Products',\r\n      budget: 5000,\r\n      spend: 3456.78,\r\n      impressions: 125000,\r\n      clicks: 2500,\r\n      conversions: 125,\r\n      ctr: 2.0,\r\n      avgCpc: 1.38,\r\n      conversionRate: 5.0,\r\n      costPerConversion: 27.65,\r\n      qualityScore: 8.5,\r\n      impressionShare: 75.0,\r\n      targetLocation: 'Egypt',\r\n      bidStrategy: 'Maximize Conversions',\r\n      startDate: '2024-01-01',\r\n      endDate: '2024-12-31',\r\n      devicePerformance: {\r\n        desktop: { impressions: 50000, clicks: 1000, cost: 1382.71 },\r\n        mobile: { impressions: 62500, clicks: 1250, cost: 1728.39 },\r\n        tablet: { impressions: 12500, clicks: 250, cost: 345.68 }\r\n      },\r\n      audienceData: {\r\n        ageGroups: { '18-24': 20, '25-34': 35, '35-44': 25, '45-54': 15, '55+': 5 },\r\n        genders: { male: 55, female: 43, unknown: 2 },\r\n        interests: ['Technology', 'Shopping']\r\n      },\r\n      geoPerformance: {\r\n        'Egypt': { impressions: 125000, clicks: 2500, cost: 3456.78 }\r\n      }\r\n    }\r\n  ];\r\n  \r\n  const summary = calculateSummary(campaigns);\r\n  return { campaigns, summary };\r\n};\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    const { searchParams } = new URL(request.url);\r\n    const dataType = searchParams.get('dataType') || 'campaigns';\r\n    const campaignType = searchParams.get('campaignType');\r\n    const status = searchParams.get('status');\r\n    const search = searchParams.get('search');\r\n    \r\n    // Get customer ID from query params or use default\r\n    const customerId = searchParams.get('customerId') || '3271710441';\r\n    \r\n    console.log('üîç GET Request params:', { dataType, campaignType, status, search, customerId });\r\n\r\n    let campaignsData: { campaigns: Campaign[]; summary: Summary };\r\n    let isDemo = false;\r\n\r\n    try {\r\n      // Try to fetch real Google Ads data for specific customer\r\n      console.log(`üîÑ Attempting to fetch real Google Ads data for customer: ${customerId}`);\r\n      campaignsData = await fetchCustomerData(customerId);\r\n      console.log('‚úÖ Successfully fetched real Google Ads data');\r\n    } catch (error) {\r\n      console.error(`‚ùå Failed to fetch real data for customer ${customerId}, falling back to demo:`, error);\r\n      campaignsData = generateCustomerDemoData(customerId);\r\n      isDemo = true;\r\n    }\r\n    \r\n    // Apply filters if provided\r\n    let filteredCampaigns = campaignsData.campaigns;\r\n    \r\n    if (campaignType && campaignType !== 'all') {\r\n      filteredCampaigns = filteredCampaigns.filter(c => \r\n        c.type.toLowerCase().includes(campaignType.toLowerCase())\r\n      );\r\n    }\r\n    \r\n    if (status && status !== 'all') {\r\n      filteredCampaigns = filteredCampaigns.filter(c => \r\n        c.status.toLowerCase() === status.toLowerCase()\r\n      );\r\n    }\r\n    \r\n    if (search) {\r\n      filteredCampaigns = filteredCampaigns.filter(c => \r\n        c.name.toLowerCase().includes(search.toLowerCase())\r\n      );\r\n    }\r\n\r\n    const response: ApiResponse = {\r\n      success: true,\r\n      data: {\r\n        campaigns: filteredCampaigns,\r\n        summary: campaignsData.summary,\r\n        totalCount: campaignsData.campaigns.length,\r\n        filteredCount: filteredCampaigns.length\r\n      },\r\n      note: isDemo ? `Using demo data for customer ${customerId} - Google Ads API connection failed` : `Real Google Ads data for customer ${customerId}`,\r\n      isDemo,\r\n      customerId\r\n    };\r\n\r\n    console.log(`‚úÖ Returning ${isDemo ? 'demo' : 'real'} data with ${filteredCampaigns.length} campaigns for customer ${customerId}`);\r\n    return NextResponse.json(response);\r\n    \r\n  } catch (error) {\r\n    console.error('‚ùå API Error:', error);\r\n    \r\n    const customerId = '3271710441'; // Default customer ID\r\n    const fallbackData = generateCustomerDemoData(customerId);\r\n    \r\n    return NextResponse.json({\r\n      success: true,\r\n      data: {\r\n        campaigns: fallbackData.campaigns,\r\n        summary: fallbackData.summary,\r\n        totalCount: fallbackData.campaigns.length,\r\n        filteredCount: fallbackData.campaigns.length\r\n      },\r\n      note: `Using fallback demo data for customer ${customerId} due to API error`,\r\n      isDemo: true,\r\n      customerId,\r\n      error: error instanceof Error ? error.message : 'Unknown error'\r\n    });\r\n  }\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    console.log('üöÄ POST Request: Fetching Google Ads data...');\r\n    \r\n    const body = await request.json();\r\n    const { customerId, startDate, endDate, dataType } = body;\r\n    \r\n    // Use provided customer ID or default\r\n    const targetCustomerId = customerId || '3271710441';\r\n    \r\n    console.log('üì• Request body:', { customerId: targetCustomerId, startDate, endDate, dataType });\r\n    \r\n    let campaignsData: { campaigns: Campaign[]; summary: Summary };\r\n    let isDemo = false;\r\n\r\n    try {\r\n      // Try to fetch real Google Ads data for specific customer\r\n      campaignsData = await fetchCustomerData(targetCustomerId);\r\n    } catch (error) {\r\n      console.error(`‚ùå Failed to fetch real data for customer ${targetCustomerId}, using demo:`, error);\r\n      campaignsData = generateCustomerDemoData(targetCustomerId);\r\n      isDemo = true;\r\n    }\r\n    \r\n    return NextResponse.json({\r\n      success: true,\r\n      data: campaignsData,\r\n      message: isDemo ? `Demo data loaded for customer ${targetCustomerId} (API connection failed)` : `Real Google Ads data loaded successfully for customer ${targetCustomerId}`,\r\n      isDemo,\r\n      customerId: targetCustomerId\r\n    });\r\n    \r\n  } catch (error: any) {\r\n    console.error('‚ùå POST request error:', error);\r\n    \r\n    const customerId = '3271710441';\r\n    const fallbackData = generateCustomerDemoData(customerId);\r\n    \r\n    return NextResponse.json({\r\n      success: true,\r\n      data: fallbackData,\r\n      message: `Fallback demo data loaded for customer ${customerId} due to error`,\r\n      isDemo: true,\r\n      customerId,\r\n      error: error.message\r\n    });\r\n  }\r\n}\r\n\r\nexport async function PUT(request: NextRequest) {\r\n  try {\r\n    console.log('üîß PUT Request: Campaign action...');\r\n    \r\n    const body = await request.json();\r\n    const { campaignId, action, customerId } = body;\r\n    \r\n    console.log('üì• Campaign action:', { campaignId, action, customerId });\r\n    \r\n    // For now, return success (campaign actions would require additional Google Ads API calls)\r\n    return NextResponse.json({\r\n      success: true,\r\n      message: `Campaign ${action} action completed for customer ${customerId}`,\r\n      isDemo: true,\r\n      note: 'Campaign actions are simulated - implement Google Ads API campaign management for real actions'\r\n    });\r\n    \r\n  } catch (error: any) {\r\n    console.error('‚ùå PUT request error:', error);\r\n    \r\n    return NextResponse.json({\r\n      success: false,\r\n      error: error.message || 'Campaign action failed'\r\n    }, { status: 500 });\r\n  }\r\n}"],"names":[],"mappings":"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","debugId":null}}]
}